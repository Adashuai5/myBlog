{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1547818712298},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1547818712298},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1547818712299},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1547818712301},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1547818712302},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1547818712302},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1547818712303},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1547818712303},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1547818712303},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1547818712304},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1547818712304},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1547818712305},{"_id":"themes/next/_config.yml","hash":"cd8ec8caaf33cb7ddf7a39733b9f2a0efda7a756","modified":1547818712306},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1547818712306},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1547818712307},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1547818712349},{"_id":"source/_posts/从「从输入URL到页面加载」谈及Web性能优化.md","hash":"f1c7202a5ab86e66a6f136224067a573db635f9e","modified":1547821713351},{"_id":"source/_posts/优先级-和-CSS-预处理.md","hash":"3bceb9a2d3aefe3ca2ad9a5413876e2edfffd124","modified":1547821939179},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1547818712282},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1547818712288},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1547818384741},{"_id":"themes/next/.git/index","hash":"d6dff4fa13690ca5eb8439777ba7965db0f5d5ed","modified":1547818712494},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1547818712278},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1547818712299},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1547818712300},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1547818712300},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1547818712301},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1547818712307},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1547818712308},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1547818712308},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1547818712309},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1547818712310},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1547818712309},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1547818712310},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1547818712310},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1547818712311},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1547818712311},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1547818712312},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1547818712312},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1547818712312},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1547818712313},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1547818712313},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1547818712314},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1547818712315},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1547818712346},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1547818712347},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1547818712347},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1547818712347},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1547818712348},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1547818712348},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1547818712349},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1547818712350},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1547818712351},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1547818712492},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1547818712492},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1547818712493},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712409},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1547818384741},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1547818384742},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1547818384743},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1547818384743},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1547818384743},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1547818384744},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1547818384744},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1547818384745},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1547818384745},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1547818384746},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1547818384746},{"_id":"themes/next/.git/logs/HEAD","hash":"d55d8e6b0aa3f2d481fc401e7885b20cdb07f262","modified":1547818712285},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1547818384747},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547818712314},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547818712315},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1547818712316},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1547818712316},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1547818712316},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1547818712317},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1547818712317},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1547818712318},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1547818712318},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1547818712318},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1547818712319},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1547818712320},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1547818712321},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1547818712321},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1547818712321},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1547818712326},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1547818712326},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1547818712329},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1547818712339},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1547818712340},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1547818712341},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1547818712342},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1547818712340},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1547818712342},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1547818712341},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1547818712352},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1547818712353},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1547818712352},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1547818712354},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1547818712353},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1547818712354},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1547818712354},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1547818712355},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1547818712355},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1547818712409},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547818712411},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1547818712410},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547818712411},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1547818712412},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1547818712412},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1547818712413},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1547818712413},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1547818712413},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1547818712414},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1547818712414},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547818712415},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547818712415},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547818712415},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1547818712416},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547818712416},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1547818712417},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547818712418},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1547818712417},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712328},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712328},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712394},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712395},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712393},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712407},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712408},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1547818712284},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1547818712319},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1547818712320},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1547818712322},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1547818712323},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1547818712324},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1547818712324},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1547818712325},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1547818712323},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1547818712325},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1547818712327},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547818712327},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547818712328},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1547818712330},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1547818712330},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1547818712331},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1547818712331},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1547818712332},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1547818712332},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1547818712332},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1547818712333},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1547818712333},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1547818712334},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1547818712334},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1547818712334},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1547818712335},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1547818712336},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1547818712335},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1547818712337},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1547818712336},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1547818712337},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1547818712338},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1547818712338},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1547818712338},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1547818712339},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1547818712346},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1547818712344},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1547818712344},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1547818712345},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1547818712393},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1547818712394},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1547818712393},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1547818712395},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1547818712406},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1547818712407},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1547818712408},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1547818712408},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1547818712419},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1547818712418},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1547818712419},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1547818712420},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1547818712421},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1547818712421},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1547818712420},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1547818712423},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1547818712423},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1547818712424},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547818712432},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547818712435},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1547818712436},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1547818712436},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1547818712437},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1547818712422},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1547818712466},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1547818712449},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1547818712450},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1547818712449},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1547818712450},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1547818712468},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1547818712468},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1547818712469},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1547818712469},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1547818712470},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1547818712470},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1547818712446},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1547818712446},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1547818712447},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1547818712446},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1547818712471},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1547818712471},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1547818712472},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547818712473},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547818712473},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547818712474},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547818712474},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547818712474},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547818712475},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547818712475},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547818712476},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547818712476},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547818712477},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547818712477},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547818712477},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547818712478},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1547818712478},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1547818712479},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1547818712480},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1547818712480},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1547818712486},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1547818712487},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1547818712490},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1547818712490},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1547818712491},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1547818712450},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1547818712467},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d55d8e6b0aa3f2d481fc401e7885b20cdb07f262","modified":1547818712285},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1547818712281},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1547818712343},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1547818712343},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1547818712389},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1547818712390},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1547818712390},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1547818712391},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1547818712391},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1547818712392},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1547818712357},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1547818712357},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1547818712358},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1547818712358},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1547818712361},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1547818712368},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1547818712379},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1547818712389},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1547818712396},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1547818712396},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1547818712397},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1547818712397},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1547818712398},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1547818712398},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547818712399},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1547818712399},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1547818712401},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1547818712401},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1547818712402},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547818712402},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1547818712402},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1547818712404},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1547818712404},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1547818712405},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1547818712405},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1547818712405},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1547818712406},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1547818712422},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547818712437},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547818712438},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547818712439},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547818712439},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547818712440},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547818712438},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1547818712443},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1547818712444},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1547818712445},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1547818712452},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1547818712451},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1547818712453},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1547818712429},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1547818712430},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1547818712431},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1547818712485},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1547818712485},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1547818712448},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547818712448},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1547818712430},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1547818712489},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d55d8e6b0aa3f2d481fc401e7885b20cdb07f262","modified":1547818712281},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547818712464},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547818712465},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1547818712362},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1547818712363},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1547818712362},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1547818712363},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1547818712364},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1547818712365},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1547818712363},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1547818712365},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1547818712366},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1547818712366},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1547818712367},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1547818712367},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1547818712368},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1547818712369},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1547818712369},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1547818712370},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1547818712370},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1547818712370},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1547818712371},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1547818712371},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1547818712372},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1547818712372},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1547818712372},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1547818712373},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1547818712373},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1547818712374},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1547818712374},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1547818712361},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1547818712374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1547818712375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1547818712376},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1547818712376},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1547818712377},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1547818712377},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1547818712376},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1547818712378},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1547818712378},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1547818712379},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1547818712379},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1547818712380},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1547818712380},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1547818712381},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1547818712382},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1547818712382},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1547818712383},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1547818712381},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1547818712383},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1547818712383},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1547818712384},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1547818712385},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1547818712386},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1547818712386},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1547818712385},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1547818712386},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1547818712387},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1547818712388},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1547818712387},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1547818712388},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547818712400},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547818712403},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1547818712400},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547818712440},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1547818712441},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1547818712441},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1547818712442},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1547818712443},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1547818712442},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547818712426},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547818712426},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547818712427},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547818712427},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1547818712428},{"_id":"themes/next/.git/objects/pack/pack-2e8bfe0bbc40ee78847e36e8d3edd701735c6f4e.idx","hash":"50fb014b44992cfb2c56176f1defd1be870f96b9","modified":1547818712244},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547818712455},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547818712457},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547818712463},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1547818712434},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1547818712484},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1547818712461},{"_id":"themes/next/.git/objects/pack/pack-2e8bfe0bbc40ee78847e36e8d3edd701735c6f4e.pack","hash":"85a7403d5a07a998880356d55082d480ab60cff4","modified":1547818712246},{"_id":"source/_posts/浅谈JS继承.md","hash":"aa2602c496789a2fbb7dc828d5b5b23453f373f1","modified":1547822216975},{"_id":"source/_posts/正则表达式速记.md","hash":"b4370f4285abc820071e49caf3e274ff0b70b902","modified":1547822610007},{"_id":"source/_posts/理解虚拟-DOM.md","hash":"53ba9216bb439bcdfacfea5c3270d704c0b70d89","modified":1547822773637},{"_id":"source/_posts/HTTP-学习之-Cookie.md","hash":"ac2a492031710186b5cb7f60ab2317541c582b35","modified":1547822875108},{"_id":"source/_posts/CSS常用布局-续篇.md","hash":"5ad62fb2c840625d60ffd40868cd471cae56210d","modified":1547823000936},{"_id":"source/_posts/搞懂这些-你就理解-this-了.md","hash":"1795d5c0bc03cad43eb887bf48807a8bcf6e48aa","modified":1547823135545},{"_id":"source/_posts/OOP-初探（给-MVC-添加类）.md","hash":"163b133cf90ee18a0aaf348f3111538828d60fa7","modified":1547823254733},{"_id":"public/archives/index.html","hash":"e62f145ca879d2d6ba5281209613875f866915f4","modified":1547823292949},{"_id":"public/archives/2018/index.html","hash":"ea257b81b74e9bf85831e8ff92a2ae23f2142ea4","modified":1547823292949},{"_id":"public/archives/2018/08/index.html","hash":"3334e79e92854f1aef0e22fda2299d78ee13dcbb","modified":1547823292949},{"_id":"public/archives/2018/09/index.html","hash":"f88657df251fcfccca61b0e2d3e1bc06e086e85c","modified":1547823292950},{"_id":"public/archives/2018/10/index.html","hash":"a0342b60415c2b575c7ed90d61a0fc1fccf11b2c","modified":1547823292950},{"_id":"public/archives/2018/11/index.html","hash":"96c5668a5d83adfb2f0ead8a0ada037e9aa8bc8a","modified":1547823292950},{"_id":"public/archives/2018/12/index.html","hash":"86b490fc684e165aaed924e2f1bc51d5b52a997a","modified":1547823292950},{"_id":"public/2018/12/29/从「从输入URL到页面加载」谈及Web性能优化/index.html","hash":"c895208ad86d003ec62e99966e20b2613c795d6d","modified":1547823292950},{"_id":"public/2018/12/20/优先级-和-CSS-预处理/index.html","hash":"ef7f07385aa1cab4c5a3b4fe4211a5b9ca8f8cb4","modified":1547823292950},{"_id":"public/2018/11/02/浅谈JS继承/index.html","hash":"c7040cfce79d5866ddcddc219d7bd47e2ddae4d3","modified":1547823292950},{"_id":"public/2018/10/28/正则表达式速记/index.html","hash":"f0668f7f97abd3b2427f297d1015a337b3296a7e","modified":1547823292950},{"_id":"public/2018/09/27/理解虚拟-DOM/index.html","hash":"3786b8744cd13d2550627a992dd8d3cb0cdf5c74","modified":1547823292950},{"_id":"public/2018/09/16/HTTP-学习之-Cookie/index.html","hash":"398bd68c047c0bd7f98810204542ed8903d5a494","modified":1547823292950},{"_id":"public/2018/09/10/CSS常用布局-续篇/index.html","hash":"4104c4bac9d7d795be2a7f6dc706791feff61c90","modified":1547823292950},{"_id":"public/2018/09/02/OOP-初探（给-MVC-添加类）/index.html","hash":"3472736eadeb76551efe411b00089872259f240f","modified":1547823292950},{"_id":"public/2018/08/27/搞懂这些-你就理解-this-了/index.html","hash":"1fda2745c88584b225937bf86991fbe488d81b6c","modified":1547823292950},{"_id":"public/index.html","hash":"9860b60055016f21f2caf79b72d7ae25858dcdb7","modified":1547823292950},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547823292964},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1547823292965},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547823292965},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1547823292965},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1547823292965},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1547823292965},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1547823292965},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1547823292965},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1547823292965},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547823292965},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547823292965},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547823292965},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1547823292965},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1547823292965},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547823292966},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1547823292966},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547823292966},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1547823292966},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1547823292966},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1547823292966},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547823292966},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547823292967},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547823292967},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547823292967},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547823292967},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547823292967},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1547823292967},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547823292967},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547823292967},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547823292967},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547823292967},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547823292967},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1547823292967},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547823293401},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547823293409},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1547823293421},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1547823293421},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1547823293422},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1547823293422},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1547823293422},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1547823293422},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1547823293422},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1547823293422},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1547823293422},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1547823293422},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547823293422},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547823293422},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1547823293423},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1547823293423},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1547823293423},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1547823293423},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1547823293423},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1547823293423},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1547823293423},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547823293423},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547823293423},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547823293423},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547823293423},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547823293423},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547823293424},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547823293424},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547823293424},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547823293424},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547823293424},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547823293424},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547823293424},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1547823293424},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1547823293424},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1547823293424},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1547823293424},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1547823293424},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547823293424},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1547823293424},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1547823293425},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1547823293425},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547823293425},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1547823293425},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1547823293425},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1547823293425},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1547823293425},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1547823293425},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1547823293425},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1547823293425},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1547823293425},{"_id":"public/css/main.css","hash":"ee28a045855e856ea07c1bf7b691744cb993ce6d","modified":1547823293425},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1547823293425},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1547823293425},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1547823293425},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1547823293426},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1547823293426},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1547823293426},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1547823293426},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547823293426},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1547823293426},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1547823293426},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1547823293426},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1547823293426},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1547823293426},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1547823293427},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1547823293427},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1547823293427},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1547823293427},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1547823293427},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1547823293427},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1547823293427},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547823293428},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547823293428},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547823293428},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1547823293480}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"从「从输入URL到页面加载」谈及Web性能优化","date":"2018-12-29T06:09:32.000Z","_content":"# 如何理解 Web 性能优化\n事实上就是用户觉得页面加载很快，用户从输入URL（网址）到页面在浏览器上加载出来的时间很短；与之相对的有如服务器性能优化（如网页占的 CPU 少），一定要区分开来。\n对于用户众多的网站，节约下的加载时间或能带来可观的收入，这便是前端 Web 性能优化的意义。\n# 从输入 URL 到页面加载发生了什么\n一道所有前端耳熟能详的经典面试题，也确实是需要前端去深入研究的东西。下面我会简单介绍其过程，并罗列相关的 Web 优化方案。\n## 0. 缓存\n当我们在浏览器上输入网址，浏览器首先会查看是否有缓存，如果之前已经访问过该网站，则会有缓存，那浏览器就不必再向服务器发请求了，用户则能够很快得看到内容。Web 性能优化有极大一部分都是优化缓存，缓存事实上又分为数据库缓存、代理服务器缓存、还有我们熟悉的 CDN 缓存，以及浏览器缓存等，部分内容后文介绍。\n## 1. DNS 查询\nDNS 查询就像电话簿，你在浏览器地址栏输入网址，通过 DNS 查询得到域名的真实 IP。\n\n![](https://upload-images.jianshu.io/upload_images/7094266-d21c9b5e4b39ad6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nDNS查询完成之前，浏览器无法从服务器下载任何数据。\n\n### 优化方案：减少 DNS 查询\n#### 1.1 DNS 缓存\nISP、局域网、操作系统、浏览器等都会有相应的DNS缓存机制。\n#### 1.2 减少页面的唯一域名\n因为每次 DNS 查询就是查找唯一域名的过程，那么域名越少，DNS 查询就越少，应该尽量将资源放在同一域名。当然这样做又有其他问题，下文详解。\n## 2. TCP 连接\n经典的三次握手和四次挥手，不展开赘述。\n简单讲讲优化方案：TCP 连接复用（TCP Connection Reuse），在 HTTP 请求头中的 Connection 上加 keep-alive；HTTP/2.0 多路复用等。\n## 3. HTTP 请求及响应\n直接讲优化策略\n#### 3.1 避免不必要的重定向\n&gt; 最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加/但未添加。比如，访问http://astrology.yahoo.com/astrology将被301重定向到 http://astrology.yahoo.com/astrology/（注意末尾的 /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。\n#### 3.2 Cookie\n##### 3.2.1减少 Cookie 大小\n每次请求都会带上对应的 Cookie，减少 Cookie 大小可以降低其对响应速度的影响：\n- 去除不必要的 Cookie；\n- 尽量压缩 Cookie 大小；\n- 注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；\n- 设置合适的过期时间。\n\n##### 3.2.2 静态资源使用无 Cookie 域名\n静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。\n#### 3.3 添加 Expires 或 Cache-Control 响应头\nHTTP/1.1 增加的 Cache-Control，它比 Expires 等好在其设定时间是相对的，避免了用户本地设置时间落后所造成的无法良好缓存的问题等。\n- 静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；\n- 动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。\n\n#### 3.4 配置 Etag\n通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。\n#### 3.5 使用 Gzip\n使用 Gzip 就是将 HTML、CSS、JS、XML、JSON 等资源进行 Gzip 高效压缩，减少资源体积那么下载就会更快。\nGzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，比 Deflate 更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持 Gzip 解码。\n从HTTP/1.1开始，客户端就有了支持压缩的 Accept-Encoding HTTP 请求头。\n```\nAccept-Encoding: gzip, deflate\n```\n服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过 Content-Encoding 响应头来通知客户端。\n```\nContent-Encoding: gzip\n```\n需要注意的是，已经压缩过的内容如图片和PDF不要使用 Gzip，另外还有文件内容本身就很小，这些资源再使用 Gzip 反而会增加资源下载时间，浪费 CPU 资源，而且还可能增加文件体积。\n### 值得一提\nHTTP 请求的另一个优化方案是增加同时请求的数量，浏览器会同时发送多个请求，但是同一域名最多同时发送 4~8 个（不同浏览器不同）请求，那么当资源过多时，可以采用增加域名的方法增加并发量。当然这一方法又与上述 DNS 查询的优化方案矛盾，真正使用的时候就需要权衡。\n另外，既然一次只能发的请求有限，就应该将重要的需要优先展示的资源先请求：\n#### 3.6 延迟加载（懒加载）\n页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：\n- 非首屏使用的数据、样式、脚本、图片等；\n- 用户交互时才会显示的内容。\n\n遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。\n&gt;将首屏以外的HTML放在不渲染的元素中，如隐藏的&lt;textarea&gt;，或者type属性为非执行脚本的 &lt;script&gt; 标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。\n#### 3.7 预加载\n预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。\n## 4. 浏览器解析渲染页面\n响应完成后，浏览器下载完资源，就开始解析资源生成页面了。对于前端来说，这部分内容是完全需要我们去掌控的，我们也来简单介绍一下对应的优化内容，部分内容如懒加载等上面已经提及就不再重复。\n#### 4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;\n&gt;这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“[怪异模式(兼容模式)](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode)”的渲染模式。“`&lt;!DOCTYPE html&gt;`\" 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。\n\n不写或写错文档类型声明，会浪费浏览器渲染页面的时间或引起错误排版。\n#### 4.2 CSS 放在 &lt;head&gt; 中\n把样式表放在 &lt;head&gt; 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。\n这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。\n如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。\n#### 4.2 把脚本放在页面底部\n浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源，并且，没有 js 并不邮箱呈现在用户目前的内容的观感。因此，最好将脚本放在底部，以提高页面加载速度。\n一些特殊场景无法将脚本放到页面底部的，可以考虑&lt;script&gt;的以下属性：\n- defer 属性；\n- HTML5 新增的async属性。\n\n#### 4.3 使用外部 JavaScript 和 CSS\n外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。\n当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。\n#### 4.4 合并和压缩 JS/CSS 等文件\n通过该方法减少页面所需资源，减少请求数量，加快响应时间。现在 webpack 打包工具都已经默认实现了。\n#### 4.5 减少 DOM 操作和使用高效的事件处理\n- 缓存已经访问过的元素；\n- 使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；\n- 操作 className，而不是多次读写 style；\n- 避免使用 JavaScript 修复布局；\n- 减少绑定事件监听的节点，如通过事件委托（当然现在浏览器功能强大，影响不大）；\n- 尽早处理事件，在 DOMContentLoaded 即可进行，不用等到 load 以后。\n\n#### 4.6 图片优化\n如何将图片变得又小又好看是一个工程师实力的体现，这里不过多赘述，大家可以查看我后文提供的资源。\n#### 4.7 使用 CND\n&gt;内容分发网络（Content delivery network 或 Content distribution network）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n\n动态 CDN，使用离你最近的服务器；CDN 没有 Cookie，使用 CDN 可以减少 Cookie；CND 会自动合并脚本文件等，减少请求数量；当然，使用 CND 同时也增加了一个域名，增大了同时请求数量。\n# 总结\n![](https://upload-images.jianshu.io/upload_images/7094266-2696c8f1d212f5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n该文大量参考了雅虎 35 军规，增加了一些自己的理解并舍弃了一些已经过时的内容。细节内容比较少，主要是笼统地将 Web 性能优化的思路做了梳理，很多内容都值得我们去深入研究。当然其中部分内容顺序还是不佳，因为很多内容事实上是贯穿在整个过程当中的，正如 Web 性能优化是个整体，需要权衡所有冲突。希望本文可以给你一些在面试官问道你时的思路。\n深入阅读 [从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！](https://zhuanlan.zhihu.com/p/34453198)\n\n本文参考：\n[前端性能优化之雅虎35条军规](https://juejin.im/post/5b73ef38f265da281e048e51)\n[前端经典面试题: 从输入URL到页面加载发生了什么？](https://segmentfault.com/a/1190000006879700)\nMDN\n维基百科\n","source":"_posts/从「从输入URL到页面加载」谈及Web性能优化.md","raw":"---\ntitle: 从「从输入URL到页面加载」谈及Web性能优化\ndate: 2018-12-29 14:09:32\ntags:\n---\n# 如何理解 Web 性能优化\n事实上就是用户觉得页面加载很快，用户从输入URL（网址）到页面在浏览器上加载出来的时间很短；与之相对的有如服务器性能优化（如网页占的 CPU 少），一定要区分开来。\n对于用户众多的网站，节约下的加载时间或能带来可观的收入，这便是前端 Web 性能优化的意义。\n# 从输入 URL 到页面加载发生了什么\n一道所有前端耳熟能详的经典面试题，也确实是需要前端去深入研究的东西。下面我会简单介绍其过程，并罗列相关的 Web 优化方案。\n## 0. 缓存\n当我们在浏览器上输入网址，浏览器首先会查看是否有缓存，如果之前已经访问过该网站，则会有缓存，那浏览器就不必再向服务器发请求了，用户则能够很快得看到内容。Web 性能优化有极大一部分都是优化缓存，缓存事实上又分为数据库缓存、代理服务器缓存、还有我们熟悉的 CDN 缓存，以及浏览器缓存等，部分内容后文介绍。\n## 1. DNS 查询\nDNS 查询就像电话簿，你在浏览器地址栏输入网址，通过 DNS 查询得到域名的真实 IP。\n\n![](https://upload-images.jianshu.io/upload_images/7094266-d21c9b5e4b39ad6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nDNS查询完成之前，浏览器无法从服务器下载任何数据。\n\n### 优化方案：减少 DNS 查询\n#### 1.1 DNS 缓存\nISP、局域网、操作系统、浏览器等都会有相应的DNS缓存机制。\n#### 1.2 减少页面的唯一域名\n因为每次 DNS 查询就是查找唯一域名的过程，那么域名越少，DNS 查询就越少，应该尽量将资源放在同一域名。当然这样做又有其他问题，下文详解。\n## 2. TCP 连接\n经典的三次握手和四次挥手，不展开赘述。\n简单讲讲优化方案：TCP 连接复用（TCP Connection Reuse），在 HTTP 请求头中的 Connection 上加 keep-alive；HTTP/2.0 多路复用等。\n## 3. HTTP 请求及响应\n直接讲优化策略\n#### 3.1 避免不必要的重定向\n&gt; 最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加/但未添加。比如，访问http://astrology.yahoo.com/astrology将被301重定向到 http://astrology.yahoo.com/astrology/（注意末尾的 /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。\n#### 3.2 Cookie\n##### 3.2.1减少 Cookie 大小\n每次请求都会带上对应的 Cookie，减少 Cookie 大小可以降低其对响应速度的影响：\n- 去除不必要的 Cookie；\n- 尽量压缩 Cookie 大小；\n- 注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；\n- 设置合适的过期时间。\n\n##### 3.2.2 静态资源使用无 Cookie 域名\n静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。\n#### 3.3 添加 Expires 或 Cache-Control 响应头\nHTTP/1.1 增加的 Cache-Control，它比 Expires 等好在其设定时间是相对的，避免了用户本地设置时间落后所造成的无法良好缓存的问题等。\n- 静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；\n- 动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。\n\n#### 3.4 配置 Etag\n通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。\n#### 3.5 使用 Gzip\n使用 Gzip 就是将 HTML、CSS、JS、XML、JSON 等资源进行 Gzip 高效压缩，减少资源体积那么下载就会更快。\nGzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，比 Deflate 更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持 Gzip 解码。\n从HTTP/1.1开始，客户端就有了支持压缩的 Accept-Encoding HTTP 请求头。\n```\nAccept-Encoding: gzip, deflate\n```\n服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过 Content-Encoding 响应头来通知客户端。\n```\nContent-Encoding: gzip\n```\n需要注意的是，已经压缩过的内容如图片和PDF不要使用 Gzip，另外还有文件内容本身就很小，这些资源再使用 Gzip 反而会增加资源下载时间，浪费 CPU 资源，而且还可能增加文件体积。\n### 值得一提\nHTTP 请求的另一个优化方案是增加同时请求的数量，浏览器会同时发送多个请求，但是同一域名最多同时发送 4~8 个（不同浏览器不同）请求，那么当资源过多时，可以采用增加域名的方法增加并发量。当然这一方法又与上述 DNS 查询的优化方案矛盾，真正使用的时候就需要权衡。\n另外，既然一次只能发的请求有限，就应该将重要的需要优先展示的资源先请求：\n#### 3.6 延迟加载（懒加载）\n页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：\n- 非首屏使用的数据、样式、脚本、图片等；\n- 用户交互时才会显示的内容。\n\n遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。\n&gt;将首屏以外的HTML放在不渲染的元素中，如隐藏的&lt;textarea&gt;，或者type属性为非执行脚本的 &lt;script&gt; 标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。\n#### 3.7 预加载\n预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。\n## 4. 浏览器解析渲染页面\n响应完成后，浏览器下载完资源，就开始解析资源生成页面了。对于前端来说，这部分内容是完全需要我们去掌控的，我们也来简单介绍一下对应的优化内容，部分内容如懒加载等上面已经提及就不再重复。\n#### 4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;\n&gt;这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“[怪异模式(兼容模式)](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode)”的渲染模式。“`&lt;!DOCTYPE html&gt;`\" 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。\n\n不写或写错文档类型声明，会浪费浏览器渲染页面的时间或引起错误排版。\n#### 4.2 CSS 放在 &lt;head&gt; 中\n把样式表放在 &lt;head&gt; 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。\n这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。\n如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。\n#### 4.2 把脚本放在页面底部\n浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源，并且，没有 js 并不邮箱呈现在用户目前的内容的观感。因此，最好将脚本放在底部，以提高页面加载速度。\n一些特殊场景无法将脚本放到页面底部的，可以考虑&lt;script&gt;的以下属性：\n- defer 属性；\n- HTML5 新增的async属性。\n\n#### 4.3 使用外部 JavaScript 和 CSS\n外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。\n当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。\n#### 4.4 合并和压缩 JS/CSS 等文件\n通过该方法减少页面所需资源，减少请求数量，加快响应时间。现在 webpack 打包工具都已经默认实现了。\n#### 4.5 减少 DOM 操作和使用高效的事件处理\n- 缓存已经访问过的元素；\n- 使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；\n- 操作 className，而不是多次读写 style；\n- 避免使用 JavaScript 修复布局；\n- 减少绑定事件监听的节点，如通过事件委托（当然现在浏览器功能强大，影响不大）；\n- 尽早处理事件，在 DOMContentLoaded 即可进行，不用等到 load 以后。\n\n#### 4.6 图片优化\n如何将图片变得又小又好看是一个工程师实力的体现，这里不过多赘述，大家可以查看我后文提供的资源。\n#### 4.7 使用 CND\n&gt;内容分发网络（Content delivery network 或 Content distribution network）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n\n动态 CDN，使用离你最近的服务器；CDN 没有 Cookie，使用 CDN 可以减少 Cookie；CND 会自动合并脚本文件等，减少请求数量；当然，使用 CND 同时也增加了一个域名，增大了同时请求数量。\n# 总结\n![](https://upload-images.jianshu.io/upload_images/7094266-2696c8f1d212f5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n该文大量参考了雅虎 35 军规，增加了一些自己的理解并舍弃了一些已经过时的内容。细节内容比较少，主要是笼统地将 Web 性能优化的思路做了梳理，很多内容都值得我们去深入研究。当然其中部分内容顺序还是不佳，因为很多内容事实上是贯穿在整个过程当中的，正如 Web 性能优化是个整体，需要权衡所有冲突。希望本文可以给你一些在面试官问道你时的思路。\n深入阅读 [从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！](https://zhuanlan.zhihu.com/p/34453198)\n\n本文参考：\n[前端性能优化之雅虎35条军规](https://juejin.im/post/5b73ef38f265da281e048e51)\n[前端经典面试题: 从输入URL到页面加载发生了什么？](https://segmentfault.com/a/1190000006879700)\nMDN\n维基百科\n","slug":"从「从输入URL到页面加载」谈及Web性能优化","published":1,"updated":"2019-01-18T14:28:33.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr259sae0000i499cg7w8uq4","content":"<h1 id=\"如何理解-Web-性能优化\"><a href=\"#如何理解-Web-性能优化\" class=\"headerlink\" title=\"如何理解 Web 性能优化\"></a>如何理解 Web 性能优化</h1><p>事实上就是用户觉得页面加载很快，用户从输入URL（网址）到页面在浏览器上加载出来的时间很短；与之相对的有如服务器性能优化（如网页占的 CPU 少），一定要区分开来。<br>对于用户众多的网站，节约下的加载时间或能带来可观的收入，这便是前端 Web 性能优化的意义。</p>\n<h1 id=\"从输入-URL-到页面加载发生了什么\"><a href=\"#从输入-URL-到页面加载发生了什么\" class=\"headerlink\" title=\"从输入 URL 到页面加载发生了什么\"></a>从输入 URL 到页面加载发生了什么</h1><p>一道所有前端耳熟能详的经典面试题，也确实是需要前端去深入研究的东西。下面我会简单介绍其过程，并罗列相关的 Web 优化方案。</p>\n<h2 id=\"0-缓存\"><a href=\"#0-缓存\" class=\"headerlink\" title=\"0. 缓存\"></a>0. 缓存</h2><p>当我们在浏览器上输入网址，浏览器首先会查看是否有缓存，如果之前已经访问过该网站，则会有缓存，那浏览器就不必再向服务器发请求了，用户则能够很快得看到内容。Web 性能优化有极大一部分都是优化缓存，缓存事实上又分为数据库缓存、代理服务器缓存、还有我们熟悉的 CDN 缓存，以及浏览器缓存等，部分内容后文介绍。</p>\n<h2 id=\"1-DNS-查询\"><a href=\"#1-DNS-查询\" class=\"headerlink\" title=\"1. DNS 查询\"></a>1. DNS 查询</h2><p>DNS 查询就像电话簿，你在浏览器地址栏输入网址，通过 DNS 查询得到域名的真实 IP。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d21c9b5e4b39ad6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>DNS查询完成之前，浏览器无法从服务器下载任何数据。</p>\n<h3 id=\"优化方案：减少-DNS-查询\"><a href=\"#优化方案：减少-DNS-查询\" class=\"headerlink\" title=\"优化方案：减少 DNS 查询\"></a>优化方案：减少 DNS 查询</h3><h4 id=\"1-1-DNS-缓存\"><a href=\"#1-1-DNS-缓存\" class=\"headerlink\" title=\"1.1 DNS 缓存\"></a>1.1 DNS 缓存</h4><p>ISP、局域网、操作系统、浏览器等都会有相应的DNS缓存机制。</p>\n<h4 id=\"1-2-减少页面的唯一域名\"><a href=\"#1-2-减少页面的唯一域名\" class=\"headerlink\" title=\"1.2 减少页面的唯一域名\"></a>1.2 减少页面的唯一域名</h4><p>因为每次 DNS 查询就是查找唯一域名的过程，那么域名越少，DNS 查询就越少，应该尽量将资源放在同一域名。当然这样做又有其他问题，下文详解。</p>\n<h2 id=\"2-TCP-连接\"><a href=\"#2-TCP-连接\" class=\"headerlink\" title=\"2. TCP 连接\"></a>2. TCP 连接</h2><p>经典的三次握手和四次挥手，不展开赘述。<br>简单讲讲优化方案：TCP 连接复用（TCP Connection Reuse），在 HTTP 请求头中的 Connection 上加 keep-alive；HTTP/2.0 多路复用等。</p>\n<h2 id=\"3-HTTP-请求及响应\"><a href=\"#3-HTTP-请求及响应\" class=\"headerlink\" title=\"3. HTTP 请求及响应\"></a>3. HTTP 请求及响应</h2><p>直接讲优化策略</p>\n<h4 id=\"3-1-避免不必要的重定向\"><a href=\"#3-1-避免不必要的重定向\" class=\"headerlink\" title=\"3.1 避免不必要的重定向\"></a>3.1 避免不必要的重定向</h4><p>&gt; 最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加/但未添加。比如，访问<a href=\"http://astrology.yahoo.com/astrology将被301重定向到\" target=\"_blank\" rel=\"noopener\">http://astrology.yahoo.com/astrology将被301重定向到</a> <a href=\"http://astrology.yahoo.com/astrology/（注意末尾的\" target=\"_blank\" rel=\"noopener\">http://astrology.yahoo.com/astrology/（注意末尾的</a> /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。</p>\n<h4 id=\"3-2-Cookie\"><a href=\"#3-2-Cookie\" class=\"headerlink\" title=\"3.2 Cookie\"></a>3.2 Cookie</h4><h5 id=\"3-2-1减少-Cookie-大小\"><a href=\"#3-2-1减少-Cookie-大小\" class=\"headerlink\" title=\"3.2.1减少 Cookie 大小\"></a>3.2.1减少 Cookie 大小</h5><p>每次请求都会带上对应的 Cookie，减少 Cookie 大小可以降低其对响应速度的影响：</p>\n<ul>\n<li>去除不必要的 Cookie；</li>\n<li>尽量压缩 Cookie 大小；</li>\n<li>注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；</li>\n<li>设置合适的过期时间。</li>\n</ul>\n<h5 id=\"3-2-2-静态资源使用无-Cookie-域名\"><a href=\"#3-2-2-静态资源使用无-Cookie-域名\" class=\"headerlink\" title=\"3.2.2 静态资源使用无 Cookie 域名\"></a>3.2.2 静态资源使用无 Cookie 域名</h5><p>静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。</p>\n<h4 id=\"3-3-添加-Expires-或-Cache-Control-响应头\"><a href=\"#3-3-添加-Expires-或-Cache-Control-响应头\" class=\"headerlink\" title=\"3.3 添加 Expires 或 Cache-Control 响应头\"></a>3.3 添加 Expires 或 Cache-Control 响应头</h4><p>HTTP/1.1 增加的 Cache-Control，它比 Expires 等好在其设定时间是相对的，避免了用户本地设置时间落后所造成的无法良好缓存的问题等。</p>\n<ul>\n<li>静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；</li>\n<li>动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。</li>\n</ul>\n<h4 id=\"3-4-配置-Etag\"><a href=\"#3-4-配置-Etag\" class=\"headerlink\" title=\"3.4 配置 Etag\"></a>3.4 配置 Etag</h4><p>通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。</p>\n<h4 id=\"3-5-使用-Gzip\"><a href=\"#3-5-使用-Gzip\" class=\"headerlink\" title=\"3.5 使用 Gzip\"></a>3.5 使用 Gzip</h4><p>使用 Gzip 就是将 HTML、CSS、JS、XML、JSON 等资源进行 Gzip 高效压缩，减少资源体积那么下载就会更快。<br>Gzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，比 Deflate 更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持 Gzip 解码。<br>从HTTP/1.1开始，客户端就有了支持压缩的 Accept-Encoding HTTP 请求头。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure></p>\n<p>服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过 Content-Encoding 响应头来通知客户端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Encoding: gzip</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，已经压缩过的内容如图片和PDF不要使用 Gzip，另外还有文件内容本身就很小，这些资源再使用 Gzip 反而会增加资源下载时间，浪费 CPU 资源，而且还可能增加文件体积。</p>\n<h3 id=\"值得一提\"><a href=\"#值得一提\" class=\"headerlink\" title=\"值得一提\"></a>值得一提</h3><p>HTTP 请求的另一个优化方案是增加同时请求的数量，浏览器会同时发送多个请求，但是同一域名最多同时发送 4~8 个（不同浏览器不同）请求，那么当资源过多时，可以采用增加域名的方法增加并发量。当然这一方法又与上述 DNS 查询的优化方案矛盾，真正使用的时候就需要权衡。<br>另外，既然一次只能发的请求有限，就应该将重要的需要优先展示的资源先请求：</p>\n<h4 id=\"3-6-延迟加载（懒加载）\"><a href=\"#3-6-延迟加载（懒加载）\" class=\"headerlink\" title=\"3.6 延迟加载（懒加载）\"></a>3.6 延迟加载（懒加载）</h4><p>页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：</p>\n<ul>\n<li>非首屏使用的数据、样式、脚本、图片等；</li>\n<li>用户交互时才会显示的内容。</li>\n</ul>\n<p>遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。<br>&gt;将首屏以外的HTML放在不渲染的元素中，如隐藏的&lt;textarea&gt;，或者type属性为非执行脚本的 &lt;script&gt; 标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。</p>\n<h4 id=\"3-7-预加载\"><a href=\"#3-7-预加载\" class=\"headerlink\" title=\"3.7 预加载\"></a>3.7 预加载</h4><p>预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</p>\n<h2 id=\"4-浏览器解析渲染页面\"><a href=\"#4-浏览器解析渲染页面\" class=\"headerlink\" title=\"4. 浏览器解析渲染页面\"></a>4. 浏览器解析渲染页面</h2><p>响应完成后，浏览器下载完资源，就开始解析资源生成页面了。对于前端来说，这部分内容是完全需要我们去掌控的，我们也来简单介绍一下对应的优化内容，部分内容如懒加载等上面已经提及就不再重复。</p>\n<h4 id=\"4-1-写对文档类型声明-lt-DOCTYPE-html-gt\"><a href=\"#4-1-写对文档类型声明-lt-DOCTYPE-html-gt\" class=\"headerlink\" title=\"4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;\"></a>4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;</h4><p>&gt;这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode\" target=\"_blank\" rel=\"noopener\">怪异模式(兼容模式)</a>”的渲染模式。“<code>&amp;lt;!DOCTYPE html&amp;gt;</code>“ 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。</p>\n<p>不写或写错文档类型声明，会浪费浏览器渲染页面的时间或引起错误排版。</p>\n<h4 id=\"4-2-CSS-放在-lt-head-gt-中\"><a href=\"#4-2-CSS-放在-lt-head-gt-中\" class=\"headerlink\" title=\"4.2 CSS 放在 &lt;head&gt; 中\"></a>4.2 CSS 放在 &lt;head&gt; 中</h4><p>把样式表放在 &lt;head&gt; 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。<br>这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。<br>如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。</p>\n<h4 id=\"4-2-把脚本放在页面底部\"><a href=\"#4-2-把脚本放在页面底部\" class=\"headerlink\" title=\"4.2 把脚本放在页面底部\"></a>4.2 把脚本放在页面底部</h4><p>浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源，并且，没有 js 并不邮箱呈现在用户目前的内容的观感。因此，最好将脚本放在底部，以提高页面加载速度。<br>一些特殊场景无法将脚本放到页面底部的，可以考虑&lt;script&gt;的以下属性：</p>\n<ul>\n<li>defer 属性；</li>\n<li>HTML5 新增的async属性。</li>\n</ul>\n<h4 id=\"4-3-使用外部-JavaScript-和-CSS\"><a href=\"#4-3-使用外部-JavaScript-和-CSS\" class=\"headerlink\" title=\"4.3 使用外部 JavaScript 和 CSS\"></a>4.3 使用外部 JavaScript 和 CSS</h4><p>外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。<br>当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。</p>\n<h4 id=\"4-4-合并和压缩-JS-CSS-等文件\"><a href=\"#4-4-合并和压缩-JS-CSS-等文件\" class=\"headerlink\" title=\"4.4 合并和压缩 JS/CSS 等文件\"></a>4.4 合并和压缩 JS/CSS 等文件</h4><p>通过该方法减少页面所需资源，减少请求数量，加快响应时间。现在 webpack 打包工具都已经默认实现了。</p>\n<h4 id=\"4-5-减少-DOM-操作和使用高效的事件处理\"><a href=\"#4-5-减少-DOM-操作和使用高效的事件处理\" class=\"headerlink\" title=\"4.5 减少 DOM 操作和使用高效的事件处理\"></a>4.5 减少 DOM 操作和使用高效的事件处理</h4><ul>\n<li>缓存已经访问过的元素；</li>\n<li>使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；</li>\n<li>操作 className，而不是多次读写 style；</li>\n<li>避免使用 JavaScript 修复布局；</li>\n<li>减少绑定事件监听的节点，如通过事件委托（当然现在浏览器功能强大，影响不大）；</li>\n<li>尽早处理事件，在 DOMContentLoaded 即可进行，不用等到 load 以后。</li>\n</ul>\n<h4 id=\"4-6-图片优化\"><a href=\"#4-6-图片优化\" class=\"headerlink\" title=\"4.6 图片优化\"></a>4.6 图片优化</h4><p>如何将图片变得又小又好看是一个工程师实力的体现，这里不过多赘述，大家可以查看我后文提供的资源。</p>\n<h4 id=\"4-7-使用-CND\"><a href=\"#4-7-使用-CND\" class=\"headerlink\" title=\"4.7 使用 CND\"></a>4.7 使用 CND</h4><p>&gt;内容分发网络（Content delivery network 或 Content distribution network）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n<p>动态 CDN，使用离你最近的服务器；CDN 没有 Cookie，使用 CDN 可以减少 Cookie；CND 会自动合并脚本文件等，减少请求数量；当然，使用 CND 同时也增加了一个域名，增大了同时请求数量。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-2696c8f1d212f5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>该文大量参考了雅虎 35 军规，增加了一些自己的理解并舍弃了一些已经过时的内容。细节内容比较少，主要是笼统地将 Web 性能优化的思路做了梳理，很多内容都值得我们去深入研究。当然其中部分内容顺序还是不佳，因为很多内容事实上是贯穿在整个过程当中的，正如 Web 性能优化是个整体，需要权衡所有冲突。希望本文可以给你一些在面试官问道你时的思路。<br>深入阅读 <a href=\"https://zhuanlan.zhihu.com/p/34453198\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！</a></p>\n<p>本文参考：<br><a href=\"https://juejin.im/post/5b73ef38f265da281e048e51\" target=\"_blank\" rel=\"noopener\">前端性能优化之雅虎35条军规</a><br><a href=\"https://segmentfault.com/a/1190000006879700\" target=\"_blank\" rel=\"noopener\">前端经典面试题: 从输入URL到页面加载发生了什么？</a><br>MDN<br>维基百科</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何理解-Web-性能优化\"><a href=\"#如何理解-Web-性能优化\" class=\"headerlink\" title=\"如何理解 Web 性能优化\"></a>如何理解 Web 性能优化</h1><p>事实上就是用户觉得页面加载很快，用户从输入URL（网址）到页面在浏览器上加载出来的时间很短；与之相对的有如服务器性能优化（如网页占的 CPU 少），一定要区分开来。<br>对于用户众多的网站，节约下的加载时间或能带来可观的收入，这便是前端 Web 性能优化的意义。</p>\n<h1 id=\"从输入-URL-到页面加载发生了什么\"><a href=\"#从输入-URL-到页面加载发生了什么\" class=\"headerlink\" title=\"从输入 URL 到页面加载发生了什么\"></a>从输入 URL 到页面加载发生了什么</h1><p>一道所有前端耳熟能详的经典面试题，也确实是需要前端去深入研究的东西。下面我会简单介绍其过程，并罗列相关的 Web 优化方案。</p>\n<h2 id=\"0-缓存\"><a href=\"#0-缓存\" class=\"headerlink\" title=\"0. 缓存\"></a>0. 缓存</h2><p>当我们在浏览器上输入网址，浏览器首先会查看是否有缓存，如果之前已经访问过该网站，则会有缓存，那浏览器就不必再向服务器发请求了，用户则能够很快得看到内容。Web 性能优化有极大一部分都是优化缓存，缓存事实上又分为数据库缓存、代理服务器缓存、还有我们熟悉的 CDN 缓存，以及浏览器缓存等，部分内容后文介绍。</p>\n<h2 id=\"1-DNS-查询\"><a href=\"#1-DNS-查询\" class=\"headerlink\" title=\"1. DNS 查询\"></a>1. DNS 查询</h2><p>DNS 查询就像电话簿，你在浏览器地址栏输入网址，通过 DNS 查询得到域名的真实 IP。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d21c9b5e4b39ad6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>DNS查询完成之前，浏览器无法从服务器下载任何数据。</p>\n<h3 id=\"优化方案：减少-DNS-查询\"><a href=\"#优化方案：减少-DNS-查询\" class=\"headerlink\" title=\"优化方案：减少 DNS 查询\"></a>优化方案：减少 DNS 查询</h3><h4 id=\"1-1-DNS-缓存\"><a href=\"#1-1-DNS-缓存\" class=\"headerlink\" title=\"1.1 DNS 缓存\"></a>1.1 DNS 缓存</h4><p>ISP、局域网、操作系统、浏览器等都会有相应的DNS缓存机制。</p>\n<h4 id=\"1-2-减少页面的唯一域名\"><a href=\"#1-2-减少页面的唯一域名\" class=\"headerlink\" title=\"1.2 减少页面的唯一域名\"></a>1.2 减少页面的唯一域名</h4><p>因为每次 DNS 查询就是查找唯一域名的过程，那么域名越少，DNS 查询就越少，应该尽量将资源放在同一域名。当然这样做又有其他问题，下文详解。</p>\n<h2 id=\"2-TCP-连接\"><a href=\"#2-TCP-连接\" class=\"headerlink\" title=\"2. TCP 连接\"></a>2. TCP 连接</h2><p>经典的三次握手和四次挥手，不展开赘述。<br>简单讲讲优化方案：TCP 连接复用（TCP Connection Reuse），在 HTTP 请求头中的 Connection 上加 keep-alive；HTTP/2.0 多路复用等。</p>\n<h2 id=\"3-HTTP-请求及响应\"><a href=\"#3-HTTP-请求及响应\" class=\"headerlink\" title=\"3. HTTP 请求及响应\"></a>3. HTTP 请求及响应</h2><p>直接讲优化策略</p>\n<h4 id=\"3-1-避免不必要的重定向\"><a href=\"#3-1-避免不必要的重定向\" class=\"headerlink\" title=\"3.1 避免不必要的重定向\"></a>3.1 避免不必要的重定向</h4><p>&gt; 最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加/但未添加。比如，访问<a href=\"http://astrology.yahoo.com/astrology将被301重定向到\" target=\"_blank\" rel=\"noopener\">http://astrology.yahoo.com/astrology将被301重定向到</a> <a href=\"http://astrology.yahoo.com/astrology/（注意末尾的\" target=\"_blank\" rel=\"noopener\">http://astrology.yahoo.com/astrology/（注意末尾的</a> /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。</p>\n<h4 id=\"3-2-Cookie\"><a href=\"#3-2-Cookie\" class=\"headerlink\" title=\"3.2 Cookie\"></a>3.2 Cookie</h4><h5 id=\"3-2-1减少-Cookie-大小\"><a href=\"#3-2-1减少-Cookie-大小\" class=\"headerlink\" title=\"3.2.1减少 Cookie 大小\"></a>3.2.1减少 Cookie 大小</h5><p>每次请求都会带上对应的 Cookie，减少 Cookie 大小可以降低其对响应速度的影响：</p>\n<ul>\n<li>去除不必要的 Cookie；</li>\n<li>尽量压缩 Cookie 大小；</li>\n<li>注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；</li>\n<li>设置合适的过期时间。</li>\n</ul>\n<h5 id=\"3-2-2-静态资源使用无-Cookie-域名\"><a href=\"#3-2-2-静态资源使用无-Cookie-域名\" class=\"headerlink\" title=\"3.2.2 静态资源使用无 Cookie 域名\"></a>3.2.2 静态资源使用无 Cookie 域名</h5><p>静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。</p>\n<h4 id=\"3-3-添加-Expires-或-Cache-Control-响应头\"><a href=\"#3-3-添加-Expires-或-Cache-Control-响应头\" class=\"headerlink\" title=\"3.3 添加 Expires 或 Cache-Control 响应头\"></a>3.3 添加 Expires 或 Cache-Control 响应头</h4><p>HTTP/1.1 增加的 Cache-Control，它比 Expires 等好在其设定时间是相对的，避免了用户本地设置时间落后所造成的无法良好缓存的问题等。</p>\n<ul>\n<li>静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；</li>\n<li>动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。</li>\n</ul>\n<h4 id=\"3-4-配置-Etag\"><a href=\"#3-4-配置-Etag\" class=\"headerlink\" title=\"3.4 配置 Etag\"></a>3.4 配置 Etag</h4><p>通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。</p>\n<h4 id=\"3-5-使用-Gzip\"><a href=\"#3-5-使用-Gzip\" class=\"headerlink\" title=\"3.5 使用 Gzip\"></a>3.5 使用 Gzip</h4><p>使用 Gzip 就是将 HTML、CSS、JS、XML、JSON 等资源进行 Gzip 高效压缩，减少资源体积那么下载就会更快。<br>Gzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，比 Deflate 更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持 Gzip 解码。<br>从HTTP/1.1开始，客户端就有了支持压缩的 Accept-Encoding HTTP 请求头。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure></p>\n<p>服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过 Content-Encoding 响应头来通知客户端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Encoding: gzip</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，已经压缩过的内容如图片和PDF不要使用 Gzip，另外还有文件内容本身就很小，这些资源再使用 Gzip 反而会增加资源下载时间，浪费 CPU 资源，而且还可能增加文件体积。</p>\n<h3 id=\"值得一提\"><a href=\"#值得一提\" class=\"headerlink\" title=\"值得一提\"></a>值得一提</h3><p>HTTP 请求的另一个优化方案是增加同时请求的数量，浏览器会同时发送多个请求，但是同一域名最多同时发送 4~8 个（不同浏览器不同）请求，那么当资源过多时，可以采用增加域名的方法增加并发量。当然这一方法又与上述 DNS 查询的优化方案矛盾，真正使用的时候就需要权衡。<br>另外，既然一次只能发的请求有限，就应该将重要的需要优先展示的资源先请求：</p>\n<h4 id=\"3-6-延迟加载（懒加载）\"><a href=\"#3-6-延迟加载（懒加载）\" class=\"headerlink\" title=\"3.6 延迟加载（懒加载）\"></a>3.6 延迟加载（懒加载）</h4><p>页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：</p>\n<ul>\n<li>非首屏使用的数据、样式、脚本、图片等；</li>\n<li>用户交互时才会显示的内容。</li>\n</ul>\n<p>遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。<br>&gt;将首屏以外的HTML放在不渲染的元素中，如隐藏的&lt;textarea&gt;，或者type属性为非执行脚本的 &lt;script&gt; 标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。</p>\n<h4 id=\"3-7-预加载\"><a href=\"#3-7-预加载\" class=\"headerlink\" title=\"3.7 预加载\"></a>3.7 预加载</h4><p>预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</p>\n<h2 id=\"4-浏览器解析渲染页面\"><a href=\"#4-浏览器解析渲染页面\" class=\"headerlink\" title=\"4. 浏览器解析渲染页面\"></a>4. 浏览器解析渲染页面</h2><p>响应完成后，浏览器下载完资源，就开始解析资源生成页面了。对于前端来说，这部分内容是完全需要我们去掌控的，我们也来简单介绍一下对应的优化内容，部分内容如懒加载等上面已经提及就不再重复。</p>\n<h4 id=\"4-1-写对文档类型声明-lt-DOCTYPE-html-gt\"><a href=\"#4-1-写对文档类型声明-lt-DOCTYPE-html-gt\" class=\"headerlink\" title=\"4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;\"></a>4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;</h4><p>&gt;这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode\" target=\"_blank\" rel=\"noopener\">怪异模式(兼容模式)</a>”的渲染模式。“<code>&amp;lt;!DOCTYPE html&amp;gt;</code>“ 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。</p>\n<p>不写或写错文档类型声明，会浪费浏览器渲染页面的时间或引起错误排版。</p>\n<h4 id=\"4-2-CSS-放在-lt-head-gt-中\"><a href=\"#4-2-CSS-放在-lt-head-gt-中\" class=\"headerlink\" title=\"4.2 CSS 放在 &lt;head&gt; 中\"></a>4.2 CSS 放在 &lt;head&gt; 中</h4><p>把样式表放在 &lt;head&gt; 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。<br>这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。<br>如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。</p>\n<h4 id=\"4-2-把脚本放在页面底部\"><a href=\"#4-2-把脚本放在页面底部\" class=\"headerlink\" title=\"4.2 把脚本放在页面底部\"></a>4.2 把脚本放在页面底部</h4><p>浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源，并且，没有 js 并不邮箱呈现在用户目前的内容的观感。因此，最好将脚本放在底部，以提高页面加载速度。<br>一些特殊场景无法将脚本放到页面底部的，可以考虑&lt;script&gt;的以下属性：</p>\n<ul>\n<li>defer 属性；</li>\n<li>HTML5 新增的async属性。</li>\n</ul>\n<h4 id=\"4-3-使用外部-JavaScript-和-CSS\"><a href=\"#4-3-使用外部-JavaScript-和-CSS\" class=\"headerlink\" title=\"4.3 使用外部 JavaScript 和 CSS\"></a>4.3 使用外部 JavaScript 和 CSS</h4><p>外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。<br>当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。</p>\n<h4 id=\"4-4-合并和压缩-JS-CSS-等文件\"><a href=\"#4-4-合并和压缩-JS-CSS-等文件\" class=\"headerlink\" title=\"4.4 合并和压缩 JS/CSS 等文件\"></a>4.4 合并和压缩 JS/CSS 等文件</h4><p>通过该方法减少页面所需资源，减少请求数量，加快响应时间。现在 webpack 打包工具都已经默认实现了。</p>\n<h4 id=\"4-5-减少-DOM-操作和使用高效的事件处理\"><a href=\"#4-5-减少-DOM-操作和使用高效的事件处理\" class=\"headerlink\" title=\"4.5 减少 DOM 操作和使用高效的事件处理\"></a>4.5 减少 DOM 操作和使用高效的事件处理</h4><ul>\n<li>缓存已经访问过的元素；</li>\n<li>使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；</li>\n<li>操作 className，而不是多次读写 style；</li>\n<li>避免使用 JavaScript 修复布局；</li>\n<li>减少绑定事件监听的节点，如通过事件委托（当然现在浏览器功能强大，影响不大）；</li>\n<li>尽早处理事件，在 DOMContentLoaded 即可进行，不用等到 load 以后。</li>\n</ul>\n<h4 id=\"4-6-图片优化\"><a href=\"#4-6-图片优化\" class=\"headerlink\" title=\"4.6 图片优化\"></a>4.6 图片优化</h4><p>如何将图片变得又小又好看是一个工程师实力的体现，这里不过多赘述，大家可以查看我后文提供的资源。</p>\n<h4 id=\"4-7-使用-CND\"><a href=\"#4-7-使用-CND\" class=\"headerlink\" title=\"4.7 使用 CND\"></a>4.7 使用 CND</h4><p>&gt;内容分发网络（Content delivery network 或 Content distribution network）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n<p>动态 CDN，使用离你最近的服务器；CDN 没有 Cookie，使用 CDN 可以减少 Cookie；CND 会自动合并脚本文件等，减少请求数量；当然，使用 CND 同时也增加了一个域名，增大了同时请求数量。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-2696c8f1d212f5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>该文大量参考了雅虎 35 军规，增加了一些自己的理解并舍弃了一些已经过时的内容。细节内容比较少，主要是笼统地将 Web 性能优化的思路做了梳理，很多内容都值得我们去深入研究。当然其中部分内容顺序还是不佳，因为很多内容事实上是贯穿在整个过程当中的，正如 Web 性能优化是个整体，需要权衡所有冲突。希望本文可以给你一些在面试官问道你时的思路。<br>深入阅读 <a href=\"https://zhuanlan.zhihu.com/p/34453198\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！</a></p>\n<p>本文参考：<br><a href=\"https://juejin.im/post/5b73ef38f265da281e048e51\" target=\"_blank\" rel=\"noopener\">前端性能优化之雅虎35条军规</a><br><a href=\"https://segmentfault.com/a/1190000006879700\" target=\"_blank\" rel=\"noopener\">前端经典面试题: 从输入URL到页面加载发生了什么？</a><br>MDN<br>维基百科</p>\n"},{"title":"优先级 和 CSS 预处理","date":"2018-12-20T14:30:16.000Z","_content":"## 前言扯淡\n前两天电话面试，被问道了一些 CSS 的基础问题，虽然答上来了，但是不够全面，而且给自己最大的感受是自己对一些概念十分模棱两可，最直观的体现是有时候知道这个概念，却不知道他叫什么。自以为懂，最为致命。\n需求是最好的学习API的方式，面试找工作是最好的学习沉淀的过程。快俩个月没写博客了，终于今天在回顾时有一点点小的感悟，打算记录下来，主要是给自己看。废话不多说，开始正文。\n## 首先是 [优先级](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity)\n链接是文档，优先级主要是指CSS属性的优先级。\n>浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。\n\n简单来说，当你给一个元素声明（或该元素继承而来）多个相同属性时（前提），浏览器选择哪一个作为该元素的应用。\n```\n<div>\n  <h1 id=\"title\" class=\"title\" style=\"color: yellow;\">优先级</h1>\n</div>\n<!--优先级显示为 pink-->\n```\n```\n*{\n  color: red;\n}\n\nh1{\n  color: green;\n}\n\n.title{\n  color: blue;\n}\n\n#title{\n  color: black;\n}\n\nh1{\n  color: pink !important;\n}\n```\n#### 优先级如何确定：\n选择器优先级，下面三种优先级递增：（不细看文档都不知道这些平时在用的选择器的所有名称）\n1. **ID选择器**（例如, #title）\n2. **类选择器**（class selectors） (例如,.title)，**属性选择器**（attributes selectors）（例如, [type=\"radio\"]），**伪类**（pseudo-classes）（例如, :hover）\n3. **类型选择器**（type selectors）（例如, h1）和 **伪元素**（pseudo-elements）（例如, ::before）\n\n**通配选择符**（universal selector）(\\*), **关系选择符**（combinators） (+, >, ~, ' ')  和 **否定伪类**（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。\n给元素添加的**内联样式**  (例如, style=\"color: yellow;\") 总会覆盖外部样式表的任何样式 ，因此可看作是具有最高的优先级。\n**!important** 是例外，此声明将覆盖任何其他声明，技术上!important与优先级无关，但它与它直接相关。\n#### 如何利用优先级\n1. 选择器越具体，优先级越高。\n2. 相同优先级情况下，后面的样式覆盖前面的。\n3. !important 最特殊，有他的声明最优先，但应该避免使用。\n\n上面内容均来自 MDN，也就是我给的链接，还有很多如`无视DOM树中的距离`等没有记录。大家还是直接看MDN为宜。这些真的是简单的基础内容，但确实有很多细节，如果能够因为无意看到我的文章去看MDN文档而收获一些东西，便是此文的意义了。\n扩展阅读 [真正理解\"CSS选择器的优先级\"](https://github.com/jincdream/jincdream.github.io/issues/14)\n## CSS预处理（预编译）\n当面试关问我知不知道CSS预处理的时候，我一时并没有将其与平常再用的 LESS、SCSS 等预编译器对上。也就是我文章开头提到的，有时我们以为熟知的东西，事实上我们那么陌生。\n\n---\n(以下内容来自 [再谈 CSS 预处理器](http://efe.baidu.com/blog/revisiting-css-preprocessors/))\nCSS 预处理器是什么？一般来说，它们基于 CSS 扩展了一套属于自己的 DSL，来解决我们书写 CSS 时难以解决的问题：\n- 语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；\n- 没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。\n\n所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。\n\n---\n这篇文章不打算继续将 LESS、SASS 等的嵌套、变量等语法规则。一来这些内容非一篇文章讲得清（我懒），再者看官方文档是最好的入门方式，同时像上面百度EFE的文档比我写肯定高到不知道哪里去了。\n那么我为什么会将 CSS 预处理和 优先级 放在同一篇文章写呢。也是面试官连续问的这俩个问题（真的很基础了，对我这种转行前端新人十分照顾），再者其实两者有一些联系，CSS 预编译也是在变相解决 优先级 的问题，因为我们需要完美利用优先级，所以我们在写 CSS 时往往选择器需要十分详细，如下\n```\ndiv{}\ndiv>ul{}\ndiv>ul>li{}\ndiv>ul>li>a{}\n```\n本着 Dry 宗旨，CSS 预编译的嵌套规则就是为了解决优先级啊。\n\n---\n本文仅供个人学习使用","source":"_posts/优先级-和-CSS-预处理.md","raw":"---\ntitle: 优先级 和 CSS 预处理\ndate: 2018-12-20 22:30:16\ntags:\n---\n## 前言扯淡\n前两天电话面试，被问道了一些 CSS 的基础问题，虽然答上来了，但是不够全面，而且给自己最大的感受是自己对一些概念十分模棱两可，最直观的体现是有时候知道这个概念，却不知道他叫什么。自以为懂，最为致命。\n需求是最好的学习API的方式，面试找工作是最好的学习沉淀的过程。快俩个月没写博客了，终于今天在回顾时有一点点小的感悟，打算记录下来，主要是给自己看。废话不多说，开始正文。\n## 首先是 [优先级](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity)\n链接是文档，优先级主要是指CSS属性的优先级。\n>浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。\n\n简单来说，当你给一个元素声明（或该元素继承而来）多个相同属性时（前提），浏览器选择哪一个作为该元素的应用。\n```\n<div>\n  <h1 id=\"title\" class=\"title\" style=\"color: yellow;\">优先级</h1>\n</div>\n<!--优先级显示为 pink-->\n```\n```\n*{\n  color: red;\n}\n\nh1{\n  color: green;\n}\n\n.title{\n  color: blue;\n}\n\n#title{\n  color: black;\n}\n\nh1{\n  color: pink !important;\n}\n```\n#### 优先级如何确定：\n选择器优先级，下面三种优先级递增：（不细看文档都不知道这些平时在用的选择器的所有名称）\n1. **ID选择器**（例如, #title）\n2. **类选择器**（class selectors） (例如,.title)，**属性选择器**（attributes selectors）（例如, [type=\"radio\"]），**伪类**（pseudo-classes）（例如, :hover）\n3. **类型选择器**（type selectors）（例如, h1）和 **伪元素**（pseudo-elements）（例如, ::before）\n\n**通配选择符**（universal selector）(\\*), **关系选择符**（combinators） (+, >, ~, ' ')  和 **否定伪类**（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。\n给元素添加的**内联样式**  (例如, style=\"color: yellow;\") 总会覆盖外部样式表的任何样式 ，因此可看作是具有最高的优先级。\n**!important** 是例外，此声明将覆盖任何其他声明，技术上!important与优先级无关，但它与它直接相关。\n#### 如何利用优先级\n1. 选择器越具体，优先级越高。\n2. 相同优先级情况下，后面的样式覆盖前面的。\n3. !important 最特殊，有他的声明最优先，但应该避免使用。\n\n上面内容均来自 MDN，也就是我给的链接，还有很多如`无视DOM树中的距离`等没有记录。大家还是直接看MDN为宜。这些真的是简单的基础内容，但确实有很多细节，如果能够因为无意看到我的文章去看MDN文档而收获一些东西，便是此文的意义了。\n扩展阅读 [真正理解\"CSS选择器的优先级\"](https://github.com/jincdream/jincdream.github.io/issues/14)\n## CSS预处理（预编译）\n当面试关问我知不知道CSS预处理的时候，我一时并没有将其与平常再用的 LESS、SCSS 等预编译器对上。也就是我文章开头提到的，有时我们以为熟知的东西，事实上我们那么陌生。\n\n---\n(以下内容来自 [再谈 CSS 预处理器](http://efe.baidu.com/blog/revisiting-css-preprocessors/))\nCSS 预处理器是什么？一般来说，它们基于 CSS 扩展了一套属于自己的 DSL，来解决我们书写 CSS 时难以解决的问题：\n- 语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；\n- 没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。\n\n所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。\n\n---\n这篇文章不打算继续将 LESS、SASS 等的嵌套、变量等语法规则。一来这些内容非一篇文章讲得清（我懒），再者看官方文档是最好的入门方式，同时像上面百度EFE的文档比我写肯定高到不知道哪里去了。\n那么我为什么会将 CSS 预处理和 优先级 放在同一篇文章写呢。也是面试官连续问的这俩个问题（真的很基础了，对我这种转行前端新人十分照顾），再者其实两者有一些联系，CSS 预编译也是在变相解决 优先级 的问题，因为我们需要完美利用优先级，所以我们在写 CSS 时往往选择器需要十分详细，如下\n```\ndiv{}\ndiv>ul{}\ndiv>ul>li{}\ndiv>ul>li>a{}\n```\n本着 Dry 宗旨，CSS 预编译的嵌套规则就是为了解决优先级啊。\n\n---\n本文仅供个人学习使用","slug":"优先级-和-CSS-预处理","published":1,"updated":"2019-01-18T14:32:19.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr259saj0001i4993jjppvud","content":"<h2 id=\"前言扯淡\"><a href=\"#前言扯淡\" class=\"headerlink\" title=\"前言扯淡\"></a>前言扯淡</h2><p>前两天电话面试，被问道了一些 CSS 的基础问题，虽然答上来了，但是不够全面，而且给自己最大的感受是自己对一些概念十分模棱两可，最直观的体现是有时候知道这个概念，却不知道他叫什么。自以为懂，最为致命。<br>需求是最好的学习API的方式，面试找工作是最好的学习沉淀的过程。快俩个月没写博客了，终于今天在回顾时有一点点小的感悟，打算记录下来，主要是给自己看。废话不多说，开始正文。</p>\n<h2 id=\"首先是-优先级\"><a href=\"#首先是-优先级\" class=\"headerlink\" title=\"首先是 优先级\"></a>首先是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\" target=\"_blank\" rel=\"noopener\">优先级</a></h2><p>链接是文档，优先级主要是指CSS属性的优先级。</p>\n<blockquote>\n<p>浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。</p>\n</blockquote>\n<p>简单来说，当你给一个元素声明（或该元素继承而来）多个相同属性时（前提），浏览器选择哪一个作为该元素的应用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1 id=&quot;title&quot; class=&quot;title&quot; style=&quot;color: yellow;&quot;&gt;优先级&lt;/h1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!--优先级显示为 pink--&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1&#123;</span><br><span class=\"line\">  color: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.title&#123;</span><br><span class=\"line\">  color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#title&#123;</span><br><span class=\"line\">  color: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1&#123;</span><br><span class=\"line\">  color: pink !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"优先级如何确定：\"><a href=\"#优先级如何确定：\" class=\"headerlink\" title=\"优先级如何确定：\"></a>优先级如何确定：</h4><p>选择器优先级，下面三种优先级递增：（不细看文档都不知道这些平时在用的选择器的所有名称）</p>\n<ol>\n<li><strong>ID选择器</strong>（例如, #title）</li>\n<li><strong>类选择器</strong>（class selectors） (例如,.title)，<strong>属性选择器</strong>（attributes selectors）（例如, [type=”radio”]），<strong>伪类</strong>（pseudo-classes）（例如, :hover）</li>\n<li><strong>类型选择器</strong>（type selectors）（例如, h1）和 <strong>伪元素</strong>（pseudo-elements）（例如, ::before）</li>\n</ol>\n<p><strong>通配选择符</strong>（universal selector）(*), <strong>关系选择符</strong>（combinators） (+, &gt;, ~, ‘ ‘)  和 <strong>否定伪类</strong>（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。<br>给元素添加的<strong>内联样式</strong>  (例如, style=”color: yellow;”) 总会覆盖外部样式表的任何样式 ，因此可看作是具有最高的优先级。<br><strong>!important</strong> 是例外，此声明将覆盖任何其他声明，技术上!important与优先级无关，但它与它直接相关。</p>\n<h4 id=\"如何利用优先级\"><a href=\"#如何利用优先级\" class=\"headerlink\" title=\"如何利用优先级\"></a>如何利用优先级</h4><ol>\n<li>选择器越具体，优先级越高。</li>\n<li>相同优先级情况下，后面的样式覆盖前面的。</li>\n<li>!important 最特殊，有他的声明最优先，但应该避免使用。</li>\n</ol>\n<p>上面内容均来自 MDN，也就是我给的链接，还有很多如<code>无视DOM树中的距离</code>等没有记录。大家还是直接看MDN为宜。这些真的是简单的基础内容，但确实有很多细节，如果能够因为无意看到我的文章去看MDN文档而收获一些东西，便是此文的意义了。<br>扩展阅读 <a href=\"https://github.com/jincdream/jincdream.github.io/issues/14\" target=\"_blank\" rel=\"noopener\">真正理解”CSS选择器的优先级”</a></p>\n<h2 id=\"CSS预处理（预编译）\"><a href=\"#CSS预处理（预编译）\" class=\"headerlink\" title=\"CSS预处理（预编译）\"></a>CSS预处理（预编译）</h2><p>当面试关问我知不知道CSS预处理的时候，我一时并没有将其与平常再用的 LESS、SCSS 等预编译器对上。也就是我文章开头提到的，有时我们以为熟知的东西，事实上我们那么陌生。</p>\n<hr>\n<p>(以下内容来自 <a href=\"http://efe.baidu.com/blog/revisiting-css-preprocessors/\" target=\"_blank\" rel=\"noopener\">再谈 CSS 预处理器</a>)<br>CSS 预处理器是什么？一般来说，它们基于 CSS 扩展了一套属于自己的 DSL，来解决我们书写 CSS 时难以解决的问题：</p>\n<ul>\n<li>语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；</li>\n<li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li>\n</ul>\n<p>所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。</p>\n<hr>\n<p>这篇文章不打算继续将 LESS、SASS 等的嵌套、变量等语法规则。一来这些内容非一篇文章讲得清（我懒），再者看官方文档是最好的入门方式，同时像上面百度EFE的文档比我写肯定高到不知道哪里去了。<br>那么我为什么会将 CSS 预处理和 优先级 放在同一篇文章写呢。也是面试官连续问的这俩个问题（真的很基础了，对我这种转行前端新人十分照顾），再者其实两者有一些联系，CSS 预编译也是在变相解决 优先级 的问题，因为我们需要完美利用优先级，所以我们在写 CSS 时往往选择器需要十分详细，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;&#125;</span><br><span class=\"line\">div&gt;ul&#123;&#125;</span><br><span class=\"line\">div&gt;ul&gt;li&#123;&#125;</span><br><span class=\"line\">div&gt;ul&gt;li&gt;a&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本着 Dry 宗旨，CSS 预编译的嵌套规则就是为了解决优先级啊。</p>\n<hr>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言扯淡\"><a href=\"#前言扯淡\" class=\"headerlink\" title=\"前言扯淡\"></a>前言扯淡</h2><p>前两天电话面试，被问道了一些 CSS 的基础问题，虽然答上来了，但是不够全面，而且给自己最大的感受是自己对一些概念十分模棱两可，最直观的体现是有时候知道这个概念，却不知道他叫什么。自以为懂，最为致命。<br>需求是最好的学习API的方式，面试找工作是最好的学习沉淀的过程。快俩个月没写博客了，终于今天在回顾时有一点点小的感悟，打算记录下来，主要是给自己看。废话不多说，开始正文。</p>\n<h2 id=\"首先是-优先级\"><a href=\"#首先是-优先级\" class=\"headerlink\" title=\"首先是 优先级\"></a>首先是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\" target=\"_blank\" rel=\"noopener\">优先级</a></h2><p>链接是文档，优先级主要是指CSS属性的优先级。</p>\n<blockquote>\n<p>浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。</p>\n</blockquote>\n<p>简单来说，当你给一个元素声明（或该元素继承而来）多个相同属性时（前提），浏览器选择哪一个作为该元素的应用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1 id=&quot;title&quot; class=&quot;title&quot; style=&quot;color: yellow;&quot;&gt;优先级&lt;/h1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!--优先级显示为 pink--&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1&#123;</span><br><span class=\"line\">  color: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.title&#123;</span><br><span class=\"line\">  color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#title&#123;</span><br><span class=\"line\">  color: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1&#123;</span><br><span class=\"line\">  color: pink !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"优先级如何确定：\"><a href=\"#优先级如何确定：\" class=\"headerlink\" title=\"优先级如何确定：\"></a>优先级如何确定：</h4><p>选择器优先级，下面三种优先级递增：（不细看文档都不知道这些平时在用的选择器的所有名称）</p>\n<ol>\n<li><strong>ID选择器</strong>（例如, #title）</li>\n<li><strong>类选择器</strong>（class selectors） (例如,.title)，<strong>属性选择器</strong>（attributes selectors）（例如, [type=”radio”]），<strong>伪类</strong>（pseudo-classes）（例如, :hover）</li>\n<li><strong>类型选择器</strong>（type selectors）（例如, h1）和 <strong>伪元素</strong>（pseudo-elements）（例如, ::before）</li>\n</ol>\n<p><strong>通配选择符</strong>（universal selector）(*), <strong>关系选择符</strong>（combinators） (+, &gt;, ~, ‘ ‘)  和 <strong>否定伪类</strong>（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。<br>给元素添加的<strong>内联样式</strong>  (例如, style=”color: yellow;”) 总会覆盖外部样式表的任何样式 ，因此可看作是具有最高的优先级。<br><strong>!important</strong> 是例外，此声明将覆盖任何其他声明，技术上!important与优先级无关，但它与它直接相关。</p>\n<h4 id=\"如何利用优先级\"><a href=\"#如何利用优先级\" class=\"headerlink\" title=\"如何利用优先级\"></a>如何利用优先级</h4><ol>\n<li>选择器越具体，优先级越高。</li>\n<li>相同优先级情况下，后面的样式覆盖前面的。</li>\n<li>!important 最特殊，有他的声明最优先，但应该避免使用。</li>\n</ol>\n<p>上面内容均来自 MDN，也就是我给的链接，还有很多如<code>无视DOM树中的距离</code>等没有记录。大家还是直接看MDN为宜。这些真的是简单的基础内容，但确实有很多细节，如果能够因为无意看到我的文章去看MDN文档而收获一些东西，便是此文的意义了。<br>扩展阅读 <a href=\"https://github.com/jincdream/jincdream.github.io/issues/14\" target=\"_blank\" rel=\"noopener\">真正理解”CSS选择器的优先级”</a></p>\n<h2 id=\"CSS预处理（预编译）\"><a href=\"#CSS预处理（预编译）\" class=\"headerlink\" title=\"CSS预处理（预编译）\"></a>CSS预处理（预编译）</h2><p>当面试关问我知不知道CSS预处理的时候，我一时并没有将其与平常再用的 LESS、SCSS 等预编译器对上。也就是我文章开头提到的，有时我们以为熟知的东西，事实上我们那么陌生。</p>\n<hr>\n<p>(以下内容来自 <a href=\"http://efe.baidu.com/blog/revisiting-css-preprocessors/\" target=\"_blank\" rel=\"noopener\">再谈 CSS 预处理器</a>)<br>CSS 预处理器是什么？一般来说，它们基于 CSS 扩展了一套属于自己的 DSL，来解决我们书写 CSS 时难以解决的问题：</p>\n<ul>\n<li>语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；</li>\n<li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li>\n</ul>\n<p>所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。</p>\n<hr>\n<p>这篇文章不打算继续将 LESS、SASS 等的嵌套、变量等语法规则。一来这些内容非一篇文章讲得清（我懒），再者看官方文档是最好的入门方式，同时像上面百度EFE的文档比我写肯定高到不知道哪里去了。<br>那么我为什么会将 CSS 预处理和 优先级 放在同一篇文章写呢。也是面试官连续问的这俩个问题（真的很基础了，对我这种转行前端新人十分照顾），再者其实两者有一些联系，CSS 预编译也是在变相解决 优先级 的问题，因为我们需要完美利用优先级，所以我们在写 CSS 时往往选择器需要十分详细，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;&#125;</span><br><span class=\"line\">div&gt;ul&#123;&#125;</span><br><span class=\"line\">div&gt;ul&gt;li&#123;&#125;</span><br><span class=\"line\">div&gt;ul&gt;li&gt;a&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本着 Dry 宗旨，CSS 预编译的嵌套规则就是为了解决优先级啊。</p>\n<hr>\n<p>本文仅供个人学习使用</p>\n"},{"title":"浅谈JS继承","date":"2018-11-02T12:38:27.000Z","_content":"# 什么是继承\n根据维基百科解释，可以简单概括为：\n继承是类与类之间的关系，其作用是使得子类具有父类别的各种属性和方法。\n# JS 里的原型继承模型\nJS：不好意思，我没有类。（即使是ES6中的类也是语法糖）\nJavaScript 是基于原型实现面向对象的，那么在JS中，面向对象概念中的继承自然也是基于原型。\n>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为[[prototype]]）指向它的原型对象（**prototype**）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 `null`。根据定义，`null` 没有原型，并作为这个**原型链**中的最后一个环节。\n\n>几乎所有 JavaScript 中的对象都是位于原型链顶端的 **Object** 的实例。\n\n有关原型之前写过博客[JavaScript原型和原型链](https://www.jianshu.com/p/93441c4e8f48)，对理解下面内容有帮助。\n虽然没有传统语言意义上的类，但是 JS语言 使用构造函数生成对象，实现面向对象程序设计。\n# 说了这么多，JS 中的继承到底是什么？\n**可以简单理解为：两次的原型搜索就是继承。\n数组 a 从 Array 中原型搜索到 toString 属性，只是实例属性；a 从 Array 中原型搜索到 （Array 从 Object 中原型搜索到的）valueOf 属性，可以称为继承。**\n\n接下来我们用代码实现一下继承\n## 1. 使用 prototype 实现继承\n**prototype 的作用：为构造函数内添加实例对象之间的共有属性**\n\n**明确 JS 内的继承**\n以下面代码为例\n```\n// 构造一个 人类\nfunction Human(name){\n  this.name = name\n}\n// 给所有 人类 添加一个 跑 的共有属性\nHuman.prototype.run = function(){\n  console.log(\"我叫\"+this.name+\"，我在跑\")\n  return undefined\n}\n// 构造一个 男人类\nfunction Man(name){\n  Human.call(this, name)\n  this.gender = '男'\n}\n// 所有 男人 都有好战属性\nMan.prototype.fight = function(){\n  console.log('糊你熊脸')\n}\n```\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c56b1f3dafb9ff8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到名为 ada 的人只有 name、gender 和fight 这些 Man 构造函数里面含有的属性，而没有我们希望的 Human 应该有的 run 的属性。\n**目标：假如我们有方法让 ada 有了 Man 里面没有的 run 属性，即我们自己实现了 Man 继承 Human 的过程。**\n根据我原型知识的博客里面的内容我们知道，我们可以直接：\n```\nMan.prototype.__proto__ = Human.prototype\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-3707e4361a656afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到 Man 指向了 Human 而不是直接指向 Object，ada2 继承了来自 Human 的 run 属性\n\n**但是在实际编程过程中直接操作 __ proto __ 这个非标准但许多浏览器（IE不支持）实现的属性是不规范的。**\n\n那怎么办？\nnew 可不可以？\n```\nMan.prototype = new Human()\n```\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4f15ba95a00b7a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**直接用上述代码不行，因为在 new 的过程中，虽然new 内部实现了 `Man.prototype.__proto__ = Human.prototype` 这一个过程，但是由于 new 同时会在内部执行构造函数，而在执行过程中我们未传 name，因此上图中 Human 的 name 属性显示 undefined**\n\n那么我们只要避免这个过程中 Human 执行就可以了\n```\nvar a = function(){}\na.prototype = Human.prototype\nMan.prototype = new a() \n```\n通过上面三行代码，即实现了没有内部执行空函数的 new\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c3c89ccc7f8d8aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 2. ES6 实现继承\n上面代码的 ES6 版本\n```\n// ES6 写法\nclass Human{\n     constructor(name){\n         this.name = name\n     }\n     run(){\n         console.log(\"我叫\"+this.name+\"，我在跑\")\n         return undefined\n     }\n }\n class Man extends Human{ // extends 实现上述继承过程\n     constructor(name){\n         super(name) // 调用构造函数:'超类'\n         this.gender = '男'\n     }\n     fight(){\n         console.log('糊你熊脸')\n     }\n }\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-f81f6522e88774a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文章开头已经提到， ES6 的 class 是语法糖，其实质就是函数，而上述用 class 实现继承的过程，还是基于原型链（和 ES5 的是不是完全一致）\n# 总结：\nJS 继承的原型写法相对 ES6 的写法看上去似乎更复杂，但是事实上更好理解；class 的写法更符合面向对象编程的思维，由于是语法糖因而自然写法简便，但其有一定局限性。\n>原型继承模型本身实际上比经典模型更强大\n\n---\n感谢阅读\n本文仅供个人学习使用\n\n部分参考：[继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)","source":"_posts/浅谈JS继承.md","raw":"---\ntitle: 浅谈JS继承\ndate: 2018-11-02 20:38:27\ntags:\n---\n# 什么是继承\n根据维基百科解释，可以简单概括为：\n继承是类与类之间的关系，其作用是使得子类具有父类别的各种属性和方法。\n# JS 里的原型继承模型\nJS：不好意思，我没有类。（即使是ES6中的类也是语法糖）\nJavaScript 是基于原型实现面向对象的，那么在JS中，面向对象概念中的继承自然也是基于原型。\n>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为[[prototype]]）指向它的原型对象（**prototype**）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 `null`。根据定义，`null` 没有原型，并作为这个**原型链**中的最后一个环节。\n\n>几乎所有 JavaScript 中的对象都是位于原型链顶端的 **Object** 的实例。\n\n有关原型之前写过博客[JavaScript原型和原型链](https://www.jianshu.com/p/93441c4e8f48)，对理解下面内容有帮助。\n虽然没有传统语言意义上的类，但是 JS语言 使用构造函数生成对象，实现面向对象程序设计。\n# 说了这么多，JS 中的继承到底是什么？\n**可以简单理解为：两次的原型搜索就是继承。\n数组 a 从 Array 中原型搜索到 toString 属性，只是实例属性；a 从 Array 中原型搜索到 （Array 从 Object 中原型搜索到的）valueOf 属性，可以称为继承。**\n\n接下来我们用代码实现一下继承\n## 1. 使用 prototype 实现继承\n**prototype 的作用：为构造函数内添加实例对象之间的共有属性**\n\n**明确 JS 内的继承**\n以下面代码为例\n```\n// 构造一个 人类\nfunction Human(name){\n  this.name = name\n}\n// 给所有 人类 添加一个 跑 的共有属性\nHuman.prototype.run = function(){\n  console.log(\"我叫\"+this.name+\"，我在跑\")\n  return undefined\n}\n// 构造一个 男人类\nfunction Man(name){\n  Human.call(this, name)\n  this.gender = '男'\n}\n// 所有 男人 都有好战属性\nMan.prototype.fight = function(){\n  console.log('糊你熊脸')\n}\n```\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c56b1f3dafb9ff8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到名为 ada 的人只有 name、gender 和fight 这些 Man 构造函数里面含有的属性，而没有我们希望的 Human 应该有的 run 的属性。\n**目标：假如我们有方法让 ada 有了 Man 里面没有的 run 属性，即我们自己实现了 Man 继承 Human 的过程。**\n根据我原型知识的博客里面的内容我们知道，我们可以直接：\n```\nMan.prototype.__proto__ = Human.prototype\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-3707e4361a656afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到 Man 指向了 Human 而不是直接指向 Object，ada2 继承了来自 Human 的 run 属性\n\n**但是在实际编程过程中直接操作 __ proto __ 这个非标准但许多浏览器（IE不支持）实现的属性是不规范的。**\n\n那怎么办？\nnew 可不可以？\n```\nMan.prototype = new Human()\n```\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4f15ba95a00b7a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**直接用上述代码不行，因为在 new 的过程中，虽然new 内部实现了 `Man.prototype.__proto__ = Human.prototype` 这一个过程，但是由于 new 同时会在内部执行构造函数，而在执行过程中我们未传 name，因此上图中 Human 的 name 属性显示 undefined**\n\n那么我们只要避免这个过程中 Human 执行就可以了\n```\nvar a = function(){}\na.prototype = Human.prototype\nMan.prototype = new a() \n```\n通过上面三行代码，即实现了没有内部执行空函数的 new\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c3c89ccc7f8d8aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 2. ES6 实现继承\n上面代码的 ES6 版本\n```\n// ES6 写法\nclass Human{\n     constructor(name){\n         this.name = name\n     }\n     run(){\n         console.log(\"我叫\"+this.name+\"，我在跑\")\n         return undefined\n     }\n }\n class Man extends Human{ // extends 实现上述继承过程\n     constructor(name){\n         super(name) // 调用构造函数:'超类'\n         this.gender = '男'\n     }\n     fight(){\n         console.log('糊你熊脸')\n     }\n }\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-f81f6522e88774a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文章开头已经提到， ES6 的 class 是语法糖，其实质就是函数，而上述用 class 实现继承的过程，还是基于原型链（和 ES5 的是不是完全一致）\n# 总结：\nJS 继承的原型写法相对 ES6 的写法看上去似乎更复杂，但是事实上更好理解；class 的写法更符合面向对象编程的思维，由于是语法糖因而自然写法简便，但其有一定局限性。\n>原型继承模型本身实际上比经典模型更强大\n\n---\n感谢阅读\n本文仅供个人学习使用\n\n部分参考：[继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)","slug":"浅谈JS继承","published":1,"updated":"2019-01-18T14:36:56.975Z","_id":"cjr25amhn0002i4997gy0v2is","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是继承\"><a href=\"#什么是继承\" class=\"headerlink\" title=\"什么是继承\"></a>什么是继承</h1><p>根据维基百科解释，可以简单概括为：<br>继承是类与类之间的关系，其作用是使得子类具有父类别的各种属性和方法。</p>\n<h1 id=\"JS-里的原型继承模型\"><a href=\"#JS-里的原型继承模型\" class=\"headerlink\" title=\"JS 里的原型继承模型\"></a>JS 里的原型继承模型</h1><p>JS：不好意思，我没有类。（即使是ES6中的类也是语法糖）<br>JavaScript 是基于原型实现面向对象的，那么在JS中，面向对象概念中的继承自然也是基于原型。</p>\n<blockquote>\n<p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为[[prototype]]）指向它的原型对象（<strong>prototype</strong>）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p>\n</blockquote>\n<blockquote>\n<p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 <strong>Object</strong> 的实例。</p>\n</blockquote>\n<p>有关原型之前写过博客<a href=\"https://www.jianshu.com/p/93441c4e8f48\" target=\"_blank\" rel=\"noopener\">JavaScript原型和原型链</a>，对理解下面内容有帮助。<br>虽然没有传统语言意义上的类，但是 JS语言 使用构造函数生成对象，实现面向对象程序设计。</p>\n<h1 id=\"说了这么多，JS-中的继承到底是什么？\"><a href=\"#说了这么多，JS-中的继承到底是什么？\" class=\"headerlink\" title=\"说了这么多，JS 中的继承到底是什么？\"></a>说了这么多，JS 中的继承到底是什么？</h1><p><strong>可以简单理解为：两次的原型搜索就是继承。<br>数组 a 从 Array 中原型搜索到 toString 属性，只是实例属性；a 从 Array 中原型搜索到 （Array 从 Object 中原型搜索到的）valueOf 属性，可以称为继承。</strong></p>\n<p>接下来我们用代码实现一下继承</p>\n<h2 id=\"1-使用-prototype-实现继承\"><a href=\"#1-使用-prototype-实现继承\" class=\"headerlink\" title=\"1. 使用 prototype 实现继承\"></a>1. 使用 prototype 实现继承</h2><p><strong>prototype 的作用：为构造函数内添加实例对象之间的共有属性</strong></p>\n<p><strong>明确 JS 内的继承</strong><br>以下面代码为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造一个 人类</span><br><span class=\"line\">function Human(name)&#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 给所有 人类 添加一个 跑 的共有属性</span><br><span class=\"line\">Human.prototype.run = function()&#123;</span><br><span class=\"line\">  console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">  return undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 构造一个 男人类</span><br><span class=\"line\">function Man(name)&#123;</span><br><span class=\"line\">  Human.call(this, name)</span><br><span class=\"line\">  this.gender = &apos;男&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 所有 男人 都有好战属性</span><br><span class=\"line\">Man.prototype.fight = function()&#123;</span><br><span class=\"line\">  console.log(&apos;糊你熊脸&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c56b1f3dafb9ff8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到名为 ada 的人只有 name、gender 和fight 这些 Man 构造函数里面含有的属性，而没有我们希望的 Human 应该有的 run 的属性。<br><strong>目标：假如我们有方法让 ada 有了 Man 里面没有的 run 属性，即我们自己实现了 Man 继承 Human 的过程。</strong><br>根据我原型知识的博客里面的内容我们知道，我们可以直接：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man.prototype.__proto__ = Human.prototype</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-3707e4361a656afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到 Man 指向了 Human 而不是直接指向 Object，ada2 继承了来自 Human 的 run 属性</p>\n<p><strong>但是在实际编程过程中直接操作 <strong> proto </strong> 这个非标准但许多浏览器（IE不支持）实现的属性是不规范的。</strong></p>\n<p>那怎么办？<br>new 可不可以？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man.prototype = new Human()</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4f15ba95a00b7a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>直接用上述代码不行，因为在 new 的过程中，虽然new 内部实现了 <code>Man.prototype.__proto__ = Human.prototype</code> 这一个过程，但是由于 new 同时会在内部执行构造函数，而在执行过程中我们未传 name，因此上图中 Human 的 name 属性显示 undefined</strong></p>\n<p>那么我们只要避免这个过程中 Human 执行就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = function()&#123;&#125;</span><br><span class=\"line\">a.prototype = Human.prototype</span><br><span class=\"line\">Man.prototype = new a()</span><br></pre></td></tr></table></figure></p>\n<p>通过上面三行代码，即实现了没有内部执行空函数的 new</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c3c89ccc7f8d8aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"2-ES6-实现继承\"><a href=\"#2-ES6-实现继承\" class=\"headerlink\" title=\"2. ES6 实现继承\"></a>2. ES6 实现继承</h2><p>上面代码的 ES6 版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ES6 写法</span><br><span class=\"line\">class Human&#123;</span><br><span class=\"line\">     constructor(name)&#123;</span><br><span class=\"line\">         this.name = name</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     run()&#123;</span><br><span class=\"line\">         console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">         return undefined</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> class Man extends Human&#123; // extends 实现上述继承过程</span><br><span class=\"line\">     constructor(name)&#123;</span><br><span class=\"line\">         super(name) // 调用构造函数:&apos;超类&apos;</span><br><span class=\"line\">         this.gender = &apos;男&apos;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     fight()&#123;</span><br><span class=\"line\">         console.log(&apos;糊你熊脸&apos;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-f81f6522e88774a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>文章开头已经提到， ES6 的 class 是语法糖，其实质就是函数，而上述用 class 实现继承的过程，还是基于原型链（和 ES5 的是不是完全一致）</p>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p>JS 继承的原型写法相对 ES6 的写法看上去似乎更复杂，但是事实上更好理解；class 的写法更符合面向对象编程的思维，由于是语法糖因而自然写法简便，但其有一定局限性。</p>\n<blockquote>\n<p>原型继承模型本身实际上比经典模型更强大</p>\n</blockquote>\n<hr>\n<p>感谢阅读<br>本文仅供个人学习使用</p>\n<p>部分参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是继承\"><a href=\"#什么是继承\" class=\"headerlink\" title=\"什么是继承\"></a>什么是继承</h1><p>根据维基百科解释，可以简单概括为：<br>继承是类与类之间的关系，其作用是使得子类具有父类别的各种属性和方法。</p>\n<h1 id=\"JS-里的原型继承模型\"><a href=\"#JS-里的原型继承模型\" class=\"headerlink\" title=\"JS 里的原型继承模型\"></a>JS 里的原型继承模型</h1><p>JS：不好意思，我没有类。（即使是ES6中的类也是语法糖）<br>JavaScript 是基于原型实现面向对象的，那么在JS中，面向对象概念中的继承自然也是基于原型。</p>\n<blockquote>\n<p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为[[prototype]]）指向它的原型对象（<strong>prototype</strong>）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p>\n</blockquote>\n<blockquote>\n<p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 <strong>Object</strong> 的实例。</p>\n</blockquote>\n<p>有关原型之前写过博客<a href=\"https://www.jianshu.com/p/93441c4e8f48\" target=\"_blank\" rel=\"noopener\">JavaScript原型和原型链</a>，对理解下面内容有帮助。<br>虽然没有传统语言意义上的类，但是 JS语言 使用构造函数生成对象，实现面向对象程序设计。</p>\n<h1 id=\"说了这么多，JS-中的继承到底是什么？\"><a href=\"#说了这么多，JS-中的继承到底是什么？\" class=\"headerlink\" title=\"说了这么多，JS 中的继承到底是什么？\"></a>说了这么多，JS 中的继承到底是什么？</h1><p><strong>可以简单理解为：两次的原型搜索就是继承。<br>数组 a 从 Array 中原型搜索到 toString 属性，只是实例属性；a 从 Array 中原型搜索到 （Array 从 Object 中原型搜索到的）valueOf 属性，可以称为继承。</strong></p>\n<p>接下来我们用代码实现一下继承</p>\n<h2 id=\"1-使用-prototype-实现继承\"><a href=\"#1-使用-prototype-实现继承\" class=\"headerlink\" title=\"1. 使用 prototype 实现继承\"></a>1. 使用 prototype 实现继承</h2><p><strong>prototype 的作用：为构造函数内添加实例对象之间的共有属性</strong></p>\n<p><strong>明确 JS 内的继承</strong><br>以下面代码为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造一个 人类</span><br><span class=\"line\">function Human(name)&#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 给所有 人类 添加一个 跑 的共有属性</span><br><span class=\"line\">Human.prototype.run = function()&#123;</span><br><span class=\"line\">  console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">  return undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 构造一个 男人类</span><br><span class=\"line\">function Man(name)&#123;</span><br><span class=\"line\">  Human.call(this, name)</span><br><span class=\"line\">  this.gender = &apos;男&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 所有 男人 都有好战属性</span><br><span class=\"line\">Man.prototype.fight = function()&#123;</span><br><span class=\"line\">  console.log(&apos;糊你熊脸&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c56b1f3dafb9ff8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到名为 ada 的人只有 name、gender 和fight 这些 Man 构造函数里面含有的属性，而没有我们希望的 Human 应该有的 run 的属性。<br><strong>目标：假如我们有方法让 ada 有了 Man 里面没有的 run 属性，即我们自己实现了 Man 继承 Human 的过程。</strong><br>根据我原型知识的博客里面的内容我们知道，我们可以直接：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man.prototype.__proto__ = Human.prototype</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-3707e4361a656afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到 Man 指向了 Human 而不是直接指向 Object，ada2 继承了来自 Human 的 run 属性</p>\n<p><strong>但是在实际编程过程中直接操作 <strong> proto </strong> 这个非标准但许多浏览器（IE不支持）实现的属性是不规范的。</strong></p>\n<p>那怎么办？<br>new 可不可以？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man.prototype = new Human()</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4f15ba95a00b7a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>直接用上述代码不行，因为在 new 的过程中，虽然new 内部实现了 <code>Man.prototype.__proto__ = Human.prototype</code> 这一个过程，但是由于 new 同时会在内部执行构造函数，而在执行过程中我们未传 name，因此上图中 Human 的 name 属性显示 undefined</strong></p>\n<p>那么我们只要避免这个过程中 Human 执行就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = function()&#123;&#125;</span><br><span class=\"line\">a.prototype = Human.prototype</span><br><span class=\"line\">Man.prototype = new a()</span><br></pre></td></tr></table></figure></p>\n<p>通过上面三行代码，即实现了没有内部执行空函数的 new</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c3c89ccc7f8d8aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"2-ES6-实现继承\"><a href=\"#2-ES6-实现继承\" class=\"headerlink\" title=\"2. ES6 实现继承\"></a>2. ES6 实现继承</h2><p>上面代码的 ES6 版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ES6 写法</span><br><span class=\"line\">class Human&#123;</span><br><span class=\"line\">     constructor(name)&#123;</span><br><span class=\"line\">         this.name = name</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     run()&#123;</span><br><span class=\"line\">         console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">         return undefined</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> class Man extends Human&#123; // extends 实现上述继承过程</span><br><span class=\"line\">     constructor(name)&#123;</span><br><span class=\"line\">         super(name) // 调用构造函数:&apos;超类&apos;</span><br><span class=\"line\">         this.gender = &apos;男&apos;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     fight()&#123;</span><br><span class=\"line\">         console.log(&apos;糊你熊脸&apos;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-f81f6522e88774a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>文章开头已经提到， ES6 的 class 是语法糖，其实质就是函数，而上述用 class 实现继承的过程，还是基于原型链（和 ES5 的是不是完全一致）</p>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p>JS 继承的原型写法相对 ES6 的写法看上去似乎更复杂，但是事实上更好理解；class 的写法更符合面向对象编程的思维，由于是语法糖因而自然写法简便，但其有一定局限性。</p>\n<blockquote>\n<p>原型继承模型本身实际上比经典模型更强大</p>\n</blockquote>\n<hr>\n<p>感谢阅读<br>本文仅供个人学习使用</p>\n<p>部分参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>\n"},{"title":"正则表达式速记","date":"2018-10-28T06:15:51.000Z","_content":"# 前言\n如何学习：[30分钟入门正则表达式](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/chapter8.html)\n[工具](https://www.regexpal.com/)\n本文参（zhao）考（chao）[RegExp 对象](https://wangdoc.com/javascript/stdlib/regexp.html)，该笔记只为速查\n# 简介\n正则表达式（regular expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象，其体系参照 Perl 5 建立。\n# 创建正则表达式的方法\n1. 使用一个正则表达式字面量\n```\nvar re = /xxx/\n```\n2. 调用 RegExp 对象的构造函数\n\n```\nvar re = new RegExp('xxx')\n```\n两种方法主要区别是：第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。\n# 正则表达式的实例属性\n分为两类\n1. 修饰符（只读）\nRegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。用于忽略字符串大小写。\nRegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。用于全局匹配。\nRegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。用于设置匹配为多行模式。\n2. 其他属性\nRegExp.prototype.lastIndex：返回一个数值，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。\nRegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。\n\n# 实例方法\n## 1. RegExp.prototype.test()\ntest 方法返回布尔值，表示当前模式是否能匹配参数字符串\n```\n/a/.test('and') // true\n```\n## 2. RegExp.prototype.exec()\nexec方法，用来返回匹配结果\n如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null\n```\n/a/.exec('adbca')\n```\n如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的length属性等于组匹配的数量再加1。\n```\nString.prototype.match()：返回一个数组，成员是所有匹配的子字符串。\nString.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。\nString.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。\nString.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。\n```\n---\n# 字面量字符和元字符\n## 元字符\n1. 点字符（.)\n匹配除回车（\\r）、换行(\\n) 、行分隔符（\\u2028）和段分隔符（\\u2029）以外的所有字符。\n2. 位置字符\n```\n^ 表示字符串的开始位置\n$ 表示字符串的结束位置\n```\n3. 选择符（|）\n表示“或关系”\n4. 转义符\n匹配元字符本身可以在它们前面加反斜杠\n构造函数需要两次转义\n5. 特殊字符\n```\n\\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。\n[\\b] 匹配退格键(U+0008)，不要与\\b混淆。\n\\n 匹配换行键。\n\\r 匹配回车键。\n\\t 匹配制表符 tab（U+0009）。\n\\v 匹配垂直制表符（U+000B）。\n\\f 匹配换页符（U+000C）。\n\\0 匹配null字符（U+0000）。\n\\xhh 匹配一个以两位十六进制数（\\x00-\\xFF）表示的字符。\n\\uhhhh 匹配一个以四位十六进制数（\\u0000-\\uFFFF）表示的 Unicode 字符。\n```\n# 字符类\n字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[^xyz] 表示x、y、z之中任选一个匹配。\n1. 脱字符（^）：需在字符类第一位\n表示除了字符类之中的字符，其他字符都可以匹配。只有[^]，就表示匹配一切字符，包括换行符。相比之下，点号作为元字符（.）是不包括换行符的。\n2. 连字符（-）\n```\n[0-9.,]\n[0-9a-fA-F]\n[a-zA-Z0-9-]\n[1-31] // 不代表1到31，只代表1到3\n```\n# 预定义模式：某些常见模式的简写方式\n```\n\\d 匹配0-9之间的任一数字，相当于[0-9]。\n\\D 匹配所有0-9以外的字符，相当于[^0-9]。\n\\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。\n\\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。\n\\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \\t\\r\\n\\v\\f]。\n\\S 匹配非空格的字符，相当于[^ \\t\\r\\n\\v\\f]。\n\\b 匹配词的边界。\n\\B 匹配非词边界，即在词的内部\n```\n# 重复类\n模式的精确匹配次数，使用大括号（{}）表示。{n}表示恰好重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次。\n# 量词符：设定某个模式出现的次数\n```\n? 问号表示某个模式出现0次或1次，等同于{0, 1}。\n* 星号表示某个模式出现0次或多次，等同于{0,}。\n+ 加号表示某个模式出现1次或多次，等同于{1,}。\n```\n# 贪婪模式\n```\nvar s = 'aaa';\ns.match(/a+/) // [\"aaa\"]\n```\n贪婪模式改为非贪婪模式\n```\n*?：表示某个模式出现0次或多次，匹配时采用非贪婪模式。\n+?：表示某个模式出现1次或多次，匹配时采用非贪婪模式。\n```\n# 字符串去空格(replace)\n```\nvar str = '  #id div.class  ';\nstr.trim() // \"#id div.class\"\nstr.replace(/^\\s+|\\s+$/g, '') // \"#id div.class\"\n```\n```\n$&：匹配的子字符串。\n$`：匹配结果前面的文本。\n$’：匹配结果后面的文本。\n$n：匹配成功的第n组内容，n是从1开始的自然数。\n$$：指代美元符号$。\n```\n多多练习吧\n\n---\n本文仅供个人学习使用\n","source":"_posts/正则表达式速记.md","raw":"---\ntitle: 正则表达式速记\ndate: 2018-10-28 14:15:51\ntags:\n---\n# 前言\n如何学习：[30分钟入门正则表达式](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/chapter8.html)\n[工具](https://www.regexpal.com/)\n本文参（zhao）考（chao）[RegExp 对象](https://wangdoc.com/javascript/stdlib/regexp.html)，该笔记只为速查\n# 简介\n正则表达式（regular expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象，其体系参照 Perl 5 建立。\n# 创建正则表达式的方法\n1. 使用一个正则表达式字面量\n```\nvar re = /xxx/\n```\n2. 调用 RegExp 对象的构造函数\n\n```\nvar re = new RegExp('xxx')\n```\n两种方法主要区别是：第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。\n# 正则表达式的实例属性\n分为两类\n1. 修饰符（只读）\nRegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。用于忽略字符串大小写。\nRegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。用于全局匹配。\nRegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。用于设置匹配为多行模式。\n2. 其他属性\nRegExp.prototype.lastIndex：返回一个数值，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。\nRegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。\n\n# 实例方法\n## 1. RegExp.prototype.test()\ntest 方法返回布尔值，表示当前模式是否能匹配参数字符串\n```\n/a/.test('and') // true\n```\n## 2. RegExp.prototype.exec()\nexec方法，用来返回匹配结果\n如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null\n```\n/a/.exec('adbca')\n```\n如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的length属性等于组匹配的数量再加1。\n```\nString.prototype.match()：返回一个数组，成员是所有匹配的子字符串。\nString.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。\nString.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。\nString.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。\n```\n---\n# 字面量字符和元字符\n## 元字符\n1. 点字符（.)\n匹配除回车（\\r）、换行(\\n) 、行分隔符（\\u2028）和段分隔符（\\u2029）以外的所有字符。\n2. 位置字符\n```\n^ 表示字符串的开始位置\n$ 表示字符串的结束位置\n```\n3. 选择符（|）\n表示“或关系”\n4. 转义符\n匹配元字符本身可以在它们前面加反斜杠\n构造函数需要两次转义\n5. 特殊字符\n```\n\\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。\n[\\b] 匹配退格键(U+0008)，不要与\\b混淆。\n\\n 匹配换行键。\n\\r 匹配回车键。\n\\t 匹配制表符 tab（U+0009）。\n\\v 匹配垂直制表符（U+000B）。\n\\f 匹配换页符（U+000C）。\n\\0 匹配null字符（U+0000）。\n\\xhh 匹配一个以两位十六进制数（\\x00-\\xFF）表示的字符。\n\\uhhhh 匹配一个以四位十六进制数（\\u0000-\\uFFFF）表示的 Unicode 字符。\n```\n# 字符类\n字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[^xyz] 表示x、y、z之中任选一个匹配。\n1. 脱字符（^）：需在字符类第一位\n表示除了字符类之中的字符，其他字符都可以匹配。只有[^]，就表示匹配一切字符，包括换行符。相比之下，点号作为元字符（.）是不包括换行符的。\n2. 连字符（-）\n```\n[0-9.,]\n[0-9a-fA-F]\n[a-zA-Z0-9-]\n[1-31] // 不代表1到31，只代表1到3\n```\n# 预定义模式：某些常见模式的简写方式\n```\n\\d 匹配0-9之间的任一数字，相当于[0-9]。\n\\D 匹配所有0-9以外的字符，相当于[^0-9]。\n\\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。\n\\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。\n\\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \\t\\r\\n\\v\\f]。\n\\S 匹配非空格的字符，相当于[^ \\t\\r\\n\\v\\f]。\n\\b 匹配词的边界。\n\\B 匹配非词边界，即在词的内部\n```\n# 重复类\n模式的精确匹配次数，使用大括号（{}）表示。{n}表示恰好重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次。\n# 量词符：设定某个模式出现的次数\n```\n? 问号表示某个模式出现0次或1次，等同于{0, 1}。\n* 星号表示某个模式出现0次或多次，等同于{0,}。\n+ 加号表示某个模式出现1次或多次，等同于{1,}。\n```\n# 贪婪模式\n```\nvar s = 'aaa';\ns.match(/a+/) // [\"aaa\"]\n```\n贪婪模式改为非贪婪模式\n```\n*?：表示某个模式出现0次或多次，匹配时采用非贪婪模式。\n+?：表示某个模式出现1次或多次，匹配时采用非贪婪模式。\n```\n# 字符串去空格(replace)\n```\nvar str = '  #id div.class  ';\nstr.trim() // \"#id div.class\"\nstr.replace(/^\\s+|\\s+$/g, '') // \"#id div.class\"\n```\n```\n$&：匹配的子字符串。\n$`：匹配结果前面的文本。\n$’：匹配结果后面的文本。\n$n：匹配成功的第n组内容，n是从1开始的自然数。\n$$：指代美元符号$。\n```\n多多练习吧\n\n---\n本文仅供个人学习使用\n","slug":"正则表达式速记","published":1,"updated":"2019-01-18T14:43:30.007Z","_id":"cjr25gafd0000r899qn6xarh2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>如何学习：<a href=\"https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/chapter8.html\" target=\"_blank\" rel=\"noopener\">30分钟入门正则表达式</a><br><a href=\"https://www.regexpal.com/\" target=\"_blank\" rel=\"noopener\">工具</a><br>本文参（zhao）考（chao）<a href=\"https://wangdoc.com/javascript/stdlib/regexp.html\" target=\"_blank\" rel=\"noopener\">RegExp 对象</a>，该笔记只为速查</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>正则表达式（regular expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象，其体系参照 Perl 5 建立。</p>\n<h1 id=\"创建正则表达式的方法\"><a href=\"#创建正则表达式的方法\" class=\"headerlink\" title=\"创建正则表达式的方法\"></a>创建正则表达式的方法</h1><ol>\n<li><p>使用一个正则表达式字面量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = /xxx/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用 RegExp 对象的构造函数</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = new RegExp(&apos;xxx&apos;)</span><br></pre></td></tr></table></figure>\n<p>两种方法主要区别是：第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。</p>\n<h1 id=\"正则表达式的实例属性\"><a href=\"#正则表达式的实例属性\" class=\"headerlink\" title=\"正则表达式的实例属性\"></a>正则表达式的实例属性</h1><p>分为两类</p>\n<ol>\n<li>修饰符（只读）<br>RegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。用于忽略字符串大小写。<br>RegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。用于全局匹配。<br>RegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。用于设置匹配为多行模式。</li>\n<li>其他属性<br>RegExp.prototype.lastIndex：返回一个数值，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。<br>RegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。</li>\n</ol>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><h2 id=\"1-RegExp-prototype-test\"><a href=\"#1-RegExp-prototype-test\" class=\"headerlink\" title=\"1. RegExp.prototype.test()\"></a>1. RegExp.prototype.test()</h2><p>test 方法返回布尔值，表示当前模式是否能匹配参数字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a/.test(&apos;and&apos;) // true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-RegExp-prototype-exec\"><a href=\"#2-RegExp-prototype-exec\" class=\"headerlink\" title=\"2. RegExp.prototype.exec()\"></a>2. RegExp.prototype.exec()</h2><p>exec方法，用来返回匹配结果<br>如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a/.exec(&apos;adbca&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的length属性等于组匹配的数量再加1。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.prototype.match()：返回一个数组，成员是所有匹配的子字符串。</span><br><span class=\"line\">String.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。</span><br><span class=\"line\">String.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。</span><br><span class=\"line\">String.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"字面量字符和元字符\"><a href=\"#字面量字符和元字符\" class=\"headerlink\" title=\"字面量字符和元字符\"></a>字面量字符和元字符</h1><h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><ol>\n<li>点字符（.)<br>匹配除回车（\\r）、换行(\\n) 、行分隔符（\\u2028）和段分隔符（\\u2029）以外的所有字符。</li>\n<li><p>位置字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^ 表示字符串的开始位置</span><br><span class=\"line\">$ 表示字符串的结束位置</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择符（|）<br>表示“或关系”</p>\n</li>\n<li>转义符<br>匹配元字符本身可以在它们前面加反斜杠<br>构造函数需要两次转义</li>\n<li>特殊字符<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。</span><br><span class=\"line\">[\\b] 匹配退格键(U+0008)，不要与\\b混淆。</span><br><span class=\"line\">\\n 匹配换行键。</span><br><span class=\"line\">\\r 匹配回车键。</span><br><span class=\"line\">\\t 匹配制表符 tab（U+0009）。</span><br><span class=\"line\">\\v 匹配垂直制表符（U+000B）。</span><br><span class=\"line\">\\f 匹配换页符（U+000C）。</span><br><span class=\"line\">\\0 匹配null字符（U+0000）。</span><br><span class=\"line\">\\xhh 匹配一个以两位十六进制数（\\x00-\\xFF）表示的字符。</span><br><span class=\"line\">\\uhhhh 匹配一个以四位十六进制数（\\u0000-\\uFFFF）表示的 Unicode 字符。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h1><p>字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[^xyz] 表示x、y、z之中任选一个匹配。</p>\n<ol>\n<li>脱字符（^）：需在字符类第一位<br>表示除了字符类之中的字符，其他字符都可以匹配。只有[^]，就表示匹配一切字符，包括换行符。相比之下，点号作为元字符（.）是不包括换行符的。</li>\n<li>连字符（-）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0-9.,]</span><br><span class=\"line\">[0-9a-fA-F]</span><br><span class=\"line\">[a-zA-Z0-9-]</span><br><span class=\"line\">[1-31] // 不代表1到31，只代表1到3</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"预定义模式：某些常见模式的简写方式\"><a href=\"#预定义模式：某些常见模式的简写方式\" class=\"headerlink\" title=\"预定义模式：某些常见模式的简写方式\"></a>预定义模式：某些常见模式的简写方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d 匹配0-9之间的任一数字，相当于[0-9]。</span><br><span class=\"line\">\\D 匹配所有0-9以外的字符，相当于[^0-9]。</span><br><span class=\"line\">\\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。</span><br><span class=\"line\">\\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。</span><br><span class=\"line\">\\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \\t\\r\\n\\v\\f]。</span><br><span class=\"line\">\\S 匹配非空格的字符，相当于[^ \\t\\r\\n\\v\\f]。</span><br><span class=\"line\">\\b 匹配词的边界。</span><br><span class=\"line\">\\B 匹配非词边界，即在词的内部</span><br></pre></td></tr></table></figure>\n<h1 id=\"重复类\"><a href=\"#重复类\" class=\"headerlink\" title=\"重复类\"></a>重复类</h1><p>模式的精确匹配次数，使用大括号（{}）表示。{n}表示恰好重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次。</p>\n<h1 id=\"量词符：设定某个模式出现的次数\"><a href=\"#量词符：设定某个模式出现的次数\" class=\"headerlink\" title=\"量词符：设定某个模式出现的次数\"></a>量词符：设定某个模式出现的次数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? 问号表示某个模式出现0次或1次，等同于&#123;0, 1&#125;。</span><br><span class=\"line\">* 星号表示某个模式出现0次或多次，等同于&#123;0,&#125;。</span><br><span class=\"line\">+ 加号表示某个模式出现1次或多次，等同于&#123;1,&#125;。</span><br></pre></td></tr></table></figure>\n<h1 id=\"贪婪模式\"><a href=\"#贪婪模式\" class=\"headerlink\" title=\"贪婪模式\"></a>贪婪模式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = &apos;aaa&apos;;</span><br><span class=\"line\">s.match(/a+/) // [&quot;aaa&quot;]</span><br></pre></td></tr></table></figure>\n<p>贪婪模式改为非贪婪模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*?：表示某个模式出现0次或多次，匹配时采用非贪婪模式。</span><br><span class=\"line\">+?：表示某个模式出现1次或多次，匹配时采用非贪婪模式。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"字符串去空格-replace\"><a href=\"#字符串去空格-replace\" class=\"headerlink\" title=\"字符串去空格(replace)\"></a>字符串去空格(replace)</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;  #id div.class  &apos;;</span><br><span class=\"line\">str.trim() // &quot;#id div.class&quot;</span><br><span class=\"line\">str.replace(/^\\s+|\\s+$/g, &apos;&apos;) // &quot;#id div.class&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&amp;：匹配的子字符串。</span><br><span class=\"line\">$`：匹配结果前面的文本。</span><br><span class=\"line\">$’：匹配结果后面的文本。</span><br><span class=\"line\">$n：匹配成功的第n组内容，n是从1开始的自然数。</span><br><span class=\"line\">$$：指代美元符号$。</span><br></pre></td></tr></table></figure>\n<p>多多练习吧</p>\n<hr>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>如何学习：<a href=\"https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/chapter8.html\" target=\"_blank\" rel=\"noopener\">30分钟入门正则表达式</a><br><a href=\"https://www.regexpal.com/\" target=\"_blank\" rel=\"noopener\">工具</a><br>本文参（zhao）考（chao）<a href=\"https://wangdoc.com/javascript/stdlib/regexp.html\" target=\"_blank\" rel=\"noopener\">RegExp 对象</a>，该笔记只为速查</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>正则表达式（regular expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象，其体系参照 Perl 5 建立。</p>\n<h1 id=\"创建正则表达式的方法\"><a href=\"#创建正则表达式的方法\" class=\"headerlink\" title=\"创建正则表达式的方法\"></a>创建正则表达式的方法</h1><ol>\n<li><p>使用一个正则表达式字面量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = /xxx/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用 RegExp 对象的构造函数</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = new RegExp(&apos;xxx&apos;)</span><br></pre></td></tr></table></figure>\n<p>两种方法主要区别是：第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。</p>\n<h1 id=\"正则表达式的实例属性\"><a href=\"#正则表达式的实例属性\" class=\"headerlink\" title=\"正则表达式的实例属性\"></a>正则表达式的实例属性</h1><p>分为两类</p>\n<ol>\n<li>修饰符（只读）<br>RegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。用于忽略字符串大小写。<br>RegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。用于全局匹配。<br>RegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。用于设置匹配为多行模式。</li>\n<li>其他属性<br>RegExp.prototype.lastIndex：返回一个数值，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。<br>RegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。</li>\n</ol>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><h2 id=\"1-RegExp-prototype-test\"><a href=\"#1-RegExp-prototype-test\" class=\"headerlink\" title=\"1. RegExp.prototype.test()\"></a>1. RegExp.prototype.test()</h2><p>test 方法返回布尔值，表示当前模式是否能匹配参数字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a/.test(&apos;and&apos;) // true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-RegExp-prototype-exec\"><a href=\"#2-RegExp-prototype-exec\" class=\"headerlink\" title=\"2. RegExp.prototype.exec()\"></a>2. RegExp.prototype.exec()</h2><p>exec方法，用来返回匹配结果<br>如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a/.exec(&apos;adbca&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的length属性等于组匹配的数量再加1。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.prototype.match()：返回一个数组，成员是所有匹配的子字符串。</span><br><span class=\"line\">String.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。</span><br><span class=\"line\">String.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。</span><br><span class=\"line\">String.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"字面量字符和元字符\"><a href=\"#字面量字符和元字符\" class=\"headerlink\" title=\"字面量字符和元字符\"></a>字面量字符和元字符</h1><h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><ol>\n<li>点字符（.)<br>匹配除回车（\\r）、换行(\\n) 、行分隔符（\\u2028）和段分隔符（\\u2029）以外的所有字符。</li>\n<li><p>位置字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^ 表示字符串的开始位置</span><br><span class=\"line\">$ 表示字符串的结束位置</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择符（|）<br>表示“或关系”</p>\n</li>\n<li>转义符<br>匹配元字符本身可以在它们前面加反斜杠<br>构造函数需要两次转义</li>\n<li>特殊字符<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。</span><br><span class=\"line\">[\\b] 匹配退格键(U+0008)，不要与\\b混淆。</span><br><span class=\"line\">\\n 匹配换行键。</span><br><span class=\"line\">\\r 匹配回车键。</span><br><span class=\"line\">\\t 匹配制表符 tab（U+0009）。</span><br><span class=\"line\">\\v 匹配垂直制表符（U+000B）。</span><br><span class=\"line\">\\f 匹配换页符（U+000C）。</span><br><span class=\"line\">\\0 匹配null字符（U+0000）。</span><br><span class=\"line\">\\xhh 匹配一个以两位十六进制数（\\x00-\\xFF）表示的字符。</span><br><span class=\"line\">\\uhhhh 匹配一个以四位十六进制数（\\u0000-\\uFFFF）表示的 Unicode 字符。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h1><p>字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[^xyz] 表示x、y、z之中任选一个匹配。</p>\n<ol>\n<li>脱字符（^）：需在字符类第一位<br>表示除了字符类之中的字符，其他字符都可以匹配。只有[^]，就表示匹配一切字符，包括换行符。相比之下，点号作为元字符（.）是不包括换行符的。</li>\n<li>连字符（-）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0-9.,]</span><br><span class=\"line\">[0-9a-fA-F]</span><br><span class=\"line\">[a-zA-Z0-9-]</span><br><span class=\"line\">[1-31] // 不代表1到31，只代表1到3</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"预定义模式：某些常见模式的简写方式\"><a href=\"#预定义模式：某些常见模式的简写方式\" class=\"headerlink\" title=\"预定义模式：某些常见模式的简写方式\"></a>预定义模式：某些常见模式的简写方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d 匹配0-9之间的任一数字，相当于[0-9]。</span><br><span class=\"line\">\\D 匹配所有0-9以外的字符，相当于[^0-9]。</span><br><span class=\"line\">\\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。</span><br><span class=\"line\">\\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。</span><br><span class=\"line\">\\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \\t\\r\\n\\v\\f]。</span><br><span class=\"line\">\\S 匹配非空格的字符，相当于[^ \\t\\r\\n\\v\\f]。</span><br><span class=\"line\">\\b 匹配词的边界。</span><br><span class=\"line\">\\B 匹配非词边界，即在词的内部</span><br></pre></td></tr></table></figure>\n<h1 id=\"重复类\"><a href=\"#重复类\" class=\"headerlink\" title=\"重复类\"></a>重复类</h1><p>模式的精确匹配次数，使用大括号（{}）表示。{n}表示恰好重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次。</p>\n<h1 id=\"量词符：设定某个模式出现的次数\"><a href=\"#量词符：设定某个模式出现的次数\" class=\"headerlink\" title=\"量词符：设定某个模式出现的次数\"></a>量词符：设定某个模式出现的次数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? 问号表示某个模式出现0次或1次，等同于&#123;0, 1&#125;。</span><br><span class=\"line\">* 星号表示某个模式出现0次或多次，等同于&#123;0,&#125;。</span><br><span class=\"line\">+ 加号表示某个模式出现1次或多次，等同于&#123;1,&#125;。</span><br></pre></td></tr></table></figure>\n<h1 id=\"贪婪模式\"><a href=\"#贪婪模式\" class=\"headerlink\" title=\"贪婪模式\"></a>贪婪模式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = &apos;aaa&apos;;</span><br><span class=\"line\">s.match(/a+/) // [&quot;aaa&quot;]</span><br></pre></td></tr></table></figure>\n<p>贪婪模式改为非贪婪模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*?：表示某个模式出现0次或多次，匹配时采用非贪婪模式。</span><br><span class=\"line\">+?：表示某个模式出现1次或多次，匹配时采用非贪婪模式。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"字符串去空格-replace\"><a href=\"#字符串去空格-replace\" class=\"headerlink\" title=\"字符串去空格(replace)\"></a>字符串去空格(replace)</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;  #id div.class  &apos;;</span><br><span class=\"line\">str.trim() // &quot;#id div.class&quot;</span><br><span class=\"line\">str.replace(/^\\s+|\\s+$/g, &apos;&apos;) // &quot;#id div.class&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&amp;：匹配的子字符串。</span><br><span class=\"line\">$`：匹配结果前面的文本。</span><br><span class=\"line\">$’：匹配结果后面的文本。</span><br><span class=\"line\">$n：匹配成功的第n组内容，n是从1开始的自然数。</span><br><span class=\"line\">$$：指代美元符号$。</span><br></pre></td></tr></table></figure>\n<p>多多练习吧</p>\n<hr>\n<p>本文仅供个人学习使用</p>\n"},{"title":"理解虚拟 DOM","date":"2018-09-27T13:10:41.000Z","_content":"# DOM 和 Virtual DOM\n**DOM：Document Object Model 把文档变成对象的模型\n在没有 DOM 之前，JavaScript 想要操作页面（文档）内的元素比较麻烦，于是有了 DOM API 把文档变成对象的模型，可以通过操作这些 API，直接操作元素，而不需要经过麻烦的遍历等基本操作。有了 DOM 写代码的人是舒服了（当然我们知道 DOM 也比较麻烦），但是事实上它的速度自然没有原生 js 的对象来得快。\n问题：在需要操作大量页面元素的时候，每当发生更改，有什么办法能够快速生成新页面？\n你可以很快想到用模版引擎重新渲染整个视图，而这样会产生很多问题，首要问题就是慢。DOM 内部含有大量数据结构，而我们有时只对其中一部分元素内容进行增删改查，但却需要对整个页面进行重复渲染。\n方法：通过创建与 DOM 的数据结构映射的 Virtual DOM 虚拟数据结构，我们只操作虚拟数据结构，先比较虚拟 DOM 的异同，再将最终操作结果反应到 真实 DOM 中。\n在整个过程中，DOM 只操作了一次，其他改变的操作，我们都通过操作虚拟 DOM：当页面元素需要发生变化，原本我们需要通过 DOM 操作，重新渲染页面，而现在，我们只需要操作虚拟 DOM ，由虚拟 DOM 对比之前操作，把页面变化部分反馈给 DOM，此时 DOM 只需要渲染变化的一部分，不用再次渲染整个页面，大大提高效率和性能。**\n\n`\nVirtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）\n`\n\n# 过程实现\n\n文档界面\n```\n<body>\n    <div id=\"root\"></div>\n    <script src=\"./v-dom.js\"></script>\n</body>\n```\n```\n// 定义一个 VNode 类\nclass VNode {\n    constructor(tag, children, text) {\n        this.tag = tag\n        this.children = children\n        this.text = text\n    }\n\n    render() { // render 方法，创建子元素\n        if (this.tag === '#text') {\n            return document.createTextNode(this.text)\n        }\n        let el = document.createElement(this.tag)\n        this.children.forEach(vChild => {\n            el.appendChild(vChild.render())\n        })\n        return el\n    }\n}\n// v 构造函数，判断子元素类型\nfunction v(tag, children, text) {\n    if (typeof children === 'string') {\n        text = children\n        children = []\n    }\n    return new VNode(tag, children, text)\n}\n```\n\n```\nlet vNode = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')])\n])\nconst root = document.querySelector('#root')\nroot.appendChild(vNode.render())\n```\n通过上述代码，我们构建了一个简单的虚拟 DOM 树，可以通过它构建一个真正的 DOM 树，渲染到页面中\n![](https://upload-images.jianshu.io/upload_images/7094266-762ab26eabd2e04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**精髓：通过对比新旧虚拟 DOM 树，其原生对象判断页面增删改查了哪些部分，而后单独渲染差异部分。没有这个 patchElement 就失去了虚拟 DOM 的意义，和原始 DOM 效果无异了**\n```\nfunction patchElement(parent, newVNode, oldVNode, index = 0) {\n    if (!oldVNode) {\n        parent.appendChild(newVNode.render())\n    } else if (!newVNode) {\n        parent.removeChild(parent.childNodes[index])\n    } else if (newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) {\n        parent.replaceChild(newVNode.render(), parent.childNodes[index])\n    } else {\n        for (let i = 0; i < newVNode.children.length || i < oldVNode.children.length; i++) {\n            patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)\n        }\n    }\n}\n```\n当然，上述只是简单的算法判断逻辑，但是也能让我们理解其相应过程和原理。\n\n整个状态变更的过程如下\n```\n// 1. 构建虚拟DOM\nlet vNode = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')])\n])\n// 3. 生成新的虚拟DOM\nlet vNode1 = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')]),\n    v('p', [v('#text', 'upload')])\n])\n// 2. 通过虚拟DOM构建真正的DOM\nconst root = document.querySelector('#root')\npatchElement(root, vNode)\nvar n = 0\n// 4. 比较两次虚拟DOM树的不同，在真正的DOM元素上应用变更\ndocument.querySelector('.btn').onclick = function () {\n    if (n % 2 == 0) {\n        patchElement(root, vNode1, vNode)\n    } else {\n        patchElement(root, vNode, vNode1)\n    }\n    n += 1\n}\n```\n\n本文仅供个人学习使用\n\n---\n主要参考：[深度剖析：如何实现一个 Virtual DOM 算法](https://github.com/livoras/blog/issues/13)","source":"_posts/理解虚拟-DOM.md","raw":"---\ntitle: 理解虚拟 DOM\ndate: 2018-09-27 21:10:41\ntags:\n---\n# DOM 和 Virtual DOM\n**DOM：Document Object Model 把文档变成对象的模型\n在没有 DOM 之前，JavaScript 想要操作页面（文档）内的元素比较麻烦，于是有了 DOM API 把文档变成对象的模型，可以通过操作这些 API，直接操作元素，而不需要经过麻烦的遍历等基本操作。有了 DOM 写代码的人是舒服了（当然我们知道 DOM 也比较麻烦），但是事实上它的速度自然没有原生 js 的对象来得快。\n问题：在需要操作大量页面元素的时候，每当发生更改，有什么办法能够快速生成新页面？\n你可以很快想到用模版引擎重新渲染整个视图，而这样会产生很多问题，首要问题就是慢。DOM 内部含有大量数据结构，而我们有时只对其中一部分元素内容进行增删改查，但却需要对整个页面进行重复渲染。\n方法：通过创建与 DOM 的数据结构映射的 Virtual DOM 虚拟数据结构，我们只操作虚拟数据结构，先比较虚拟 DOM 的异同，再将最终操作结果反应到 真实 DOM 中。\n在整个过程中，DOM 只操作了一次，其他改变的操作，我们都通过操作虚拟 DOM：当页面元素需要发生变化，原本我们需要通过 DOM 操作，重新渲染页面，而现在，我们只需要操作虚拟 DOM ，由虚拟 DOM 对比之前操作，把页面变化部分反馈给 DOM，此时 DOM 只需要渲染变化的一部分，不用再次渲染整个页面，大大提高效率和性能。**\n\n`\nVirtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）\n`\n\n# 过程实现\n\n文档界面\n```\n<body>\n    <div id=\"root\"></div>\n    <script src=\"./v-dom.js\"></script>\n</body>\n```\n```\n// 定义一个 VNode 类\nclass VNode {\n    constructor(tag, children, text) {\n        this.tag = tag\n        this.children = children\n        this.text = text\n    }\n\n    render() { // render 方法，创建子元素\n        if (this.tag === '#text') {\n            return document.createTextNode(this.text)\n        }\n        let el = document.createElement(this.tag)\n        this.children.forEach(vChild => {\n            el.appendChild(vChild.render())\n        })\n        return el\n    }\n}\n// v 构造函数，判断子元素类型\nfunction v(tag, children, text) {\n    if (typeof children === 'string') {\n        text = children\n        children = []\n    }\n    return new VNode(tag, children, text)\n}\n```\n\n```\nlet vNode = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')])\n])\nconst root = document.querySelector('#root')\nroot.appendChild(vNode.render())\n```\n通过上述代码，我们构建了一个简单的虚拟 DOM 树，可以通过它构建一个真正的 DOM 树，渲染到页面中\n![](https://upload-images.jianshu.io/upload_images/7094266-762ab26eabd2e04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**精髓：通过对比新旧虚拟 DOM 树，其原生对象判断页面增删改查了哪些部分，而后单独渲染差异部分。没有这个 patchElement 就失去了虚拟 DOM 的意义，和原始 DOM 效果无异了**\n```\nfunction patchElement(parent, newVNode, oldVNode, index = 0) {\n    if (!oldVNode) {\n        parent.appendChild(newVNode.render())\n    } else if (!newVNode) {\n        parent.removeChild(parent.childNodes[index])\n    } else if (newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) {\n        parent.replaceChild(newVNode.render(), parent.childNodes[index])\n    } else {\n        for (let i = 0; i < newVNode.children.length || i < oldVNode.children.length; i++) {\n            patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)\n        }\n    }\n}\n```\n当然，上述只是简单的算法判断逻辑，但是也能让我们理解其相应过程和原理。\n\n整个状态变更的过程如下\n```\n// 1. 构建虚拟DOM\nlet vNode = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')])\n])\n// 3. 生成新的虚拟DOM\nlet vNode1 = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')]),\n    v('p', [v('#text', 'upload')])\n])\n// 2. 通过虚拟DOM构建真正的DOM\nconst root = document.querySelector('#root')\npatchElement(root, vNode)\nvar n = 0\n// 4. 比较两次虚拟DOM树的不同，在真正的DOM元素上应用变更\ndocument.querySelector('.btn').onclick = function () {\n    if (n % 2 == 0) {\n        patchElement(root, vNode1, vNode)\n    } else {\n        patchElement(root, vNode, vNode1)\n    }\n    n += 1\n}\n```\n\n本文仅供个人学习使用\n\n---\n主要参考：[深度剖析：如何实现一个 Virtual DOM 算法](https://github.com/livoras/blog/issues/13)","slug":"理解虚拟-DOM","published":1,"updated":"2019-01-18T14:46:13.637Z","_id":"cjr25nsge00004499n3q6lkdx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"DOM-和-Virtual-DOM\"><a href=\"#DOM-和-Virtual-DOM\" class=\"headerlink\" title=\"DOM 和 Virtual DOM\"></a>DOM 和 Virtual DOM</h1><p><strong>DOM：Document Object Model 把文档变成对象的模型<br>在没有 DOM 之前，JavaScript 想要操作页面（文档）内的元素比较麻烦，于是有了 DOM API 把文档变成对象的模型，可以通过操作这些 API，直接操作元素，而不需要经过麻烦的遍历等基本操作。有了 DOM 写代码的人是舒服了（当然我们知道 DOM 也比较麻烦），但是事实上它的速度自然没有原生 js 的对象来得快。<br>问题：在需要操作大量页面元素的时候，每当发生更改，有什么办法能够快速生成新页面？<br>你可以很快想到用模版引擎重新渲染整个视图，而这样会产生很多问题，首要问题就是慢。DOM 内部含有大量数据结构，而我们有时只对其中一部分元素内容进行增删改查，但却需要对整个页面进行重复渲染。<br>方法：通过创建与 DOM 的数据结构映射的 Virtual DOM 虚拟数据结构，我们只操作虚拟数据结构，先比较虚拟 DOM 的异同，再将最终操作结果反应到 真实 DOM 中。<br>在整个过程中，DOM 只操作了一次，其他改变的操作，我们都通过操作虚拟 DOM：当页面元素需要发生变化，原本我们需要通过 DOM 操作，重新渲染页面，而现在，我们只需要操作虚拟 DOM ，由虚拟 DOM 对比之前操作，把页面变化部分反馈给 DOM，此时 DOM 只需要渲染变化的一部分，不用再次渲染整个页面，大大提高效率和性能。</strong></p>\n<p><code>Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）</code></p>\n<h1 id=\"过程实现\"><a href=\"#过程实现\" class=\"headerlink\" title=\"过程实现\"></a>过程实现</h1><p>文档界面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./v-dom.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个 VNode 类</span><br><span class=\"line\">class VNode &#123;</span><br><span class=\"line\">    constructor(tag, children, text) &#123;</span><br><span class=\"line\">        this.tag = tag</span><br><span class=\"line\">        this.children = children</span><br><span class=\"line\">        this.text = text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123; // render 方法，创建子元素</span><br><span class=\"line\">        if (this.tag === &apos;#text&apos;) &#123;</span><br><span class=\"line\">            return document.createTextNode(this.text)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let el = document.createElement(this.tag)</span><br><span class=\"line\">        this.children.forEach(vChild =&gt; &#123;</span><br><span class=\"line\">            el.appendChild(vChild.render())</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        return el</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// v 构造函数，判断子元素类型</span><br><span class=\"line\">function v(tag, children, text) &#123;</span><br><span class=\"line\">    if (typeof children === &apos;string&apos;) &#123;</span><br><span class=\"line\">        text = children</span><br><span class=\"line\">        children = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return new VNode(tag, children, text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vNode = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">const root = document.querySelector(&apos;#root&apos;)</span><br><span class=\"line\">root.appendChild(vNode.render())</span><br></pre></td></tr></table></figure>\n<p>通过上述代码，我们构建了一个简单的虚拟 DOM 树，可以通过它构建一个真正的 DOM 树，渲染到页面中<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-762ab26eabd2e04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>精髓：通过对比新旧虚拟 DOM 树，其原生对象判断页面增删改查了哪些部分，而后单独渲染差异部分。没有这个 patchElement 就失去了虚拟 DOM 的意义，和原始 DOM 效果无异了</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function patchElement(parent, newVNode, oldVNode, index = 0) &#123;</span><br><span class=\"line\">    if (!oldVNode) &#123;</span><br><span class=\"line\">        parent.appendChild(newVNode.render())</span><br><span class=\"line\">    &#125; else if (!newVNode) &#123;</span><br><span class=\"line\">        parent.removeChild(parent.childNodes[index])</span><br><span class=\"line\">    &#125; else if (newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) &#123;</span><br><span class=\"line\">        parent.replaceChild(newVNode.render(), parent.childNodes[index])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; newVNode.children.length || i &lt; oldVNode.children.length; i++) &#123;</span><br><span class=\"line\">            patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，上述只是简单的算法判断逻辑，但是也能让我们理解其相应过程和原理。</p>\n<p>整个状态变更的过程如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 构建虚拟DOM</span><br><span class=\"line\">let vNode = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">// 3. 生成新的虚拟DOM</span><br><span class=\"line\">let vNode1 = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)]),</span><br><span class=\"line\">    v(&apos;p&apos;, [v(&apos;#text&apos;, &apos;upload&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">// 2. 通过虚拟DOM构建真正的DOM</span><br><span class=\"line\">const root = document.querySelector(&apos;#root&apos;)</span><br><span class=\"line\">patchElement(root, vNode)</span><br><span class=\"line\">var n = 0</span><br><span class=\"line\">// 4. 比较两次虚拟DOM树的不同，在真正的DOM元素上应用变更</span><br><span class=\"line\">document.querySelector(&apos;.btn&apos;).onclick = function () &#123;</span><br><span class=\"line\">    if (n % 2 == 0) &#123;</span><br><span class=\"line\">        patchElement(root, vNode1, vNode)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        patchElement(root, vNode, vNode1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n += 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本文仅供个人学习使用</p>\n<hr>\n<p>主要参考：<a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"noopener\">深度剖析：如何实现一个 Virtual DOM 算法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"DOM-和-Virtual-DOM\"><a href=\"#DOM-和-Virtual-DOM\" class=\"headerlink\" title=\"DOM 和 Virtual DOM\"></a>DOM 和 Virtual DOM</h1><p><strong>DOM：Document Object Model 把文档变成对象的模型<br>在没有 DOM 之前，JavaScript 想要操作页面（文档）内的元素比较麻烦，于是有了 DOM API 把文档变成对象的模型，可以通过操作这些 API，直接操作元素，而不需要经过麻烦的遍历等基本操作。有了 DOM 写代码的人是舒服了（当然我们知道 DOM 也比较麻烦），但是事实上它的速度自然没有原生 js 的对象来得快。<br>问题：在需要操作大量页面元素的时候，每当发生更改，有什么办法能够快速生成新页面？<br>你可以很快想到用模版引擎重新渲染整个视图，而这样会产生很多问题，首要问题就是慢。DOM 内部含有大量数据结构，而我们有时只对其中一部分元素内容进行增删改查，但却需要对整个页面进行重复渲染。<br>方法：通过创建与 DOM 的数据结构映射的 Virtual DOM 虚拟数据结构，我们只操作虚拟数据结构，先比较虚拟 DOM 的异同，再将最终操作结果反应到 真实 DOM 中。<br>在整个过程中，DOM 只操作了一次，其他改变的操作，我们都通过操作虚拟 DOM：当页面元素需要发生变化，原本我们需要通过 DOM 操作，重新渲染页面，而现在，我们只需要操作虚拟 DOM ，由虚拟 DOM 对比之前操作，把页面变化部分反馈给 DOM，此时 DOM 只需要渲染变化的一部分，不用再次渲染整个页面，大大提高效率和性能。</strong></p>\n<p><code>Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）</code></p>\n<h1 id=\"过程实现\"><a href=\"#过程实现\" class=\"headerlink\" title=\"过程实现\"></a>过程实现</h1><p>文档界面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./v-dom.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个 VNode 类</span><br><span class=\"line\">class VNode &#123;</span><br><span class=\"line\">    constructor(tag, children, text) &#123;</span><br><span class=\"line\">        this.tag = tag</span><br><span class=\"line\">        this.children = children</span><br><span class=\"line\">        this.text = text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123; // render 方法，创建子元素</span><br><span class=\"line\">        if (this.tag === &apos;#text&apos;) &#123;</span><br><span class=\"line\">            return document.createTextNode(this.text)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let el = document.createElement(this.tag)</span><br><span class=\"line\">        this.children.forEach(vChild =&gt; &#123;</span><br><span class=\"line\">            el.appendChild(vChild.render())</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        return el</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// v 构造函数，判断子元素类型</span><br><span class=\"line\">function v(tag, children, text) &#123;</span><br><span class=\"line\">    if (typeof children === &apos;string&apos;) &#123;</span><br><span class=\"line\">        text = children</span><br><span class=\"line\">        children = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return new VNode(tag, children, text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vNode = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">const root = document.querySelector(&apos;#root&apos;)</span><br><span class=\"line\">root.appendChild(vNode.render())</span><br></pre></td></tr></table></figure>\n<p>通过上述代码，我们构建了一个简单的虚拟 DOM 树，可以通过它构建一个真正的 DOM 树，渲染到页面中<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-762ab26eabd2e04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>精髓：通过对比新旧虚拟 DOM 树，其原生对象判断页面增删改查了哪些部分，而后单独渲染差异部分。没有这个 patchElement 就失去了虚拟 DOM 的意义，和原始 DOM 效果无异了</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function patchElement(parent, newVNode, oldVNode, index = 0) &#123;</span><br><span class=\"line\">    if (!oldVNode) &#123;</span><br><span class=\"line\">        parent.appendChild(newVNode.render())</span><br><span class=\"line\">    &#125; else if (!newVNode) &#123;</span><br><span class=\"line\">        parent.removeChild(parent.childNodes[index])</span><br><span class=\"line\">    &#125; else if (newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) &#123;</span><br><span class=\"line\">        parent.replaceChild(newVNode.render(), parent.childNodes[index])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; newVNode.children.length || i &lt; oldVNode.children.length; i++) &#123;</span><br><span class=\"line\">            patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，上述只是简单的算法判断逻辑，但是也能让我们理解其相应过程和原理。</p>\n<p>整个状态变更的过程如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 构建虚拟DOM</span><br><span class=\"line\">let vNode = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">// 3. 生成新的虚拟DOM</span><br><span class=\"line\">let vNode1 = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)]),</span><br><span class=\"line\">    v(&apos;p&apos;, [v(&apos;#text&apos;, &apos;upload&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">// 2. 通过虚拟DOM构建真正的DOM</span><br><span class=\"line\">const root = document.querySelector(&apos;#root&apos;)</span><br><span class=\"line\">patchElement(root, vNode)</span><br><span class=\"line\">var n = 0</span><br><span class=\"line\">// 4. 比较两次虚拟DOM树的不同，在真正的DOM元素上应用变更</span><br><span class=\"line\">document.querySelector(&apos;.btn&apos;).onclick = function () &#123;</span><br><span class=\"line\">    if (n % 2 == 0) &#123;</span><br><span class=\"line\">        patchElement(root, vNode1, vNode)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        patchElement(root, vNode, vNode1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n += 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本文仅供个人学习使用</p>\n<hr>\n<p>主要参考：<a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"noopener\">深度剖析：如何实现一个 Virtual DOM 算法</a></p>\n"},{"title":"HTTP 学习之 Cookie","date":"2018-09-16T10:43:31.000Z","_content":"## Cookie：\n今天我们要说的当然不是甜品，而是在 HTTP 协议中使用到的 Cookie 知识\n`HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。`\n\n我们知道，服务器和客户端（浏览器）之间通过 HTTP 发送请求和响应来交流。\n但是 HTTP 是[无状态协议](https://en.wikipedia.org/wiki/Stateless_protocol)：这样做当然能够减少服务器负担，服务器不必记录每一次请求和响应的状态，但这严重阻碍了[交互式Web应用程序](https://zh.wikipedia.org/wiki/%E4%BA%A4%E4%BA%92%E5%BC%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F \"交互式Web应用程序\")的实现。\n\n**所以就有了 Cookie 技术：在请求和响应的报文中写入 Cookie 信息来控制客户端状态。**\n- 服务器通过 Set-Cookie 响应头设置 Cookie\n- 浏览器得到 Cookie 之后，每次请求都要带上 Cookie\n- 服务器发现并读取 Cookie 就知道对应客户端的状态信息\n\nCookie主要用于以下三个方面：\n- 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n- 个性化设置（如用户自定义设置、主题等）\n- 浏览器行为跟踪（如跟踪分析用户行为等）\n\n**通过 HTTP 协议和 Cookie 技术的协同作用，服务器与客户端之间就可以既快速（HTTP 无状态）又可控（Cookie 有状态）得请求和响应并交互了。\n当然，由于 Cookie 的安全性等问题，有了 Session（服务器的一小块内存）本文不涉及**\n\n## 在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 [API 详情](https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value)\n```\nresponse.setHeader('Set-Cookie',`sign_in_email = ${email}`)\n```\n(这是我写的关于登录注册 demo 里登录请求成功的服务端响应 Cookie 内容部分，完整的代码有兴趣可以看我 [github](https://github.com/Adashuai5/node-demo/tree/master/cookie-demo)，有关 node.js 搭建简单的服务器的内容可以看我相关博客)\n\n如图当 1@ada.com 用户发送登录请求成功，服务器返回响应的响应头（Response Headers）内出现 Set - Cookie ![](https://upload-images.jianshu.io/upload_images/7094266-fdff2ea48f36c28e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)其他页面（只要是同源域名）都将带上 Cookie 信息（这里我们并没有设置其他内容）![](https://upload-images.jianshu.io/upload_images/7094266-341585400a01ecf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n设置多个 Cookies\n```\nresponse.setHeader('Set-Cookie', [`sign_in_email = ${email}`, 'language=javascript']);\n```\n在开发者工具里的 Application 界面里有 Cookies 我们可以随意设置其 cookie ![](http://upload-images.jianshu.io/upload_images/7094266-637c2da4867f4daf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## Set-Cookie 字段还可以附加 Cookie 的属性 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie)\n![常用属性](https://upload-images.jianshu.io/upload_images/7094266-479fc61fdf79ed54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**多个属性之间用 ; 连接，下面代码添加了 Secure 和 HttpOnly 属性**\n```\nresponse.setHeader('Set-Cookie',`sign_in_email = ${email};Secure;HttpOnly`)\n```\n**可以通过设置 Set-Cookie 的 Max-Age 属性 和 Expires 属性**\n以 node.js 为例\n```\nresponse.setHeader('Set-Cookie',' Max-Age=1000; Expires=Sun, 16 Sep 2018 10:05:35 GMT')\n```\n上面代码设置了响应头在1000秒后 cookie 失效，同时指定了 Expires 和Max-Age，那么Max-Age的值将优先生效\n\n关闭 session（会话）即可删除内存 Cookie；上述过期时间达到则会删除硬盘 Cookie，因此可以通过设置过期时间删除 Cookie\n我们还可以通过手动清除浏览器 Cookie 及缓存删除 cookie\n\n**相关内容可以参考\n[Cookie 的属性](http://javascript.ruanyifeng.com/bom/cookie.html#toc4)\n[HTTP Cookie](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies)\n[Cookie-wikipedia](https://zh.wikipedia.org/wiki/Cookie)\n同时这也是本文参考内容，另外还参考了 《图解HTTP》相关章节**\n\n---\n本文仅供个人学习使用","source":"_posts/HTTP-学习之-Cookie.md","raw":"---\ntitle: HTTP 学习之 Cookie\ndate: 2018-09-16 18:43:31\ntags:\n---\n## Cookie：\n今天我们要说的当然不是甜品，而是在 HTTP 协议中使用到的 Cookie 知识\n`HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。`\n\n我们知道，服务器和客户端（浏览器）之间通过 HTTP 发送请求和响应来交流。\n但是 HTTP 是[无状态协议](https://en.wikipedia.org/wiki/Stateless_protocol)：这样做当然能够减少服务器负担，服务器不必记录每一次请求和响应的状态，但这严重阻碍了[交互式Web应用程序](https://zh.wikipedia.org/wiki/%E4%BA%A4%E4%BA%92%E5%BC%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F \"交互式Web应用程序\")的实现。\n\n**所以就有了 Cookie 技术：在请求和响应的报文中写入 Cookie 信息来控制客户端状态。**\n- 服务器通过 Set-Cookie 响应头设置 Cookie\n- 浏览器得到 Cookie 之后，每次请求都要带上 Cookie\n- 服务器发现并读取 Cookie 就知道对应客户端的状态信息\n\nCookie主要用于以下三个方面：\n- 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n- 个性化设置（如用户自定义设置、主题等）\n- 浏览器行为跟踪（如跟踪分析用户行为等）\n\n**通过 HTTP 协议和 Cookie 技术的协同作用，服务器与客户端之间就可以既快速（HTTP 无状态）又可控（Cookie 有状态）得请求和响应并交互了。\n当然，由于 Cookie 的安全性等问题，有了 Session（服务器的一小块内存）本文不涉及**\n\n## 在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 [API 详情](https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value)\n```\nresponse.setHeader('Set-Cookie',`sign_in_email = ${email}`)\n```\n(这是我写的关于登录注册 demo 里登录请求成功的服务端响应 Cookie 内容部分，完整的代码有兴趣可以看我 [github](https://github.com/Adashuai5/node-demo/tree/master/cookie-demo)，有关 node.js 搭建简单的服务器的内容可以看我相关博客)\n\n如图当 1@ada.com 用户发送登录请求成功，服务器返回响应的响应头（Response Headers）内出现 Set - Cookie ![](https://upload-images.jianshu.io/upload_images/7094266-fdff2ea48f36c28e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)其他页面（只要是同源域名）都将带上 Cookie 信息（这里我们并没有设置其他内容）![](https://upload-images.jianshu.io/upload_images/7094266-341585400a01ecf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n设置多个 Cookies\n```\nresponse.setHeader('Set-Cookie', [`sign_in_email = ${email}`, 'language=javascript']);\n```\n在开发者工具里的 Application 界面里有 Cookies 我们可以随意设置其 cookie ![](http://upload-images.jianshu.io/upload_images/7094266-637c2da4867f4daf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## Set-Cookie 字段还可以附加 Cookie 的属性 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie)\n![常用属性](https://upload-images.jianshu.io/upload_images/7094266-479fc61fdf79ed54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**多个属性之间用 ; 连接，下面代码添加了 Secure 和 HttpOnly 属性**\n```\nresponse.setHeader('Set-Cookie',`sign_in_email = ${email};Secure;HttpOnly`)\n```\n**可以通过设置 Set-Cookie 的 Max-Age 属性 和 Expires 属性**\n以 node.js 为例\n```\nresponse.setHeader('Set-Cookie',' Max-Age=1000; Expires=Sun, 16 Sep 2018 10:05:35 GMT')\n```\n上面代码设置了响应头在1000秒后 cookie 失效，同时指定了 Expires 和Max-Age，那么Max-Age的值将优先生效\n\n关闭 session（会话）即可删除内存 Cookie；上述过期时间达到则会删除硬盘 Cookie，因此可以通过设置过期时间删除 Cookie\n我们还可以通过手动清除浏览器 Cookie 及缓存删除 cookie\n\n**相关内容可以参考\n[Cookie 的属性](http://javascript.ruanyifeng.com/bom/cookie.html#toc4)\n[HTTP Cookie](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies)\n[Cookie-wikipedia](https://zh.wikipedia.org/wiki/Cookie)\n同时这也是本文参考内容，另外还参考了 《图解HTTP》相关章节**\n\n---\n本文仅供个人学习使用","slug":"HTTP-学习之-Cookie","published":1,"updated":"2019-01-18T14:47:55.108Z","_id":"cjr25rfzn0000uw99ars7dtis","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Cookie：\"><a href=\"#Cookie：\" class=\"headerlink\" title=\"Cookie：\"></a>Cookie：</h2><p>今天我们要说的当然不是甜品，而是在 HTTP 协议中使用到的 Cookie 知识<br><code>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</code></p>\n<p>我们知道，服务器和客户端（浏览器）之间通过 HTTP 发送请求和响应来交流。<br>但是 HTTP 是<a href=\"https://en.wikipedia.org/wiki/Stateless_protocol\" target=\"_blank\" rel=\"noopener\">无状态协议</a>：这样做当然能够减少服务器负担，服务器不必记录每一次请求和响应的状态，但这严重阻碍了<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%A4%E4%BA%92%E5%BC%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\" title=\"交互式Web应用程序\" target=\"_blank\" rel=\"noopener\">交互式Web应用程序</a>的实现。</p>\n<p><strong>所以就有了 Cookie 技术：在请求和响应的报文中写入 Cookie 信息来控制客户端状态。</strong></p>\n<ul>\n<li>服务器通过 Set-Cookie 响应头设置 Cookie</li>\n<li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li>\n<li>服务器发现并读取 Cookie 就知道对应客户端的状态信息</li>\n</ul>\n<p>Cookie主要用于以下三个方面：</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<p><strong>通过 HTTP 协议和 Cookie 技术的协同作用，服务器与客户端之间就可以既快速（HTTP 无状态）又可控（Cookie 有状态）得请求和响应并交互了。<br>当然，由于 Cookie 的安全性等问题，有了 Session（服务器的一小块内存）本文不涉及</strong></p>\n<h2 id=\"在-node-js-服务端中设置响应头的-Set-Cookie（以用户的-email-为例）代码示例-API-详情\"><a href=\"#在-node-js-服务端中设置响应头的-Set-Cookie（以用户的-email-为例）代码示例-API-详情\" class=\"headerlink\" title=\"在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 API 详情\"></a>在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 <a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value\" target=\"_blank\" rel=\"noopener\">API 详情</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,`sign_in_email = $&#123;email&#125;`)</span><br></pre></td></tr></table></figure>\n<p>(这是我写的关于登录注册 demo 里登录请求成功的服务端响应 Cookie 内容部分，完整的代码有兴趣可以看我 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/cookie-demo\" target=\"_blank\" rel=\"noopener\">github</a>，有关 node.js 搭建简单的服务器的内容可以看我相关博客)</p>\n<p>如图当 <a href=\"mailto:1@ada.com\" target=\"_blank\" rel=\"noopener\">1@ada.com</a> 用户发送登录请求成功，服务器返回响应的响应头（Response Headers）内出现 Set - Cookie <img src=\"https://upload-images.jianshu.io/upload_images/7094266-fdff2ea48f36c28e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">其他页面（只要是同源域名）都将带上 Cookie 信息（这里我们并没有设置其他内容）<img src=\"https://upload-images.jianshu.io/upload_images/7094266-341585400a01ecf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>设置多个 Cookies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;, [`sign_in_email = $&#123;email&#125;`, &apos;language=javascript&apos;]);</span><br></pre></td></tr></table></figure></p>\n<p>在开发者工具里的 Application 界面里有 Cookies 我们可以随意设置其 cookie <img src=\"http://upload-images.jianshu.io/upload_images/7094266-637c2da4867f4daf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"Set-Cookie-字段还可以附加-Cookie-的属性-MDN\"><a href=\"#Set-Cookie-字段还可以附加-Cookie-的属性-MDN\" class=\"headerlink\" title=\"Set-Cookie 字段还可以附加 Cookie 的属性 MDN\"></a>Set-Cookie 字段还可以附加 Cookie 的属性 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie\" target=\"_blank\" rel=\"noopener\">MDN</a></h2><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-479fc61fdf79ed54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"常用属性\"><br><strong>多个属性之间用 ; 连接，下面代码添加了 Secure 和 HttpOnly 属性</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,`sign_in_email = $&#123;email&#125;;Secure;HttpOnly`)</span><br></pre></td></tr></table></figure></p>\n<p><strong>可以通过设置 Set-Cookie 的 Max-Age 属性 和 Expires 属性</strong><br>以 node.js 为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,&apos; Max-Age=1000; Expires=Sun, 16 Sep 2018 10:05:35 GMT&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>上面代码设置了响应头在1000秒后 cookie 失效，同时指定了 Expires 和Max-Age，那么Max-Age的值将优先生效</p>\n<p>关闭 session（会话）即可删除内存 Cookie；上述过期时间达到则会删除硬盘 Cookie，因此可以通过设置过期时间删除 Cookie<br>我们还可以通过手动清除浏览器 Cookie 及缓存删除 cookie</p>\n<p><strong>相关内容可以参考<br><a href=\"http://javascript.ruanyifeng.com/bom/cookie.html#toc4\" target=\"_blank\" rel=\"noopener\">Cookie 的属性</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">HTTP Cookie</a><br><a href=\"https://zh.wikipedia.org/wiki/Cookie\" target=\"_blank\" rel=\"noopener\">Cookie-wikipedia</a><br>同时这也是本文参考内容，另外还参考了 《图解HTTP》相关章节</strong></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Cookie：\"><a href=\"#Cookie：\" class=\"headerlink\" title=\"Cookie：\"></a>Cookie：</h2><p>今天我们要说的当然不是甜品，而是在 HTTP 协议中使用到的 Cookie 知识<br><code>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</code></p>\n<p>我们知道，服务器和客户端（浏览器）之间通过 HTTP 发送请求和响应来交流。<br>但是 HTTP 是<a href=\"https://en.wikipedia.org/wiki/Stateless_protocol\" target=\"_blank\" rel=\"noopener\">无状态协议</a>：这样做当然能够减少服务器负担，服务器不必记录每一次请求和响应的状态，但这严重阻碍了<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%A4%E4%BA%92%E5%BC%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\" title=\"交互式Web应用程序\" target=\"_blank\" rel=\"noopener\">交互式Web应用程序</a>的实现。</p>\n<p><strong>所以就有了 Cookie 技术：在请求和响应的报文中写入 Cookie 信息来控制客户端状态。</strong></p>\n<ul>\n<li>服务器通过 Set-Cookie 响应头设置 Cookie</li>\n<li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li>\n<li>服务器发现并读取 Cookie 就知道对应客户端的状态信息</li>\n</ul>\n<p>Cookie主要用于以下三个方面：</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<p><strong>通过 HTTP 协议和 Cookie 技术的协同作用，服务器与客户端之间就可以既快速（HTTP 无状态）又可控（Cookie 有状态）得请求和响应并交互了。<br>当然，由于 Cookie 的安全性等问题，有了 Session（服务器的一小块内存）本文不涉及</strong></p>\n<h2 id=\"在-node-js-服务端中设置响应头的-Set-Cookie（以用户的-email-为例）代码示例-API-详情\"><a href=\"#在-node-js-服务端中设置响应头的-Set-Cookie（以用户的-email-为例）代码示例-API-详情\" class=\"headerlink\" title=\"在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 API 详情\"></a>在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 <a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value\" target=\"_blank\" rel=\"noopener\">API 详情</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,`sign_in_email = $&#123;email&#125;`)</span><br></pre></td></tr></table></figure>\n<p>(这是我写的关于登录注册 demo 里登录请求成功的服务端响应 Cookie 内容部分，完整的代码有兴趣可以看我 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/cookie-demo\" target=\"_blank\" rel=\"noopener\">github</a>，有关 node.js 搭建简单的服务器的内容可以看我相关博客)</p>\n<p>如图当 <a href=\"mailto:1@ada.com\" target=\"_blank\" rel=\"noopener\">1@ada.com</a> 用户发送登录请求成功，服务器返回响应的响应头（Response Headers）内出现 Set - Cookie <img src=\"https://upload-images.jianshu.io/upload_images/7094266-fdff2ea48f36c28e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">其他页面（只要是同源域名）都将带上 Cookie 信息（这里我们并没有设置其他内容）<img src=\"https://upload-images.jianshu.io/upload_images/7094266-341585400a01ecf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>设置多个 Cookies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;, [`sign_in_email = $&#123;email&#125;`, &apos;language=javascript&apos;]);</span><br></pre></td></tr></table></figure></p>\n<p>在开发者工具里的 Application 界面里有 Cookies 我们可以随意设置其 cookie <img src=\"http://upload-images.jianshu.io/upload_images/7094266-637c2da4867f4daf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"Set-Cookie-字段还可以附加-Cookie-的属性-MDN\"><a href=\"#Set-Cookie-字段还可以附加-Cookie-的属性-MDN\" class=\"headerlink\" title=\"Set-Cookie 字段还可以附加 Cookie 的属性 MDN\"></a>Set-Cookie 字段还可以附加 Cookie 的属性 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie\" target=\"_blank\" rel=\"noopener\">MDN</a></h2><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-479fc61fdf79ed54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"常用属性\"><br><strong>多个属性之间用 ; 连接，下面代码添加了 Secure 和 HttpOnly 属性</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,`sign_in_email = $&#123;email&#125;;Secure;HttpOnly`)</span><br></pre></td></tr></table></figure></p>\n<p><strong>可以通过设置 Set-Cookie 的 Max-Age 属性 和 Expires 属性</strong><br>以 node.js 为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,&apos; Max-Age=1000; Expires=Sun, 16 Sep 2018 10:05:35 GMT&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>上面代码设置了响应头在1000秒后 cookie 失效，同时指定了 Expires 和Max-Age，那么Max-Age的值将优先生效</p>\n<p>关闭 session（会话）即可删除内存 Cookie；上述过期时间达到则会删除硬盘 Cookie，因此可以通过设置过期时间删除 Cookie<br>我们还可以通过手动清除浏览器 Cookie 及缓存删除 cookie</p>\n<p><strong>相关内容可以参考<br><a href=\"http://javascript.ruanyifeng.com/bom/cookie.html#toc4\" target=\"_blank\" rel=\"noopener\">Cookie 的属性</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">HTTP Cookie</a><br><a href=\"https://zh.wikipedia.org/wiki/Cookie\" target=\"_blank\" rel=\"noopener\">Cookie-wikipedia</a><br>同时这也是本文参考内容，另外还参考了 《图解HTTP》相关章节</strong></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n"},{"title":"CSS常用布局 续篇","date":"2018-09-10T02:32:52.000Z","_content":"几个月前初学 CSS布局，写了一篇关于 [CSS常用布局学习](https://www.jianshu.com/p/59c9477816b8) 的博客，介绍了一些传统的依靠 position 和 float 等实现简单的布局方式的例子，这些布局只能简单得实现基本功能，十分不便。\n今天，作为引申，我们用同样例子，来使用上篇中简单提到的 flex 布局的方案实现。与此同时，我将推荐最近学习的 grid 布局，它十分强大，可以方便得解决各种布局方案，且十分便于理解。\n### Flex 实现左中右布局\n\n主要是在父元素中使用以下代码\n```\ndisplay: flex;\nflex-direction:row;\n```\n相对于传统布局，是不是简便得多![Flex 左中右](https://upload-images.jianshu.io/upload_images/7094266-f0d2834c90f115a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### Flex 实现垂直居中\n```\ndisplay: flex;\njustify-content:center;\nalign-items:center;\n```\n![Flex 垂直居中](https://upload-images.jianshu.io/upload_images/7094266-42ece01a2af28519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到 flex 布局十分方便\n想要了解更多 flex 布局相关技巧可以阅读阮大大 [博客](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html) 当然你可以看 MDN\n\n前面介绍的都是一维布局，但是在复杂的二维布局方面，无疑是为解决布局而创建的 CSS 网格布局更为专业\n学习网格布局事实上是学习对应英文的过程，所以英语好真的很有优势\n### Grid 布局实现左中右\n虽然有点大材小用，但是我们是为了和前面的布局方法做对比\n你只需用两行代码\n```\ndisplay: grid;\ngrid-template-columns: 30% 40% 30%; \n```\ngrid 布局的代码更省，子元素不需要各自设定，直接在父元素上设定了![Grid 左中右](https://upload-images.jianshu.io/upload_images/7094266-beb5abb9ff73f97d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)当然这里的子元素要与对应的格子相配，即 30% 40% 30% 对应的是 div.container 里面的顺序\n### 网格布局\n这里的 fr 为分数单位\n```\ndisplay: grid;\ngrid-template-columns: 1fr 1fr 1fr; // 3列均分\ngrid-template-rows: 1fr 1fr 1fr; // 3行均分\n```\n通过上面代码实现了一个3*3的网格\n可以通过下面代码选择对应网格，并添加属性\n```\ngrid-column: 1; // or 2 or 3\ngrid-row: 1; // or 2 or 3\n```\n![网格布局示例](https://upload-images.jianshu.io/upload_images/7094266-fe08051eb5cf5c1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n以上只是 flex 布局和 grid 布局的小例子和基本用法\n想要了解更多 grid 相关内容可以看这篇 [博客](https://www.jianshu.com/p/d183265a8dad)\n通过 flex 和 grid 布局配合使用，基本上可以解决所有 CSS 布局问题\n\n本文仅供个人学习使用","source":"_posts/CSS常用布局-续篇.md","raw":"---\ntitle: CSS常用布局 续篇\ndate: 2018-09-10 10:32:52\ntags:\n---\n几个月前初学 CSS布局，写了一篇关于 [CSS常用布局学习](https://www.jianshu.com/p/59c9477816b8) 的博客，介绍了一些传统的依靠 position 和 float 等实现简单的布局方式的例子，这些布局只能简单得实现基本功能，十分不便。\n今天，作为引申，我们用同样例子，来使用上篇中简单提到的 flex 布局的方案实现。与此同时，我将推荐最近学习的 grid 布局，它十分强大，可以方便得解决各种布局方案，且十分便于理解。\n### Flex 实现左中右布局\n\n主要是在父元素中使用以下代码\n```\ndisplay: flex;\nflex-direction:row;\n```\n相对于传统布局，是不是简便得多![Flex 左中右](https://upload-images.jianshu.io/upload_images/7094266-f0d2834c90f115a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### Flex 实现垂直居中\n```\ndisplay: flex;\njustify-content:center;\nalign-items:center;\n```\n![Flex 垂直居中](https://upload-images.jianshu.io/upload_images/7094266-42ece01a2af28519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到 flex 布局十分方便\n想要了解更多 flex 布局相关技巧可以阅读阮大大 [博客](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html) 当然你可以看 MDN\n\n前面介绍的都是一维布局，但是在复杂的二维布局方面，无疑是为解决布局而创建的 CSS 网格布局更为专业\n学习网格布局事实上是学习对应英文的过程，所以英语好真的很有优势\n### Grid 布局实现左中右\n虽然有点大材小用，但是我们是为了和前面的布局方法做对比\n你只需用两行代码\n```\ndisplay: grid;\ngrid-template-columns: 30% 40% 30%; \n```\ngrid 布局的代码更省，子元素不需要各自设定，直接在父元素上设定了![Grid 左中右](https://upload-images.jianshu.io/upload_images/7094266-beb5abb9ff73f97d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)当然这里的子元素要与对应的格子相配，即 30% 40% 30% 对应的是 div.container 里面的顺序\n### 网格布局\n这里的 fr 为分数单位\n```\ndisplay: grid;\ngrid-template-columns: 1fr 1fr 1fr; // 3列均分\ngrid-template-rows: 1fr 1fr 1fr; // 3行均分\n```\n通过上面代码实现了一个3*3的网格\n可以通过下面代码选择对应网格，并添加属性\n```\ngrid-column: 1; // or 2 or 3\ngrid-row: 1; // or 2 or 3\n```\n![网格布局示例](https://upload-images.jianshu.io/upload_images/7094266-fe08051eb5cf5c1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n以上只是 flex 布局和 grid 布局的小例子和基本用法\n想要了解更多 grid 相关内容可以看这篇 [博客](https://www.jianshu.com/p/d183265a8dad)\n通过 flex 和 grid 布局配合使用，基本上可以解决所有 CSS 布局问题\n\n本文仅供个人学习使用","slug":"CSS常用布局-续篇","published":1,"updated":"2019-01-18T14:50:00.936Z","_id":"cjr25t5zt0000es99icnbip69","comments":1,"layout":"post","photos":[],"link":"","content":"<p>几个月前初学 CSS布局，写了一篇关于 <a href=\"https://www.jianshu.com/p/59c9477816b8\" target=\"_blank\" rel=\"noopener\">CSS常用布局学习</a> 的博客，介绍了一些传统的依靠 position 和 float 等实现简单的布局方式的例子，这些布局只能简单得实现基本功能，十分不便。<br>今天，作为引申，我们用同样例子，来使用上篇中简单提到的 flex 布局的方案实现。与此同时，我将推荐最近学习的 grid 布局，它十分强大，可以方便得解决各种布局方案，且十分便于理解。</p>\n<h3 id=\"Flex-实现左中右布局\"><a href=\"#Flex-实现左中右布局\" class=\"headerlink\" title=\"Flex 实现左中右布局\"></a>Flex 实现左中右布局</h3><p>主要是在父元素中使用以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">flex-direction:row;</span><br></pre></td></tr></table></figure></p>\n<p>相对于传统布局，是不是简便得多<img src=\"https://upload-images.jianshu.io/upload_images/7094266-f0d2834c90f115a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Flex 左中右\"></p>\n<h3 id=\"Flex-实现垂直居中\"><a href=\"#Flex-实现垂直居中\" class=\"headerlink\" title=\"Flex 实现垂直居中\"></a>Flex 实现垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">justify-content:center;</span><br><span class=\"line\">align-items:center;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-42ece01a2af28519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Flex 垂直居中\"></p>\n<p>可以看到 flex 布局十分方便<br>想要了解更多 flex 布局相关技巧可以阅读阮大大 <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">博客</a> 当然你可以看 MDN</p>\n<p>前面介绍的都是一维布局，但是在复杂的二维布局方面，无疑是为解决布局而创建的 CSS 网格布局更为专业<br>学习网格布局事实上是学习对应英文的过程，所以英语好真的很有优势</p>\n<h3 id=\"Grid-布局实现左中右\"><a href=\"#Grid-布局实现左中右\" class=\"headerlink\" title=\"Grid 布局实现左中右\"></a>Grid 布局实现左中右</h3><p>虽然有点大材小用，但是我们是为了和前面的布局方法做对比<br>你只需用两行代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: grid;</span><br><span class=\"line\">grid-template-columns: 30% 40% 30%;</span><br></pre></td></tr></table></figure></p>\n<p>grid 布局的代码更省，子元素不需要各自设定，直接在父元素上设定了<img src=\"https://upload-images.jianshu.io/upload_images/7094266-beb5abb9ff73f97d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Grid 左中右\">当然这里的子元素要与对应的格子相配，即 30% 40% 30% 对应的是 div.container 里面的顺序</p>\n<h3 id=\"网格布局\"><a href=\"#网格布局\" class=\"headerlink\" title=\"网格布局\"></a>网格布局</h3><p>这里的 fr 为分数单位<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: grid;</span><br><span class=\"line\">grid-template-columns: 1fr 1fr 1fr; // 3列均分</span><br><span class=\"line\">grid-template-rows: 1fr 1fr 1fr; // 3行均分</span><br></pre></td></tr></table></figure></p>\n<p>通过上面代码实现了一个3*3的网格<br>可以通过下面代码选择对应网格，并添加属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid-column: 1; // or 2 or 3</span><br><span class=\"line\">grid-row: 1; // or 2 or 3</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fe08051eb5cf5c1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网格布局示例\"></p>\n<hr>\n<p>以上只是 flex 布局和 grid 布局的小例子和基本用法<br>想要了解更多 grid 相关内容可以看这篇 <a href=\"https://www.jianshu.com/p/d183265a8dad\" target=\"_blank\" rel=\"noopener\">博客</a><br>通过 flex 和 grid 布局配合使用，基本上可以解决所有 CSS 布局问题</p>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>几个月前初学 CSS布局，写了一篇关于 <a href=\"https://www.jianshu.com/p/59c9477816b8\" target=\"_blank\" rel=\"noopener\">CSS常用布局学习</a> 的博客，介绍了一些传统的依靠 position 和 float 等实现简单的布局方式的例子，这些布局只能简单得实现基本功能，十分不便。<br>今天，作为引申，我们用同样例子，来使用上篇中简单提到的 flex 布局的方案实现。与此同时，我将推荐最近学习的 grid 布局，它十分强大，可以方便得解决各种布局方案，且十分便于理解。</p>\n<h3 id=\"Flex-实现左中右布局\"><a href=\"#Flex-实现左中右布局\" class=\"headerlink\" title=\"Flex 实现左中右布局\"></a>Flex 实现左中右布局</h3><p>主要是在父元素中使用以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">flex-direction:row;</span><br></pre></td></tr></table></figure></p>\n<p>相对于传统布局，是不是简便得多<img src=\"https://upload-images.jianshu.io/upload_images/7094266-f0d2834c90f115a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Flex 左中右\"></p>\n<h3 id=\"Flex-实现垂直居中\"><a href=\"#Flex-实现垂直居中\" class=\"headerlink\" title=\"Flex 实现垂直居中\"></a>Flex 实现垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">justify-content:center;</span><br><span class=\"line\">align-items:center;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-42ece01a2af28519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Flex 垂直居中\"></p>\n<p>可以看到 flex 布局十分方便<br>想要了解更多 flex 布局相关技巧可以阅读阮大大 <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">博客</a> 当然你可以看 MDN</p>\n<p>前面介绍的都是一维布局，但是在复杂的二维布局方面，无疑是为解决布局而创建的 CSS 网格布局更为专业<br>学习网格布局事实上是学习对应英文的过程，所以英语好真的很有优势</p>\n<h3 id=\"Grid-布局实现左中右\"><a href=\"#Grid-布局实现左中右\" class=\"headerlink\" title=\"Grid 布局实现左中右\"></a>Grid 布局实现左中右</h3><p>虽然有点大材小用，但是我们是为了和前面的布局方法做对比<br>你只需用两行代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: grid;</span><br><span class=\"line\">grid-template-columns: 30% 40% 30%;</span><br></pre></td></tr></table></figure></p>\n<p>grid 布局的代码更省，子元素不需要各自设定，直接在父元素上设定了<img src=\"https://upload-images.jianshu.io/upload_images/7094266-beb5abb9ff73f97d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Grid 左中右\">当然这里的子元素要与对应的格子相配，即 30% 40% 30% 对应的是 div.container 里面的顺序</p>\n<h3 id=\"网格布局\"><a href=\"#网格布局\" class=\"headerlink\" title=\"网格布局\"></a>网格布局</h3><p>这里的 fr 为分数单位<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: grid;</span><br><span class=\"line\">grid-template-columns: 1fr 1fr 1fr; // 3列均分</span><br><span class=\"line\">grid-template-rows: 1fr 1fr 1fr; // 3行均分</span><br></pre></td></tr></table></figure></p>\n<p>通过上面代码实现了一个3*3的网格<br>可以通过下面代码选择对应网格，并添加属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid-column: 1; // or 2 or 3</span><br><span class=\"line\">grid-row: 1; // or 2 or 3</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fe08051eb5cf5c1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网格布局示例\"></p>\n<hr>\n<p>以上只是 flex 布局和 grid 布局的小例子和基本用法<br>想要了解更多 grid 相关内容可以看这篇 <a href=\"https://www.jianshu.com/p/d183265a8dad\" target=\"_blank\" rel=\"noopener\">博客</a><br>通过 flex 和 grid 布局配合使用，基本上可以解决所有 CSS 布局问题</p>\n<p>本文仅供个人学习使用</p>\n"},{"title":"搞懂这些 你就理解 this 了","date":"2018-08-26T16:48:41.000Z","_content":"新人推荐先看阮大大的书的：[相关章节](https://wangdoc.com/javascript/oop/this.html#%E6%B6%B5%E4%B9%89)\n有关 this 的理解，方老师的这篇 [文章](https://zhuanlan.zhihu.com/p/23804247) 已经很完美了\n\n**你应该已经知道并熟记 this 是 call 的第一个参数**\n下面是一些 this 的特殊情况\n```\n// 例 1\nbutton.onclick = function f1(){\n    console.log(this) // 触发事件的元素。  button\n}\n```\n1 结果：\nf1.call(???)\nthis 是什么？去看 onclick 的源码呀 -> 做不到\nMDN 的开发者知道 onclick 的源码\nMDN 的开发者写了文档\n看文档呀\n```\n// 例 2\nbutton.addEventListener('click', function(){\n    console.log(this) // 该元素的引用 button\n}\n```\n2 结果：\n去看 addEventListener 的源码呀 -> 做不到\nMDN 的开发者知道 addEventListener 的源码\nMDN 的开发者写了文档\n看文档呀\n```\n// 例 3\n$('ul').on('click', 'li' /*selector*/, function(){\n    console.log(this) //this 则代表了与 selector 相匹配的元素。\n    // li 元素\n})\n```\n3 结果：\n去看 on 的源码呀 -> 做不到\njQuery 的开发者知道 onclick 的源码\njQuery 的开发者写了文档\n看文档呀\n\n**特例：我可以传一个 this 给它**\n```\nbutton.onclick.call({name: 'ada'})\n```\n由于 this 是 call 的第一个参数\n这样子 button.onclick 的 this 就变成了 {name:'ada'}\n\n**终极例题**\n理解下面例子，基本上 this 就明白得差不多了\n```\nfunction X(){\n    return object = {\n        name: 'object',\n        options: null,\n        f1(x){ \n            // 3 下面的 this ？不就是 f1.call()的 this，就是 2 里面的 this：object\n            this.options = x // 4 这里 x 是 options\n            this.f2() // 5 this.f2.call() 显然这里 this 也是 object\n        },\n        f2(){\n            this.options.f2.call(this) // 6 这句代码4告诉我们是 options.f2.call(this) 我们把 this：object 传给了 options （特例）\n        }\n    }\n}\n\nvar options = {\n    name: 'options',\n    f1(){},\n    f2(){\n        console.log(this) // 问 this 是啥 ? // 7  传过来的 object 啊\n    }\n}\n\nvar x = X() // 1 这里的 x 是啥？X() return 的 object\nx.f1(options) // 2 x.f1.call(x,options) 显然这里 this 就是 x === object\n```\n问题：上面代码打印的 this 是什么？\n正确答案：object ，思路已经在注释里，按数字顺序理解\n\n---\n\n参考：\n[你怎么还没搞懂 this？](https://zhuanlan.zhihu.com/p/25991271)","source":"_posts/搞懂这些-你就理解-this-了.md","raw":"---\ntitle: 搞懂这些 你就理解 this 了\ndate: 2018-08-27 00:48:41\ntags:\n---\n新人推荐先看阮大大的书的：[相关章节](https://wangdoc.com/javascript/oop/this.html#%E6%B6%B5%E4%B9%89)\n有关 this 的理解，方老师的这篇 [文章](https://zhuanlan.zhihu.com/p/23804247) 已经很完美了\n\n**你应该已经知道并熟记 this 是 call 的第一个参数**\n下面是一些 this 的特殊情况\n```\n// 例 1\nbutton.onclick = function f1(){\n    console.log(this) // 触发事件的元素。  button\n}\n```\n1 结果：\nf1.call(???)\nthis 是什么？去看 onclick 的源码呀 -> 做不到\nMDN 的开发者知道 onclick 的源码\nMDN 的开发者写了文档\n看文档呀\n```\n// 例 2\nbutton.addEventListener('click', function(){\n    console.log(this) // 该元素的引用 button\n}\n```\n2 结果：\n去看 addEventListener 的源码呀 -> 做不到\nMDN 的开发者知道 addEventListener 的源码\nMDN 的开发者写了文档\n看文档呀\n```\n// 例 3\n$('ul').on('click', 'li' /*selector*/, function(){\n    console.log(this) //this 则代表了与 selector 相匹配的元素。\n    // li 元素\n})\n```\n3 结果：\n去看 on 的源码呀 -> 做不到\njQuery 的开发者知道 onclick 的源码\njQuery 的开发者写了文档\n看文档呀\n\n**特例：我可以传一个 this 给它**\n```\nbutton.onclick.call({name: 'ada'})\n```\n由于 this 是 call 的第一个参数\n这样子 button.onclick 的 this 就变成了 {name:'ada'}\n\n**终极例题**\n理解下面例子，基本上 this 就明白得差不多了\n```\nfunction X(){\n    return object = {\n        name: 'object',\n        options: null,\n        f1(x){ \n            // 3 下面的 this ？不就是 f1.call()的 this，就是 2 里面的 this：object\n            this.options = x // 4 这里 x 是 options\n            this.f2() // 5 this.f2.call() 显然这里 this 也是 object\n        },\n        f2(){\n            this.options.f2.call(this) // 6 这句代码4告诉我们是 options.f2.call(this) 我们把 this：object 传给了 options （特例）\n        }\n    }\n}\n\nvar options = {\n    name: 'options',\n    f1(){},\n    f2(){\n        console.log(this) // 问 this 是啥 ? // 7  传过来的 object 啊\n    }\n}\n\nvar x = X() // 1 这里的 x 是啥？X() return 的 object\nx.f1(options) // 2 x.f1.call(x,options) 显然这里 this 就是 x === object\n```\n问题：上面代码打印的 this 是什么？\n正确答案：object ，思路已经在注释里，按数字顺序理解\n\n---\n\n参考：\n[你怎么还没搞懂 this？](https://zhuanlan.zhihu.com/p/25991271)","slug":"搞懂这些-你就理解-this-了","published":1,"updated":"2019-01-18T14:52:15.545Z","_id":"cjr25wskj0000c099xc4pldv9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>新人推荐先看阮大大的书的：<a href=\"https://wangdoc.com/javascript/oop/this.html#%E6%B6%B5%E4%B9%89\" target=\"_blank\" rel=\"noopener\">相关章节</a><br>有关 this 的理解，方老师的这篇 <a href=\"https://zhuanlan.zhihu.com/p/23804247\" target=\"_blank\" rel=\"noopener\">文章</a> 已经很完美了</p>\n<p><strong>你应该已经知道并熟记 this 是 call 的第一个参数</strong><br>下面是一些 this 的特殊情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 1</span><br><span class=\"line\">button.onclick = function f1()&#123;</span><br><span class=\"line\">    console.log(this) // 触发事件的元素。  button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>1 结果：<br>f1.call(???)<br>this 是什么？去看 onclick 的源码呀 -&gt; 做不到<br>MDN 的开发者知道 onclick 的源码<br>MDN 的开发者写了文档<br>看文档呀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 2</span><br><span class=\"line\">button.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class=\"line\">    console.log(this) // 该元素的引用 button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2 结果：<br>去看 addEventListener 的源码呀 -&gt; 做不到<br>MDN 的开发者知道 addEventListener 的源码<br>MDN 的开发者写了文档<br>看文档呀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 3</span><br><span class=\"line\">$(&apos;ul&apos;).on(&apos;click&apos;, &apos;li&apos; /*selector*/, function()&#123;</span><br><span class=\"line\">    console.log(this) //this 则代表了与 selector 相匹配的元素。</span><br><span class=\"line\">    // li 元素</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3 结果：<br>去看 on 的源码呀 -&gt; 做不到<br>jQuery 的开发者知道 onclick 的源码<br>jQuery 的开发者写了文档<br>看文档呀</p>\n<p><strong>特例：我可以传一个 this 给它</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.onclick.call(&#123;name: &apos;ada&apos;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>由于 this 是 call 的第一个参数<br>这样子 button.onclick 的 this 就变成了 {name:’ada’}</p>\n<p><strong>终极例题</strong><br>理解下面例子，基本上 this 就明白得差不多了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function X()&#123;</span><br><span class=\"line\">    return object = &#123;</span><br><span class=\"line\">        name: &apos;object&apos;,</span><br><span class=\"line\">        options: null,</span><br><span class=\"line\">        f1(x)&#123; </span><br><span class=\"line\">            // 3 下面的 this ？不就是 f1.call()的 this，就是 2 里面的 this：object</span><br><span class=\"line\">            this.options = x // 4 这里 x 是 options</span><br><span class=\"line\">            this.f2() // 5 this.f2.call() 显然这里 this 也是 object</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        f2()&#123;</span><br><span class=\"line\">            this.options.f2.call(this) // 6 这句代码4告诉我们是 options.f2.call(this) 我们把 this：object 传给了 options （特例）</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">    name: &apos;options&apos;,</span><br><span class=\"line\">    f1()&#123;&#125;,</span><br><span class=\"line\">    f2()&#123;</span><br><span class=\"line\">        console.log(this) // 问 this 是啥 ? // 7  传过来的 object 啊</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var x = X() // 1 这里的 x 是啥？X() return 的 object</span><br><span class=\"line\">x.f1(options) // 2 x.f1.call(x,options) 显然这里 this 就是 x === object</span><br></pre></td></tr></table></figure></p>\n<p>问题：上面代码打印的 this 是什么？<br>正确答案：object ，思路已经在注释里，按数字顺序理解</p>\n<hr>\n<p>参考：<br><a href=\"https://zhuanlan.zhihu.com/p/25991271\" target=\"_blank\" rel=\"noopener\">你怎么还没搞懂 this？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>新人推荐先看阮大大的书的：<a href=\"https://wangdoc.com/javascript/oop/this.html#%E6%B6%B5%E4%B9%89\" target=\"_blank\" rel=\"noopener\">相关章节</a><br>有关 this 的理解，方老师的这篇 <a href=\"https://zhuanlan.zhihu.com/p/23804247\" target=\"_blank\" rel=\"noopener\">文章</a> 已经很完美了</p>\n<p><strong>你应该已经知道并熟记 this 是 call 的第一个参数</strong><br>下面是一些 this 的特殊情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 1</span><br><span class=\"line\">button.onclick = function f1()&#123;</span><br><span class=\"line\">    console.log(this) // 触发事件的元素。  button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>1 结果：<br>f1.call(???)<br>this 是什么？去看 onclick 的源码呀 -&gt; 做不到<br>MDN 的开发者知道 onclick 的源码<br>MDN 的开发者写了文档<br>看文档呀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 2</span><br><span class=\"line\">button.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class=\"line\">    console.log(this) // 该元素的引用 button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2 结果：<br>去看 addEventListener 的源码呀 -&gt; 做不到<br>MDN 的开发者知道 addEventListener 的源码<br>MDN 的开发者写了文档<br>看文档呀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 3</span><br><span class=\"line\">$(&apos;ul&apos;).on(&apos;click&apos;, &apos;li&apos; /*selector*/, function()&#123;</span><br><span class=\"line\">    console.log(this) //this 则代表了与 selector 相匹配的元素。</span><br><span class=\"line\">    // li 元素</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3 结果：<br>去看 on 的源码呀 -&gt; 做不到<br>jQuery 的开发者知道 onclick 的源码<br>jQuery 的开发者写了文档<br>看文档呀</p>\n<p><strong>特例：我可以传一个 this 给它</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.onclick.call(&#123;name: &apos;ada&apos;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>由于 this 是 call 的第一个参数<br>这样子 button.onclick 的 this 就变成了 {name:’ada’}</p>\n<p><strong>终极例题</strong><br>理解下面例子，基本上 this 就明白得差不多了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function X()&#123;</span><br><span class=\"line\">    return object = &#123;</span><br><span class=\"line\">        name: &apos;object&apos;,</span><br><span class=\"line\">        options: null,</span><br><span class=\"line\">        f1(x)&#123; </span><br><span class=\"line\">            // 3 下面的 this ？不就是 f1.call()的 this，就是 2 里面的 this：object</span><br><span class=\"line\">            this.options = x // 4 这里 x 是 options</span><br><span class=\"line\">            this.f2() // 5 this.f2.call() 显然这里 this 也是 object</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        f2()&#123;</span><br><span class=\"line\">            this.options.f2.call(this) // 6 这句代码4告诉我们是 options.f2.call(this) 我们把 this：object 传给了 options （特例）</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">    name: &apos;options&apos;,</span><br><span class=\"line\">    f1()&#123;&#125;,</span><br><span class=\"line\">    f2()&#123;</span><br><span class=\"line\">        console.log(this) // 问 this 是啥 ? // 7  传过来的 object 啊</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var x = X() // 1 这里的 x 是啥？X() return 的 object</span><br><span class=\"line\">x.f1(options) // 2 x.f1.call(x,options) 显然这里 this 就是 x === object</span><br></pre></td></tr></table></figure></p>\n<p>问题：上面代码打印的 this 是什么？<br>正确答案：object ，思路已经在注释里，按数字顺序理解</p>\n<hr>\n<p>参考：<br><a href=\"https://zhuanlan.zhihu.com/p/25991271\" target=\"_blank\" rel=\"noopener\">你怎么还没搞懂 this？</a></p>\n"},{"title":"OOP 初探（给 MVC 添加类）","date":"2018-09-02T08:49:17.000Z","_content":"# 面向对象程序设计：Object-oriented programming(OOP)\n\n**命名空间：name space**\n什么是命名空间？我们来看看 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4) 的例子\n```\n// 全局命名空间\nvar MYAPP = MYAPP || {};\n```\n---\n**这里补充有关逻辑运算符的知识**\n逻辑运算符：且（&&）、或（||）\n**&& 运算符返回第一个 falsy 值（停止运算），若无 falsy 值，则返回最后一个 truthy 值**\n只有（0；NaN；null；undefined；空字符串(' ')）五个是 falsy 值，除此之外其他都是 truthy 值\n```\nconsole.log(1) && 0 // 1\n```\n注意这里 console.log(1) 是返回值是 undefined （falsy 值），因此直接返回打印结果 1\n而不是返回第二个 falsy 值 0\n```\n0 && console.log(n) // 0\n```\n注意这里不会报错说 Uncaught ReferenceError: n is not defined\n因为 0 已经是 falsy 值所以直接返回，运算停止后面代码不再执行\n\n**|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值**\n---\n\n因此上面代码等价于\n```\n// 首先检查MYAPP是否已经被定义\nvar MYAPP\n// 是的话，那么使用现有的MYAPP全局对象\nif(MYAPP){\n  MYAPP = MYAPP;\n// 创建一个名为MYAPP的空对象用来封装方法，函数，变量和对象\n}else{\n  MYAPP = {};\n}\n```\n然后可以基于 MYAPP 这一 name 的空间来放置所有与 MYAPP 相关的子命名\n```\n// 子命名空间\nMYAPP.event = {};\nMYAPP.commonMethod = {}\n```\n***在JavaScript中，命名空间只是另一个包含 方法，属性，对象 的对象***\n我们常见的文件夹就类似一个命名空间\n\n---\n**构造函数：constructor（类：class）**\nJavaScript 基于原型，没有类的概念；但是我们可以定义一个类\n下面代码就是一个新的类 Person \n```\nfunction Person() { } \n// 或\nvar Person = function(){ }\n```\nJavaScript 中类的本质是函数，只是它有两个特点：\n**1.函数体内部使用了this关键字，代表了所要生成的对象实例。\n2.生成对象的时候，必须使用new命令\n这两个特点就形成了所谓的构造函数**\n*为了与普通函数区别，构造函数名字的第一个字母通常大写，如这里的Person*\n\n**对象（类的实例）**\n```\nfunction Person() { }\nvar person1 = new Person();\nvar person2 = new Person();\n```\n以 Person 为类（模版），person1 和 person2 是 Person 新的实例：person1、person2 可以调用函数 Person\n\n# 为什么会有面向对象编程？\n你写了一个 person1 ，又写了一个 person2 ，然后又写了一个 person3 。。。\n它们有很多重复的代码：这些代码结构一致（如我们之前的 [MVC 设计模式](https://zhuanlan.zhihu.com/p/42366912)），简直浪费内存（内存条那么贵）\n**于是就有了 Person 这个构造函数作为对象的模板：把所有相同结构的代码用一个函数封装起来\n可以让 person1 等只需要用 new 的方法调用这个 Person 传入参数来使用它的模版，person1 自身属性，再单独罗列即可**\n\n**下面以之前有关MVC 的 [博客](https://zhuanlan.zhihu.com/p/42366912) 中的代码为例**\n原来代码\n```\n! function () {\n    // MVC 的 V\n    var view = document.querySelector('section.message')\n    //添加 M\n    var model = {\n        init: function () {\n            var APP_ID = '2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz'\n            var APP_KEY = 'iByF5Dy55tJodAoxC4cxwAwx'\n\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        //获取所有数据\n        fetch: function () {\n            var query = new AV.Query('Message')\n            return query.find() //Promise 对象\n        },\n        //创建数据\n        save: function (name,content) {\n            var Message = AV.Object.extend('Message');\n            var message = new Message();\n            return message.save({ //Promise 对象\n                name: name,\n                content: content\n            })\n        }\n    }\n    // MVC 的 C\n    var controller = {\n        view: null,\n        model: null,\n        messageList: null,\n        init: function (view, model) {\n            this.view = view\n            this.model = model\n            this.messageList = view.querySelector('#messageList')\n            this.form = view.querySelector('form')\n            this.model.init()\n            this.loadMessages()\n            this.bindEvents()\n        },\n        loadMessages: function () {\n            this.model.fetch().then((messages) => {\n                let array = messages.map((item) => item.attributes)\n                array.forEach((item) => {\n                    let li = document.createElement('li')\n                    li.innerText = `${item.name} : ${item.content}`\n                    this.messageList.appendChild(li)\n                })\n            })\n        },\n        bindEvents: function () {\n            this.form.addEventListener('submit', (e) => {\n                e.preventDefault()\n                this.saveMessage()\n            })\n        },\n        saveMessage: function () {\n            let myForm = this.form\n            let content = myForm.querySelector('input[name=content]').value\n            let name = myForm.querySelector('input[name=name]').value\n            this.model.save(name, content).then(function (object) {\n                let li = document.createElement('li')\n                li.innerText = `${object.attributes.name} : ${object.attributes.content}`\n                let messageList = document.querySelector('#messageList')\n                messageList.appendChild(li)\n                myForm.querySelector('input[name=content]').value = ''\n                console.log(object)\n            })\n        }\n    }\n    controller.init(view, model)\n}.call()\n```\n**把 M、V、C 三个模版单独分出**\nM 的模版\n```\n// Model 办事，我放心\n// 通过全局函数 window 引入 Model 便于所有 model 调用\n// 提供三个参数：Options、resourceName 和 object\nwindow.Model = function (Options) {\n    let resourceName = Options.resourceName\n    return {\n        init: function () {\n            var APP_ID = '2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz'\n            var APP_KEY = 'iByF5Dy55tJodAoxC4cxwAwx'\n\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        fetch: function () {\n            var query = new AV.Query(resourceName)\n            return query.find()\n        },\n        //创建数据\n        save: function (object) {\n            var X = AV.Object.extend(resourceName)\n            var x = new X();\n            return x.save(object)\n        }\n    }\n}\n```\nV 就比较简单了，就一句话，但是封装后也可以调用以便减少代码\n```\nwindow.View = function(Selector){\n    return document.querySelector(Selector)\n}\n```\n这里 C 是有一定难点的，需要对 this 的概念有所理解\n```\nwindow.Controller = function (options) {\n    var init = options.init //这个 init 就是 controller 传进来的，记为 initB\n    // 4-21 return 一个 object\n    let object = {\n        view: null,\n        model: null,\n        init: function (view, model) { // 注意这里的 init 是 object 的属性,记为 initA\n            this.view = view\n            this.model = model\n            this.model.init()\n            // 3.initB.call(this)\n            init.call(this, view, model) // 这里的 init 当然是 initB，写成这样 init(view,model) 你就懂了\n            this.bindEvents.call(this)\n        },\n    }\n    // 把除 init 外的所有 options 的参数传给 object\n    // init 是公共参数，而其他实例独有的参数需要传进来\n    for (let key in options) {\n        if (key !== 'init') {\n            object[key] = options[key]\n        }\n    }\n    return object\n}\n```\n实例代码：现在可以直接调用 M、V、C 了，其他实例也是一样的\n```\n! function () {\n\t// MVC 的 V\n\t// 这里 window.View 的 window 可以省略，是默认的\n\tvar view = View('section.message')\n\t//添加 M\n\tvar model = Model({\n\t\tresourceName: 'Message'\n\t})\n\t// MVC 的 C\n\t// 1.controller === object\n\tvar controller = Controller({\n\t\tinit: function () {\n\t\t\tthis.messageList = view.querySelector('#messageList')\n\t\t\tthis.form = view.querySelector('form')\n\t\t\tthis.loadMessages()\n\t\t\t// 这里的 this 是 object，但是 object 没有上面参数\n\t\t\t// 所以才要 for...in...遍历一下，让 object 有这些 controller 独有的参数\n\t\t},\n\t\tloadMessages: function () {\n\t\t\tthis.model.fetch().then((messages) => {\n\t\t\t\tlet array = messages.map((item) => item.attributes)\n\t\t\t\tarray.forEach((item) => {\n\t\t\t\t\tlet li = document.createElement('li')\n\t\t\t\t\tli.innerText = `${item.name} : ${item.content}`\n\t\t\t\t\tthis.messageList.appendChild(li)\n\t\t\t\t})\n\t\t\t})\n\t\t},\n\t\tbindEvents: function () {\n\t\t\tthis.form.addEventListener('submit', (e) => {\n\t\t\t\te.preventDefault()\n\t\t\t\tthis.saveMessage()\n\t\t\t})\n\t\t},\n\t\tsaveMessage: function () {\n\t\t\tlet myForm = this.form\n\t\t\tlet content = myForm.querySelector('input[name=content]').value\n\t\t\tlet name = myForm.querySelector('input[name=name]').value\n\t\t\tthis.model.save({\n\t\t\t\tname: name,\n\t\t\t\tcontent: content\n\t\t\t}).then(function (object) {\n\t\t\t\tlet li = document.createElement('li')\n\t\t\t\tli.innerText = `${object.attributes.name} : ${object.attributes.content}`\n\t\t\t\tlet messageList = document.querySelector('#messageList')\n\t\t\t\tmessageList.appendChild(li)\n\t\t\t\tmyForm.querySelector('input[name=content]').value = ''\n\t\t\t\tconsole.log(object)\n\t\t\t})\n\t\t}\n\t})\n\t// 2.controller.init(view, model)\n\tcontroller.init(view, model)\n}.call()\n```\n# 关于 this\n我们以 C：controller 部分封装的代码的 this 为例：所有内容已经在代码中注明，我们来总结一下\n```\n1.controller === object\n2.controller.init(view, model)\n  写成 call 的形式：controller.init.call(controller, view, model)\n // MDN 里 this 文档告诉我们：this 是 call 的第一个参数\n  显然 controller.init 里面的 this 当然是 controller\n  那它还是 object：即 controller.init 里面的 this 就是 object\n  相当于 object.init 里面的 this 是 object\n3.initB.call(this)\n  initB 里面的 this === call 后面的this\n  call 后面 this === 第二条里的 this\n  第二条里面的 this === object\n  => initB 里面的 this 就是 object\n```\n想了解更多有关 this 知识，移步 [搞懂这些 你就理解 this 了](https://www.jianshu.com/p/bd9d8bd248ab)\n\n---\n本文仅供个人学习使用\n\n**未完待续。。**","source":"_posts/OOP-初探（给-MVC-添加类）.md","raw":"---\ntitle: OOP 初探（给 MVC 添加类）\ndate: 2018-09-02 16:49:17\ntags:\n---\n# 面向对象程序设计：Object-oriented programming(OOP)\n\n**命名空间：name space**\n什么是命名空间？我们来看看 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4) 的例子\n```\n// 全局命名空间\nvar MYAPP = MYAPP || {};\n```\n---\n**这里补充有关逻辑运算符的知识**\n逻辑运算符：且（&&）、或（||）\n**&& 运算符返回第一个 falsy 值（停止运算），若无 falsy 值，则返回最后一个 truthy 值**\n只有（0；NaN；null；undefined；空字符串(' ')）五个是 falsy 值，除此之外其他都是 truthy 值\n```\nconsole.log(1) && 0 // 1\n```\n注意这里 console.log(1) 是返回值是 undefined （falsy 值），因此直接返回打印结果 1\n而不是返回第二个 falsy 值 0\n```\n0 && console.log(n) // 0\n```\n注意这里不会报错说 Uncaught ReferenceError: n is not defined\n因为 0 已经是 falsy 值所以直接返回，运算停止后面代码不再执行\n\n**|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值**\n---\n\n因此上面代码等价于\n```\n// 首先检查MYAPP是否已经被定义\nvar MYAPP\n// 是的话，那么使用现有的MYAPP全局对象\nif(MYAPP){\n  MYAPP = MYAPP;\n// 创建一个名为MYAPP的空对象用来封装方法，函数，变量和对象\n}else{\n  MYAPP = {};\n}\n```\n然后可以基于 MYAPP 这一 name 的空间来放置所有与 MYAPP 相关的子命名\n```\n// 子命名空间\nMYAPP.event = {};\nMYAPP.commonMethod = {}\n```\n***在JavaScript中，命名空间只是另一个包含 方法，属性，对象 的对象***\n我们常见的文件夹就类似一个命名空间\n\n---\n**构造函数：constructor（类：class）**\nJavaScript 基于原型，没有类的概念；但是我们可以定义一个类\n下面代码就是一个新的类 Person \n```\nfunction Person() { } \n// 或\nvar Person = function(){ }\n```\nJavaScript 中类的本质是函数，只是它有两个特点：\n**1.函数体内部使用了this关键字，代表了所要生成的对象实例。\n2.生成对象的时候，必须使用new命令\n这两个特点就形成了所谓的构造函数**\n*为了与普通函数区别，构造函数名字的第一个字母通常大写，如这里的Person*\n\n**对象（类的实例）**\n```\nfunction Person() { }\nvar person1 = new Person();\nvar person2 = new Person();\n```\n以 Person 为类（模版），person1 和 person2 是 Person 新的实例：person1、person2 可以调用函数 Person\n\n# 为什么会有面向对象编程？\n你写了一个 person1 ，又写了一个 person2 ，然后又写了一个 person3 。。。\n它们有很多重复的代码：这些代码结构一致（如我们之前的 [MVC 设计模式](https://zhuanlan.zhihu.com/p/42366912)），简直浪费内存（内存条那么贵）\n**于是就有了 Person 这个构造函数作为对象的模板：把所有相同结构的代码用一个函数封装起来\n可以让 person1 等只需要用 new 的方法调用这个 Person 传入参数来使用它的模版，person1 自身属性，再单独罗列即可**\n\n**下面以之前有关MVC 的 [博客](https://zhuanlan.zhihu.com/p/42366912) 中的代码为例**\n原来代码\n```\n! function () {\n    // MVC 的 V\n    var view = document.querySelector('section.message')\n    //添加 M\n    var model = {\n        init: function () {\n            var APP_ID = '2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz'\n            var APP_KEY = 'iByF5Dy55tJodAoxC4cxwAwx'\n\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        //获取所有数据\n        fetch: function () {\n            var query = new AV.Query('Message')\n            return query.find() //Promise 对象\n        },\n        //创建数据\n        save: function (name,content) {\n            var Message = AV.Object.extend('Message');\n            var message = new Message();\n            return message.save({ //Promise 对象\n                name: name,\n                content: content\n            })\n        }\n    }\n    // MVC 的 C\n    var controller = {\n        view: null,\n        model: null,\n        messageList: null,\n        init: function (view, model) {\n            this.view = view\n            this.model = model\n            this.messageList = view.querySelector('#messageList')\n            this.form = view.querySelector('form')\n            this.model.init()\n            this.loadMessages()\n            this.bindEvents()\n        },\n        loadMessages: function () {\n            this.model.fetch().then((messages) => {\n                let array = messages.map((item) => item.attributes)\n                array.forEach((item) => {\n                    let li = document.createElement('li')\n                    li.innerText = `${item.name} : ${item.content}`\n                    this.messageList.appendChild(li)\n                })\n            })\n        },\n        bindEvents: function () {\n            this.form.addEventListener('submit', (e) => {\n                e.preventDefault()\n                this.saveMessage()\n            })\n        },\n        saveMessage: function () {\n            let myForm = this.form\n            let content = myForm.querySelector('input[name=content]').value\n            let name = myForm.querySelector('input[name=name]').value\n            this.model.save(name, content).then(function (object) {\n                let li = document.createElement('li')\n                li.innerText = `${object.attributes.name} : ${object.attributes.content}`\n                let messageList = document.querySelector('#messageList')\n                messageList.appendChild(li)\n                myForm.querySelector('input[name=content]').value = ''\n                console.log(object)\n            })\n        }\n    }\n    controller.init(view, model)\n}.call()\n```\n**把 M、V、C 三个模版单独分出**\nM 的模版\n```\n// Model 办事，我放心\n// 通过全局函数 window 引入 Model 便于所有 model 调用\n// 提供三个参数：Options、resourceName 和 object\nwindow.Model = function (Options) {\n    let resourceName = Options.resourceName\n    return {\n        init: function () {\n            var APP_ID = '2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz'\n            var APP_KEY = 'iByF5Dy55tJodAoxC4cxwAwx'\n\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        fetch: function () {\n            var query = new AV.Query(resourceName)\n            return query.find()\n        },\n        //创建数据\n        save: function (object) {\n            var X = AV.Object.extend(resourceName)\n            var x = new X();\n            return x.save(object)\n        }\n    }\n}\n```\nV 就比较简单了，就一句话，但是封装后也可以调用以便减少代码\n```\nwindow.View = function(Selector){\n    return document.querySelector(Selector)\n}\n```\n这里 C 是有一定难点的，需要对 this 的概念有所理解\n```\nwindow.Controller = function (options) {\n    var init = options.init //这个 init 就是 controller 传进来的，记为 initB\n    // 4-21 return 一个 object\n    let object = {\n        view: null,\n        model: null,\n        init: function (view, model) { // 注意这里的 init 是 object 的属性,记为 initA\n            this.view = view\n            this.model = model\n            this.model.init()\n            // 3.initB.call(this)\n            init.call(this, view, model) // 这里的 init 当然是 initB，写成这样 init(view,model) 你就懂了\n            this.bindEvents.call(this)\n        },\n    }\n    // 把除 init 外的所有 options 的参数传给 object\n    // init 是公共参数，而其他实例独有的参数需要传进来\n    for (let key in options) {\n        if (key !== 'init') {\n            object[key] = options[key]\n        }\n    }\n    return object\n}\n```\n实例代码：现在可以直接调用 M、V、C 了，其他实例也是一样的\n```\n! function () {\n\t// MVC 的 V\n\t// 这里 window.View 的 window 可以省略，是默认的\n\tvar view = View('section.message')\n\t//添加 M\n\tvar model = Model({\n\t\tresourceName: 'Message'\n\t})\n\t// MVC 的 C\n\t// 1.controller === object\n\tvar controller = Controller({\n\t\tinit: function () {\n\t\t\tthis.messageList = view.querySelector('#messageList')\n\t\t\tthis.form = view.querySelector('form')\n\t\t\tthis.loadMessages()\n\t\t\t// 这里的 this 是 object，但是 object 没有上面参数\n\t\t\t// 所以才要 for...in...遍历一下，让 object 有这些 controller 独有的参数\n\t\t},\n\t\tloadMessages: function () {\n\t\t\tthis.model.fetch().then((messages) => {\n\t\t\t\tlet array = messages.map((item) => item.attributes)\n\t\t\t\tarray.forEach((item) => {\n\t\t\t\t\tlet li = document.createElement('li')\n\t\t\t\t\tli.innerText = `${item.name} : ${item.content}`\n\t\t\t\t\tthis.messageList.appendChild(li)\n\t\t\t\t})\n\t\t\t})\n\t\t},\n\t\tbindEvents: function () {\n\t\t\tthis.form.addEventListener('submit', (e) => {\n\t\t\t\te.preventDefault()\n\t\t\t\tthis.saveMessage()\n\t\t\t})\n\t\t},\n\t\tsaveMessage: function () {\n\t\t\tlet myForm = this.form\n\t\t\tlet content = myForm.querySelector('input[name=content]').value\n\t\t\tlet name = myForm.querySelector('input[name=name]').value\n\t\t\tthis.model.save({\n\t\t\t\tname: name,\n\t\t\t\tcontent: content\n\t\t\t}).then(function (object) {\n\t\t\t\tlet li = document.createElement('li')\n\t\t\t\tli.innerText = `${object.attributes.name} : ${object.attributes.content}`\n\t\t\t\tlet messageList = document.querySelector('#messageList')\n\t\t\t\tmessageList.appendChild(li)\n\t\t\t\tmyForm.querySelector('input[name=content]').value = ''\n\t\t\t\tconsole.log(object)\n\t\t\t})\n\t\t}\n\t})\n\t// 2.controller.init(view, model)\n\tcontroller.init(view, model)\n}.call()\n```\n# 关于 this\n我们以 C：controller 部分封装的代码的 this 为例：所有内容已经在代码中注明，我们来总结一下\n```\n1.controller === object\n2.controller.init(view, model)\n  写成 call 的形式：controller.init.call(controller, view, model)\n // MDN 里 this 文档告诉我们：this 是 call 的第一个参数\n  显然 controller.init 里面的 this 当然是 controller\n  那它还是 object：即 controller.init 里面的 this 就是 object\n  相当于 object.init 里面的 this 是 object\n3.initB.call(this)\n  initB 里面的 this === call 后面的this\n  call 后面 this === 第二条里的 this\n  第二条里面的 this === object\n  => initB 里面的 this 就是 object\n```\n想了解更多有关 this 知识，移步 [搞懂这些 你就理解 this 了](https://www.jianshu.com/p/bd9d8bd248ab)\n\n---\n本文仅供个人学习使用\n\n**未完待续。。**","slug":"OOP-初探（给-MVC-添加类）","published":1,"updated":"2019-01-18T14:54:14.733Z","_id":"cjr25yv5o0000p099bbufqkdf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"面向对象程序设计：Object-oriented-programming-OOP\"><a href=\"#面向对象程序设计：Object-oriented-programming-OOP\" class=\"headerlink\" title=\"面向对象程序设计：Object-oriented programming(OOP)\"></a>面向对象程序设计：Object-oriented programming(OOP)</h1><p><strong>命名空间：name space</strong><br>什么是命名空间？我们来看看 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\" target=\"_blank\" rel=\"noopener\">MDN</a> 的例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局命名空间</span><br><span class=\"line\">var MYAPP = MYAPP || &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>这里补充有关逻辑运算符的知识</strong><br>逻辑运算符：且（&amp;&amp;）、或（||）<br><strong>&amp;&amp; 运算符返回第一个 falsy 值（停止运算），若无 falsy 值，则返回最后一个 truthy 值</strong><br>只有（0；NaN；null；undefined；空字符串(‘ ‘)）五个是 falsy 值，除此之外其他都是 truthy 值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(1) &amp;&amp; 0 // 1</span><br></pre></td></tr></table></figure></p>\n<p>注意这里 console.log(1) 是返回值是 undefined （falsy 值），因此直接返回打印结果 1<br>而不是返回第二个 falsy 值 0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 &amp;&amp; console.log(n) // 0</span><br></pre></td></tr></table></figure></p>\n<p>注意这里不会报错说 Uncaught ReferenceError: n is not defined<br>因为 0 已经是 falsy 值所以直接返回，运算停止后面代码不再执行</p>\n<h2 id=\"运算符返回第一个-truthy-值（停止运算），若无-truthy-值，则返回最后一个-falsy-值\"><a href=\"#运算符返回第一个-truthy-值（停止运算），若无-truthy-值，则返回最后一个-falsy-值\" class=\"headerlink\" title=\"|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值\"></a><strong>|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值</strong></h2><p>因此上面代码等价于<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先检查MYAPP是否已经被定义</span><br><span class=\"line\">var MYAPP</span><br><span class=\"line\">// 是的话，那么使用现有的MYAPP全局对象</span><br><span class=\"line\">if(MYAPP)&#123;</span><br><span class=\"line\">  MYAPP = MYAPP;</span><br><span class=\"line\">// 创建一个名为MYAPP的空对象用来封装方法，函数，变量和对象</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">  MYAPP = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后可以基于 MYAPP 这一 name 的空间来放置所有与 MYAPP 相关的子命名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子命名空间</span><br><span class=\"line\">MYAPP.event = &#123;&#125;;</span><br><span class=\"line\">MYAPP.commonMethod = &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>在JavaScript中，命名空间只是另一个包含 方法，属性，对象 的对象</em></strong><br>我们常见的文件夹就类似一个命名空间</p>\n<hr>\n<p><strong>构造函数：constructor（类：class）</strong><br>JavaScript 基于原型，没有类的概念；但是我们可以定义一个类<br>下面代码就是一个新的类 Person<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123; &#125; </span><br><span class=\"line\">// 或</span><br><span class=\"line\">var Person = function()&#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript 中类的本质是函数，只是它有两个特点：<br><strong>1.函数体内部使用了this关键字，代表了所要生成的对象实例。<br>2.生成对象的时候，必须使用new命令<br>这两个特点就形成了所谓的构造函数</strong><br><em>为了与普通函数区别，构造函数名字的第一个字母通常大写，如这里的Person</em></p>\n<p><strong>对象（类的实例）</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123; &#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br></pre></td></tr></table></figure></p>\n<p>以 Person 为类（模版），person1 和 person2 是 Person 新的实例：person1、person2 可以调用函数 Person</p>\n<h1 id=\"为什么会有面向对象编程？\"><a href=\"#为什么会有面向对象编程？\" class=\"headerlink\" title=\"为什么会有面向对象编程？\"></a>为什么会有面向对象编程？</h1><p>你写了一个 person1 ，又写了一个 person2 ，然后又写了一个 person3 。。。<br>它们有很多重复的代码：这些代码结构一致（如我们之前的 <a href=\"https://zhuanlan.zhihu.com/p/42366912\" target=\"_blank\" rel=\"noopener\">MVC 设计模式</a>），简直浪费内存（内存条那么贵）<br><strong>于是就有了 Person 这个构造函数作为对象的模板：把所有相同结构的代码用一个函数封装起来<br>可以让 person1 等只需要用 new 的方法调用这个 Person 传入参数来使用它的模版，person1 自身属性，再单独罗列即可</strong></p>\n<p><strong>下面以之前有关MVC 的 <a href=\"https://zhuanlan.zhihu.com/p/42366912\" target=\"_blank\" rel=\"noopener\">博客</a> 中的代码为例</strong><br>原来代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    // MVC 的 V</span><br><span class=\"line\">    var view = document.querySelector(&apos;section.message&apos;)</span><br><span class=\"line\">    //添加 M</span><br><span class=\"line\">    var model = &#123;</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            var APP_ID = &apos;2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz&apos;</span><br><span class=\"line\">            var APP_KEY = &apos;iByF5Dy55tJodAoxC4cxwAwx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">            AV.init(&#123;</span><br><span class=\"line\">                appId: APP_ID,</span><br><span class=\"line\">                appKey: APP_KEY</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //获取所有数据</span><br><span class=\"line\">        fetch: function () &#123;</span><br><span class=\"line\">            var query = new AV.Query(&apos;Message&apos;)</span><br><span class=\"line\">            return query.find() //Promise 对象</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //创建数据</span><br><span class=\"line\">        save: function (name,content) &#123;</span><br><span class=\"line\">            var Message = AV.Object.extend(&apos;Message&apos;);</span><br><span class=\"line\">            var message = new Message();</span><br><span class=\"line\">            return message.save(&#123; //Promise 对象</span><br><span class=\"line\">                name: name,</span><br><span class=\"line\">                content: content</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // MVC 的 C</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        model: null,</span><br><span class=\"line\">        messageList: null,</span><br><span class=\"line\">        init: function (view, model) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.model = model</span><br><span class=\"line\">            this.messageList = view.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">            this.form = view.querySelector(&apos;form&apos;)</span><br><span class=\"line\">            this.model.init()</span><br><span class=\"line\">            this.loadMessages()</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        loadMessages: function () &#123;</span><br><span class=\"line\">            this.model.fetch().then((messages) =&gt; &#123;</span><br><span class=\"line\">                let array = messages.map((item) =&gt; item.attributes)</span><br><span class=\"line\">                array.forEach((item) =&gt; &#123;</span><br><span class=\"line\">                    let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">                    li.innerText = `$&#123;item.name&#125; : $&#123;item.content&#125;`</span><br><span class=\"line\">                    this.messageList.appendChild(li)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            this.form.addEventListener(&apos;submit&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">                e.preventDefault()</span><br><span class=\"line\">                this.saveMessage()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        saveMessage: function () &#123;</span><br><span class=\"line\">            let myForm = this.form</span><br><span class=\"line\">            let content = myForm.querySelector(&apos;input[name=content]&apos;).value</span><br><span class=\"line\">            let name = myForm.querySelector(&apos;input[name=name]&apos;).value</span><br><span class=\"line\">            this.model.save(name, content).then(function (object) &#123;</span><br><span class=\"line\">                let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">                li.innerText = `$&#123;object.attributes.name&#125; : $&#123;object.attributes.content&#125;`</span><br><span class=\"line\">                let messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">                messageList.appendChild(li)</span><br><span class=\"line\">                myForm.querySelector(&apos;input[name=content]&apos;).value = &apos;&apos;</span><br><span class=\"line\">                console.log(object)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p><strong>把 M、V、C 三个模版单独分出</strong><br>M 的模版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Model 办事，我放心</span><br><span class=\"line\">// 通过全局函数 window 引入 Model 便于所有 model 调用</span><br><span class=\"line\">// 提供三个参数：Options、resourceName 和 object</span><br><span class=\"line\">window.Model = function (Options) &#123;</span><br><span class=\"line\">    let resourceName = Options.resourceName</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            var APP_ID = &apos;2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz&apos;</span><br><span class=\"line\">            var APP_KEY = &apos;iByF5Dy55tJodAoxC4cxwAwx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">            AV.init(&#123;</span><br><span class=\"line\">                appId: APP_ID,</span><br><span class=\"line\">                appKey: APP_KEY</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fetch: function () &#123;</span><br><span class=\"line\">            var query = new AV.Query(resourceName)</span><br><span class=\"line\">            return query.find()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //创建数据</span><br><span class=\"line\">        save: function (object) &#123;</span><br><span class=\"line\">            var X = AV.Object.extend(resourceName)</span><br><span class=\"line\">            var x = new X();</span><br><span class=\"line\">            return x.save(object)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>V 就比较简单了，就一句话，但是封装后也可以调用以便减少代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.View = function(Selector)&#123;</span><br><span class=\"line\">    return document.querySelector(Selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 C 是有一定难点的，需要对 this 的概念有所理解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.Controller = function (options) &#123;</span><br><span class=\"line\">    var init = options.init //这个 init 就是 controller 传进来的，记为 initB</span><br><span class=\"line\">    // 4-21 return 一个 object</span><br><span class=\"line\">    let object = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        model: null,</span><br><span class=\"line\">        init: function (view, model) &#123; // 注意这里的 init 是 object 的属性,记为 initA</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.model = model</span><br><span class=\"line\">            this.model.init()</span><br><span class=\"line\">            // 3.initB.call(this)</span><br><span class=\"line\">            init.call(this, view, model) // 这里的 init 当然是 initB，写成这样 init(view,model) 你就懂了</span><br><span class=\"line\">            this.bindEvents.call(this)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 把除 init 外的所有 options 的参数传给 object</span><br><span class=\"line\">    // init 是公共参数，而其他实例独有的参数需要传进来</span><br><span class=\"line\">    for (let key in options) &#123;</span><br><span class=\"line\">        if (key !== &apos;init&apos;) &#123;</span><br><span class=\"line\">            object[key] = options[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实例代码：现在可以直接调用 M、V、C 了，其他实例也是一样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">\t// MVC 的 V</span><br><span class=\"line\">\t// 这里 window.View 的 window 可以省略，是默认的</span><br><span class=\"line\">\tvar view = View(&apos;section.message&apos;)</span><br><span class=\"line\">\t//添加 M</span><br><span class=\"line\">\tvar model = Model(&#123;</span><br><span class=\"line\">\t\tresourceName: &apos;Message&apos;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t// MVC 的 C</span><br><span class=\"line\">\t// 1.controller === object</span><br><span class=\"line\">\tvar controller = Controller(&#123;</span><br><span class=\"line\">\t\tinit: function () &#123;</span><br><span class=\"line\">\t\t\tthis.messageList = view.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">\t\t\tthis.form = view.querySelector(&apos;form&apos;)</span><br><span class=\"line\">\t\t\tthis.loadMessages()</span><br><span class=\"line\">\t\t\t// 这里的 this 是 object，但是 object 没有上面参数</span><br><span class=\"line\">\t\t\t// 所以才要 for...in...遍历一下，让 object 有这些 controller 独有的参数</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tloadMessages: function () &#123;</span><br><span class=\"line\">\t\t\tthis.model.fetch().then((messages) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\tlet array = messages.map((item) =&gt; item.attributes)</span><br><span class=\"line\">\t\t\t\tarray.forEach((item) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tlet li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">\t\t\t\t\tli.innerText = `$&#123;item.name&#125; : $&#123;item.content&#125;`</span><br><span class=\"line\">\t\t\t\t\tthis.messageList.appendChild(li)</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tbindEvents: function () &#123;</span><br><span class=\"line\">\t\t\tthis.form.addEventListener(&apos;submit&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\te.preventDefault()</span><br><span class=\"line\">\t\t\t\tthis.saveMessage()</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsaveMessage: function () &#123;</span><br><span class=\"line\">\t\t\tlet myForm = this.form</span><br><span class=\"line\">\t\t\tlet content = myForm.querySelector(&apos;input[name=content]&apos;).value</span><br><span class=\"line\">\t\t\tlet name = myForm.querySelector(&apos;input[name=name]&apos;).value</span><br><span class=\"line\">\t\t\tthis.model.save(&#123;</span><br><span class=\"line\">\t\t\t\tname: name,</span><br><span class=\"line\">\t\t\t\tcontent: content</span><br><span class=\"line\">\t\t\t&#125;).then(function (object) &#123;</span><br><span class=\"line\">\t\t\t\tlet li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">\t\t\t\tli.innerText = `$&#123;object.attributes.name&#125; : $&#123;object.attributes.content&#125;`</span><br><span class=\"line\">\t\t\t\tlet messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">\t\t\t\tmessageList.appendChild(li)</span><br><span class=\"line\">\t\t\t\tmyForm.querySelector(&apos;input[name=content]&apos;).value = &apos;&apos;</span><br><span class=\"line\">\t\t\t\tconsole.log(object)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t// 2.controller.init(view, model)</span><br><span class=\"line\">\tcontroller.init(view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"关于-this\"><a href=\"#关于-this\" class=\"headerlink\" title=\"关于 this\"></a>关于 this</h1><p>我们以 C：controller 部分封装的代码的 this 为例：所有内容已经在代码中注明，我们来总结一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.controller === object</span><br><span class=\"line\">2.controller.init(view, model)</span><br><span class=\"line\">  写成 call 的形式：controller.init.call(controller, view, model)</span><br><span class=\"line\"> // MDN 里 this 文档告诉我们：this 是 call 的第一个参数</span><br><span class=\"line\">  显然 controller.init 里面的 this 当然是 controller</span><br><span class=\"line\">  那它还是 object：即 controller.init 里面的 this 就是 object</span><br><span class=\"line\">  相当于 object.init 里面的 this 是 object</span><br><span class=\"line\">3.initB.call(this)</span><br><span class=\"line\">  initB 里面的 this === call 后面的this</span><br><span class=\"line\">  call 后面 this === 第二条里的 this</span><br><span class=\"line\">  第二条里面的 this === object</span><br><span class=\"line\">  =&gt; initB 里面的 this 就是 object</span><br></pre></td></tr></table></figure></p>\n<p>想了解更多有关 this 知识，移步 <a href=\"https://www.jianshu.com/p/bd9d8bd248ab\" target=\"_blank\" rel=\"noopener\">搞懂这些 你就理解 this 了</a></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n<p><strong>未完待续。。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面向对象程序设计：Object-oriented-programming-OOP\"><a href=\"#面向对象程序设计：Object-oriented-programming-OOP\" class=\"headerlink\" title=\"面向对象程序设计：Object-oriented programming(OOP)\"></a>面向对象程序设计：Object-oriented programming(OOP)</h1><p><strong>命名空间：name space</strong><br>什么是命名空间？我们来看看 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\" target=\"_blank\" rel=\"noopener\">MDN</a> 的例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局命名空间</span><br><span class=\"line\">var MYAPP = MYAPP || &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>这里补充有关逻辑运算符的知识</strong><br>逻辑运算符：且（&amp;&amp;）、或（||）<br><strong>&amp;&amp; 运算符返回第一个 falsy 值（停止运算），若无 falsy 值，则返回最后一个 truthy 值</strong><br>只有（0；NaN；null；undefined；空字符串(‘ ‘)）五个是 falsy 值，除此之外其他都是 truthy 值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(1) &amp;&amp; 0 // 1</span><br></pre></td></tr></table></figure></p>\n<p>注意这里 console.log(1) 是返回值是 undefined （falsy 值），因此直接返回打印结果 1<br>而不是返回第二个 falsy 值 0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 &amp;&amp; console.log(n) // 0</span><br></pre></td></tr></table></figure></p>\n<p>注意这里不会报错说 Uncaught ReferenceError: n is not defined<br>因为 0 已经是 falsy 值所以直接返回，运算停止后面代码不再执行</p>\n<h2 id=\"运算符返回第一个-truthy-值（停止运算），若无-truthy-值，则返回最后一个-falsy-值\"><a href=\"#运算符返回第一个-truthy-值（停止运算），若无-truthy-值，则返回最后一个-falsy-值\" class=\"headerlink\" title=\"|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值\"></a><strong>|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值</strong></h2><p>因此上面代码等价于<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先检查MYAPP是否已经被定义</span><br><span class=\"line\">var MYAPP</span><br><span class=\"line\">// 是的话，那么使用现有的MYAPP全局对象</span><br><span class=\"line\">if(MYAPP)&#123;</span><br><span class=\"line\">  MYAPP = MYAPP;</span><br><span class=\"line\">// 创建一个名为MYAPP的空对象用来封装方法，函数，变量和对象</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">  MYAPP = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后可以基于 MYAPP 这一 name 的空间来放置所有与 MYAPP 相关的子命名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子命名空间</span><br><span class=\"line\">MYAPP.event = &#123;&#125;;</span><br><span class=\"line\">MYAPP.commonMethod = &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>在JavaScript中，命名空间只是另一个包含 方法，属性，对象 的对象</em></strong><br>我们常见的文件夹就类似一个命名空间</p>\n<hr>\n<p><strong>构造函数：constructor（类：class）</strong><br>JavaScript 基于原型，没有类的概念；但是我们可以定义一个类<br>下面代码就是一个新的类 Person<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123; &#125; </span><br><span class=\"line\">// 或</span><br><span class=\"line\">var Person = function()&#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript 中类的本质是函数，只是它有两个特点：<br><strong>1.函数体内部使用了this关键字，代表了所要生成的对象实例。<br>2.生成对象的时候，必须使用new命令<br>这两个特点就形成了所谓的构造函数</strong><br><em>为了与普通函数区别，构造函数名字的第一个字母通常大写，如这里的Person</em></p>\n<p><strong>对象（类的实例）</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123; &#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br></pre></td></tr></table></figure></p>\n<p>以 Person 为类（模版），person1 和 person2 是 Person 新的实例：person1、person2 可以调用函数 Person</p>\n<h1 id=\"为什么会有面向对象编程？\"><a href=\"#为什么会有面向对象编程？\" class=\"headerlink\" title=\"为什么会有面向对象编程？\"></a>为什么会有面向对象编程？</h1><p>你写了一个 person1 ，又写了一个 person2 ，然后又写了一个 person3 。。。<br>它们有很多重复的代码：这些代码结构一致（如我们之前的 <a href=\"https://zhuanlan.zhihu.com/p/42366912\" target=\"_blank\" rel=\"noopener\">MVC 设计模式</a>），简直浪费内存（内存条那么贵）<br><strong>于是就有了 Person 这个构造函数作为对象的模板：把所有相同结构的代码用一个函数封装起来<br>可以让 person1 等只需要用 new 的方法调用这个 Person 传入参数来使用它的模版，person1 自身属性，再单独罗列即可</strong></p>\n<p><strong>下面以之前有关MVC 的 <a href=\"https://zhuanlan.zhihu.com/p/42366912\" target=\"_blank\" rel=\"noopener\">博客</a> 中的代码为例</strong><br>原来代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    // MVC 的 V</span><br><span class=\"line\">    var view = document.querySelector(&apos;section.message&apos;)</span><br><span class=\"line\">    //添加 M</span><br><span class=\"line\">    var model = &#123;</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            var APP_ID = &apos;2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz&apos;</span><br><span class=\"line\">            var APP_KEY = &apos;iByF5Dy55tJodAoxC4cxwAwx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">            AV.init(&#123;</span><br><span class=\"line\">                appId: APP_ID,</span><br><span class=\"line\">                appKey: APP_KEY</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //获取所有数据</span><br><span class=\"line\">        fetch: function () &#123;</span><br><span class=\"line\">            var query = new AV.Query(&apos;Message&apos;)</span><br><span class=\"line\">            return query.find() //Promise 对象</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //创建数据</span><br><span class=\"line\">        save: function (name,content) &#123;</span><br><span class=\"line\">            var Message = AV.Object.extend(&apos;Message&apos;);</span><br><span class=\"line\">            var message = new Message();</span><br><span class=\"line\">            return message.save(&#123; //Promise 对象</span><br><span class=\"line\">                name: name,</span><br><span class=\"line\">                content: content</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // MVC 的 C</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        model: null,</span><br><span class=\"line\">        messageList: null,</span><br><span class=\"line\">        init: function (view, model) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.model = model</span><br><span class=\"line\">            this.messageList = view.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">            this.form = view.querySelector(&apos;form&apos;)</span><br><span class=\"line\">            this.model.init()</span><br><span class=\"line\">            this.loadMessages()</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        loadMessages: function () &#123;</span><br><span class=\"line\">            this.model.fetch().then((messages) =&gt; &#123;</span><br><span class=\"line\">                let array = messages.map((item) =&gt; item.attributes)</span><br><span class=\"line\">                array.forEach((item) =&gt; &#123;</span><br><span class=\"line\">                    let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">                    li.innerText = `$&#123;item.name&#125; : $&#123;item.content&#125;`</span><br><span class=\"line\">                    this.messageList.appendChild(li)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            this.form.addEventListener(&apos;submit&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">                e.preventDefault()</span><br><span class=\"line\">                this.saveMessage()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        saveMessage: function () &#123;</span><br><span class=\"line\">            let myForm = this.form</span><br><span class=\"line\">            let content = myForm.querySelector(&apos;input[name=content]&apos;).value</span><br><span class=\"line\">            let name = myForm.querySelector(&apos;input[name=name]&apos;).value</span><br><span class=\"line\">            this.model.save(name, content).then(function (object) &#123;</span><br><span class=\"line\">                let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">                li.innerText = `$&#123;object.attributes.name&#125; : $&#123;object.attributes.content&#125;`</span><br><span class=\"line\">                let messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">                messageList.appendChild(li)</span><br><span class=\"line\">                myForm.querySelector(&apos;input[name=content]&apos;).value = &apos;&apos;</span><br><span class=\"line\">                console.log(object)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p><strong>把 M、V、C 三个模版单独分出</strong><br>M 的模版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Model 办事，我放心</span><br><span class=\"line\">// 通过全局函数 window 引入 Model 便于所有 model 调用</span><br><span class=\"line\">// 提供三个参数：Options、resourceName 和 object</span><br><span class=\"line\">window.Model = function (Options) &#123;</span><br><span class=\"line\">    let resourceName = Options.resourceName</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            var APP_ID = &apos;2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz&apos;</span><br><span class=\"line\">            var APP_KEY = &apos;iByF5Dy55tJodAoxC4cxwAwx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">            AV.init(&#123;</span><br><span class=\"line\">                appId: APP_ID,</span><br><span class=\"line\">                appKey: APP_KEY</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fetch: function () &#123;</span><br><span class=\"line\">            var query = new AV.Query(resourceName)</span><br><span class=\"line\">            return query.find()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //创建数据</span><br><span class=\"line\">        save: function (object) &#123;</span><br><span class=\"line\">            var X = AV.Object.extend(resourceName)</span><br><span class=\"line\">            var x = new X();</span><br><span class=\"line\">            return x.save(object)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>V 就比较简单了，就一句话，但是封装后也可以调用以便减少代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.View = function(Selector)&#123;</span><br><span class=\"line\">    return document.querySelector(Selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 C 是有一定难点的，需要对 this 的概念有所理解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.Controller = function (options) &#123;</span><br><span class=\"line\">    var init = options.init //这个 init 就是 controller 传进来的，记为 initB</span><br><span class=\"line\">    // 4-21 return 一个 object</span><br><span class=\"line\">    let object = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        model: null,</span><br><span class=\"line\">        init: function (view, model) &#123; // 注意这里的 init 是 object 的属性,记为 initA</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.model = model</span><br><span class=\"line\">            this.model.init()</span><br><span class=\"line\">            // 3.initB.call(this)</span><br><span class=\"line\">            init.call(this, view, model) // 这里的 init 当然是 initB，写成这样 init(view,model) 你就懂了</span><br><span class=\"line\">            this.bindEvents.call(this)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 把除 init 外的所有 options 的参数传给 object</span><br><span class=\"line\">    // init 是公共参数，而其他实例独有的参数需要传进来</span><br><span class=\"line\">    for (let key in options) &#123;</span><br><span class=\"line\">        if (key !== &apos;init&apos;) &#123;</span><br><span class=\"line\">            object[key] = options[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实例代码：现在可以直接调用 M、V、C 了，其他实例也是一样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">\t// MVC 的 V</span><br><span class=\"line\">\t// 这里 window.View 的 window 可以省略，是默认的</span><br><span class=\"line\">\tvar view = View(&apos;section.message&apos;)</span><br><span class=\"line\">\t//添加 M</span><br><span class=\"line\">\tvar model = Model(&#123;</span><br><span class=\"line\">\t\tresourceName: &apos;Message&apos;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t// MVC 的 C</span><br><span class=\"line\">\t// 1.controller === object</span><br><span class=\"line\">\tvar controller = Controller(&#123;</span><br><span class=\"line\">\t\tinit: function () &#123;</span><br><span class=\"line\">\t\t\tthis.messageList = view.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">\t\t\tthis.form = view.querySelector(&apos;form&apos;)</span><br><span class=\"line\">\t\t\tthis.loadMessages()</span><br><span class=\"line\">\t\t\t// 这里的 this 是 object，但是 object 没有上面参数</span><br><span class=\"line\">\t\t\t// 所以才要 for...in...遍历一下，让 object 有这些 controller 独有的参数</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tloadMessages: function () &#123;</span><br><span class=\"line\">\t\t\tthis.model.fetch().then((messages) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\tlet array = messages.map((item) =&gt; item.attributes)</span><br><span class=\"line\">\t\t\t\tarray.forEach((item) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tlet li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">\t\t\t\t\tli.innerText = `$&#123;item.name&#125; : $&#123;item.content&#125;`</span><br><span class=\"line\">\t\t\t\t\tthis.messageList.appendChild(li)</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tbindEvents: function () &#123;</span><br><span class=\"line\">\t\t\tthis.form.addEventListener(&apos;submit&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\te.preventDefault()</span><br><span class=\"line\">\t\t\t\tthis.saveMessage()</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsaveMessage: function () &#123;</span><br><span class=\"line\">\t\t\tlet myForm = this.form</span><br><span class=\"line\">\t\t\tlet content = myForm.querySelector(&apos;input[name=content]&apos;).value</span><br><span class=\"line\">\t\t\tlet name = myForm.querySelector(&apos;input[name=name]&apos;).value</span><br><span class=\"line\">\t\t\tthis.model.save(&#123;</span><br><span class=\"line\">\t\t\t\tname: name,</span><br><span class=\"line\">\t\t\t\tcontent: content</span><br><span class=\"line\">\t\t\t&#125;).then(function (object) &#123;</span><br><span class=\"line\">\t\t\t\tlet li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">\t\t\t\tli.innerText = `$&#123;object.attributes.name&#125; : $&#123;object.attributes.content&#125;`</span><br><span class=\"line\">\t\t\t\tlet messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">\t\t\t\tmessageList.appendChild(li)</span><br><span class=\"line\">\t\t\t\tmyForm.querySelector(&apos;input[name=content]&apos;).value = &apos;&apos;</span><br><span class=\"line\">\t\t\t\tconsole.log(object)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t// 2.controller.init(view, model)</span><br><span class=\"line\">\tcontroller.init(view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"关于-this\"><a href=\"#关于-this\" class=\"headerlink\" title=\"关于 this\"></a>关于 this</h1><p>我们以 C：controller 部分封装的代码的 this 为例：所有内容已经在代码中注明，我们来总结一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.controller === object</span><br><span class=\"line\">2.controller.init(view, model)</span><br><span class=\"line\">  写成 call 的形式：controller.init.call(controller, view, model)</span><br><span class=\"line\"> // MDN 里 this 文档告诉我们：this 是 call 的第一个参数</span><br><span class=\"line\">  显然 controller.init 里面的 this 当然是 controller</span><br><span class=\"line\">  那它还是 object：即 controller.init 里面的 this 就是 object</span><br><span class=\"line\">  相当于 object.init 里面的 this 是 object</span><br><span class=\"line\">3.initB.call(this)</span><br><span class=\"line\">  initB 里面的 this === call 后面的this</span><br><span class=\"line\">  call 后面 this === 第二条里的 this</span><br><span class=\"line\">  第二条里面的 this === object</span><br><span class=\"line\">  =&gt; initB 里面的 this 就是 object</span><br></pre></td></tr></table></figure></p>\n<p>想了解更多有关 this 知识，移步 <a href=\"https://www.jianshu.com/p/bd9d8bd248ab\" target=\"_blank\" rel=\"noopener\">搞懂这些 你就理解 this 了</a></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n<p><strong>未完待续。。</strong></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}