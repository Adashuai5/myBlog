{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1547818712301},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1547818712298},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1547818712302},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1547818712298},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1547818712302},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1547818712299},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1547818712303},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1547818712303},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1547818712303},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1547818712305},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1547818712304},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1547818712306},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1547818712349},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1547818712307},{"_id":"themes/next/_config.yml","hash":"8019c71fedb4999f6d3b9b19fbc1270ff3ef5b2e","modified":1548686615451},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1547818712304},{"_id":"source/_posts/AJAX-是什么鬼.md","hash":"9ae9a0e37d4283a81ccecd5498b176c8107a1ec8","modified":1548164517026},{"_id":"source/_posts/CSS常用布局学习.md","hash":"0b22e1e62144bee8fb06c4c5020f01df56d9caa8","modified":1548165573414},{"_id":"source/_posts/CSS常用布局-续篇.md","hash":"5ad62fb2c840625d60ffd40868cd471cae56210d","modified":1547823000936},{"_id":"source/_posts/HTML入门笔记.md","hash":"4650189ca9acaa73d41186c76c538edb31c46809","modified":1548165148152},{"_id":"source/_posts/HTML常用的几个标签.md","hash":"6ee81787a1480b0942c2341542b196f06f3f00a6","modified":1548165381463},{"_id":"source/_posts/Vue-全家桶学习总结.md","hash":"f64e6c4fd50921c86fe3917944647a73328a4959","modified":1551195471537},{"_id":"source/_posts/MVC-初尝试之-V-和-C.md","hash":"e85a0136e0db11a8a3ae6f4c61a4514b1e23eb5b","modified":1548167340346},{"_id":"source/_posts/HTTP-学习之-Cookie.md","hash":"ac2a492031710186b5cb7f60ab2317541c582b35","modified":1547822875108},{"_id":"source/_posts/git入门——在本地使用git.md","hash":"42ddaff3cc507a4b7691469182dab676256a69a2","modified":1548166081671},{"_id":"source/_posts/OOP-初探（给-MVC-添加类）.md","hash":"163b133cf90ee18a0aaf348f3111538828d60fa7","modified":1547823254733},{"_id":"source/_posts/hash-模式和-history-模式小记.md","hash":"fa820fdfb9d57272db4074cc176e54bb39e0e5ac","modified":1548683819986},{"_id":"source/_posts/windows-7与linux双系统安装（后续）.md","hash":"d0a24c96a3d44c9647357e91cd9a282bce4c5f5d","modified":1548167219986},{"_id":"source/_posts/windows-7与-linux-双系统安装（免U盘）.md","hash":"7eaf09f1612f9bd7b3fb43da7419045cdd95dc6b","modified":1548165906939},{"_id":"source/_posts/一次性理解立即执行函数和闭包.md","hash":"540ae4fd8dd35e7875c96cdcd7425ee112b0752a","modified":1548164053724},{"_id":"source/_posts/从「从输入URL到页面加载」谈及Web性能优化.md","hash":"420f03ab8f779987d6bdeb0500c44068becb0bc7","modified":1548169333526},{"_id":"source/_posts/优先级-和-CSS-预处理.md","hash":"3bceb9a2d3aefe3ca2ad9a5413876e2edfffd124","modified":1547821939179},{"_id":"source/_posts/Web-服务器.md","hash":"266462e05da376d4594b4b560c50e76e36da5084","modified":1548167474754},{"_id":"source/_posts/一些命令行入门学习的知识和细节.md","hash":"61212a2ee19e3a4636626a7c0ef3f9bc815839e9","modified":1548165815060},{"_id":"source/_posts/实现一个-jQuery-的-API.md","hash":"b03e109606a06045e1d1e5d85da2ff3ade508d93","modified":1548166951776},{"_id":"source/_posts/实现一个AJAX.md","hash":"ec8c051150236b29cfb4cb7bc72b360845e12fe8","modified":1548164620108},{"_id":"source/_posts/搞懂这些-你就理解-this-了.md","hash":"1795d5c0bc03cad43eb887bf48807a8bcf6e48aa","modified":1547823135545},{"_id":"source/_posts/有关-HTTP-协议（IP和端口）.md","hash":"542873823b9cf19ab2bfeb343ee44127ad6e6e40","modified":1548166401368},{"_id":"source/_posts/正则表达式速记.md","hash":"b4370f4285abc820071e49caf3e274ff0b70b902","modified":1547822610007},{"_id":"source/_posts/浅谈JS继承.md","hash":"aa2602c496789a2fbb7dc828d5b5b23453f373f1","modified":1547822216975},{"_id":"source/_posts/理解HTTP.md","hash":"f43e7cffdca2d79217c1ceadfce7ec7c897470f9","modified":1548166306491},{"_id":"source/_posts/恢复github上不显示的绿块.md","hash":"f351fd819aeb5763f39c9ac6b11d7669b656c35c","modified":1548166471009},{"_id":"source/_posts/理解JSONP-上.md","hash":"4cb5801ce994952aedd4afe1a5159f12fb4720c5","modified":1548164686451},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1547818712282},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1547818712288},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1547818384741},{"_id":"themes/next/.git/index","hash":"d6dff4fa13690ca5eb8439777ba7965db0f5d5ed","modified":1547823672515},{"_id":"source/_posts/理解虚拟-DOM.md","hash":"53ba9216bb439bcdfacfea5c3270d704c0b70d89","modified":1547822773637},{"_id":"source/_posts/JavaScript原型和原型链.md","hash":"ce1d94f996af444b3d106c409736dce8ca348126","modified":1548164997267},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1547818712278},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1547818712299},{"_id":"source/_posts/理解JSONP-下.md","hash":"f69d8fee01a0d9b7cefeba961a330e8f0b6f392b","modified":1548164751234},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1547818712300},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1547818712300},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1547818712301},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1547818712309},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1547818712307},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1547818712309},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1547818712310},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1547818712308},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1547818712310},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1547818712310},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1547818712308},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1547818712312},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1547818712311},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1547818712312},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1547818712311},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1547818712313},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1547818712312},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1547818712315},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1547818712314},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1547818712313},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1547818712347},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1547818712347},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1547818712350},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1547818712348},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1547818712346},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1547818712349},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1547818712351},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1547818712492},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1547818712347},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1547818712348},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1547818712492},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1547818712493},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712409},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1547818384741},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1547818384742},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1547818384744},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1547818384743},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1547818384744},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1547818384745},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1547818384745},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1547818384743},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1547818384746},{"_id":"themes/next/.git/logs/HEAD","hash":"d55d8e6b0aa3f2d481fc401e7885b20cdb07f262","modified":1547818712285},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1547818384746},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1547818384747},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1547818384743},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547818712314},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547818712315},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1547818712316},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1547818712316},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1547818712316},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1547818712318},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1547818712317},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1547818712317},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1547818712318},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1547818712321},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1547818712321},{"_id":"themes/next/layout/_partials/head.swig","hash":"562ca8966f077e6829050f6cb98859318523bb56","modified":1548171628727},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1547818712320},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1547818712326},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1547818712326},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1547818712321},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1547818712318},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1547818712329},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1547818712339},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1547818712341},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1547818712342},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1547818712340},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1547818712341},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1547818712352},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1547818712353},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1547818712352},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1547818712353},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1547818712354},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1547818712342},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1547818712354},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1547818712355},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1547818712355},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1547818712354},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1547818712340},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1547818712410},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1547818712409},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1547818712412},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1547818712413},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1547818712412},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547818712411},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1547818712413},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1547818712413},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547818712415},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547818712416},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1547818712414},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1547818712416},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547818712415},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1547818712414},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547818712415},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1547818712417},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547818712418},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1547818712417},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712328},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712328},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712393},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712394},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712395},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712408},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547818712407},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1547818712284},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1547818712319},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1547818712320},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1547818712324},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1547818712323},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1547818712323},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1547818712322},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547818712327},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1547818712330},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547818712328},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1547818712331},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1547818712332},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1547818712325},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1547818712330},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1547818712333},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1547818712333},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1547818712324},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1547818712332},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1547818712334},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1547818712331},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1547818712334},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1547818712325},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1547818712336},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1547818712332},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1547818712336},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1547818712338},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1547818712335},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1547818712334},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1547818712335},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1547818712338},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1547818712337},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1547818712327},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1547818712344},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1547818712339},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1547818712338},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1547818712337},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1547818712346},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1547818712344},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1547818712345},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1547818712393},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1547818712394},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1547818712395},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"b83d28d9dea377bfc32780cceef9d644058235a8","modified":1548174489277},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1547818712406},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1547818712407},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1547818712408},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1547818712408},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1547818712419},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1547818712419},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1547818712418},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1547818712421},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1547818712420},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1547818712420},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1547818712422},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1547818712423},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1547818712424},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1547818712436},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1547818712421},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1547818712423},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547818712432},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1547818712437},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1547818712446},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547818712435},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1547818712447},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1547818712449},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1547818712446},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1547818712450},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1547818712450},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1547818712449},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1547818712436},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1547818712450},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1547818712446},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1547818712469},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1547818712468},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1547818712470},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1547818712468},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1547818712471},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1547818712471},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1547818712472},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1547818712469},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1547818712479},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1547818712470},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1547818712480},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1547818712480},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547818712473},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547818712474},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547818712474},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547818712476},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547818712475},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547818712474},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547818712475},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547818712476},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547818712478},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547818712477},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547818712477},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1547818712478},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547818712473},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547818712477},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1547818712466},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1547818712490},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1547818712490},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1547818712491},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1547818712486},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1547818712487},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1547818712467},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1547818712281},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d55d8e6b0aa3f2d481fc401e7885b20cdb07f262","modified":1547818712285},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1547818712343},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1547818712357},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1547818712357},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1547818712343},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1547818712358},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1547818712361},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1547818712390},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1547818712389},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1547818712379},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1547818712358},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1547818712390},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1547818712391},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1547818712396},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1547818712392},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1547818712391},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547818712402},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1547818712402},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1547818712402},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1547818712401},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1547818712401},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1547818712405},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1547818712405},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1547818712404},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1547818712404},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1547818712406},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1547818712397},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1547818712398},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1547818712398},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1547818712396},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547818712399},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1547818712399},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1547818712397},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1547818712389},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1547818712405},{"_id":"themes/next/source/images/avatar.png","hash":"101f0deb282e6f5905b308c6c8d190776d253460","modified":1548171513341},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1547818712422},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1547818712368},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1547818712430},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1547818712429},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1547818712431},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547818712438},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547818712439},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547818712438},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547818712437},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547818712440},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547818712439},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1547818712445},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1547818712443},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1547818712444},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1547818712448},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547818712448},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1547818712451},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1547818712452},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1547818712453},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1547818712485},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1547818712485},{"_id":"themes/next/source/images/background.jpg","hash":"b65aba48643d2772d52f2619d127a3d2f4684584","modified":1548173902997},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1547818712430},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547818712465},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547818712464},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d55d8e6b0aa3f2d481fc401e7885b20cdb07f262","modified":1547818712281},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1547818712489},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1547818712361},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1547818712362},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1547818712363},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1547818712363},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1547818712366},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1547818712366},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1547818712363},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1547818712367},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1547818712367},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1547818712364},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1547818712369},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1547818712368},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1547818712370},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1547818712370},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1547818712365},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1547818712371},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1547818712369},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1547818712365},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1547818712370},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1547818712372},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1547818712362},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1547818712372},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1547818712371},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1547818712373},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1547818712373},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1547818712372},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1547818712375},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1547818712374},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1547818712374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1547818712377},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1547818712376},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1547818712376},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e6228b2cfbba7885894378a63619a9816a1d66d2","modified":1548173527215},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1547818712377},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"fc08bc1e3409733fbdbc0fcb3bb713d41a6ddc5c","modified":1548171952729},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1547818712379},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1547818712379},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1547818712378},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1547818712381},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1547818712380},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1547818712381},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1547818712380},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1547818712378},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1547818712383},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1547818712382},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1547818712383},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1547818712385},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1547818712385},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1547818712386},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1547818712386},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1547818712387},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1547818712384},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1547818712388},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1547818712388},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1547818712386},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1547818712387},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547818712403},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1547818712382},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1547818712400},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547818712400},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547818712426},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1547818712383},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547818712427},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547818712427},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1547818712428},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547818712426},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1547818712441},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547818712440},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1547818712441},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1547818712442},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1547818712443},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1547818712442},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547818712455},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547818712457},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547818712463},{"_id":"themes/next/.git/objects/pack/pack-2e8bfe0bbc40ee78847e36e8d3edd701735c6f4e.idx","hash":"50fb014b44992cfb2c56176f1defd1be870f96b9","modified":1547818712244},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1547818712434},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1547818712484},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1547818712461},{"_id":"themes/next/.git/objects/pack/pack-2e8bfe0bbc40ee78847e36e8d3edd701735c6f4e.pack","hash":"85a7403d5a07a998880356d55082d480ab60cff4","modified":1547818712246},{"_id":"public/rss2.xml","hash":"2e9434df5f5e0208a0c4e1b08c411a0fd1cf524d","modified":1551195507704},{"_id":"public/archives/2018/05/index.html","hash":"db9f8161856a7aa8b194e2ba2a72d9f5eca4b126","modified":1551195210953},{"_id":"public/archives/2018/08/index.html","hash":"ff5f4d53f5c92b3ca02f863f98d958290e5e91f0","modified":1551195210953},{"_id":"public/archives/2018/10/index.html","hash":"6adbb43589afc4d58a3074d6c646b09609e02bc1","modified":1551195210954},{"_id":"public/archives/2018/11/index.html","hash":"b4b1ee48d281988331e4afda2851c9470432d18d","modified":1551195210954},{"_id":"public/archives/2018/12/index.html","hash":"40ebbd8c9244bb6aa6b5d798579e678f3b8e05f6","modified":1551195210954},{"_id":"public/archives/2018/09/index.html","hash":"39e3d3131e1801815fdafe96506ebc83f1f82cbe","modified":1551195210954},{"_id":"public/archives/2019/01/index.html","hash":"eb55effe91c15f8fa231484fe9995ddb8cf7b3c8","modified":1551195210954},{"_id":"public/archives/2019/index.html","hash":"52e6c8d417ebbc23ee216f08919158b938c110d4","modified":1551195210954},{"_id":"public/archives/2018/07/index.html","hash":"0923de7ec3e8854ade7fe3337239eb3a5cf03c5b","modified":1551195210954},{"_id":"public/2018/11/02/浅谈JS继承/index.html","hash":"e31b541342c0f40e7442623acec41bd982f9c90d","modified":1551195507726},{"_id":"public/2018/12/29/从「从输入URL到页面加载」谈及Web性能优化/index.html","hash":"2e84eb7762891a5ceca9f46ec0e66ed2979c6794","modified":1551195210955},{"_id":"public/2018/12/20/优先级-和-CSS-预处理/index.html","hash":"3256035e7415907974c32eae096fa74aa70f396c","modified":1551195210955},{"_id":"public/2018/09/16/HTTP-学习之-Cookie/index.html","hash":"fcaac413d8c0bf67a55f30dd2972ee1577adc026","modified":1551195210955},{"_id":"public/2019/01/28/hash-模式和-history-模式小记/index.html","hash":"a85cdbcfeac52c6549703838389b2b92493dcda7","modified":1551195210955},{"_id":"public/2018/09/10/CSS常用布局-续篇/index.html","hash":"4d08aff1eab4fb16d8cac34cf109c2520a45330c","modified":1551195210955},{"_id":"public/2018/10/28/正则表达式速记/index.html","hash":"5201fc7a0677acb0320c306ed803a5663dfa516e","modified":1551195210955},{"_id":"public/2018/09/02/OOP-初探（给-MVC-添加类）/index.html","hash":"2afba78f89873f89664d74443c1a966107e4e27c","modified":1551195210955},{"_id":"public/2018/09/04/AJAX-是什么鬼/index.html","hash":"e0c0ecb6879f08db1ed89b696697e362ba995262","modified":1551195210955},{"_id":"public/2018/08/18/MVC-初尝试之-V-和-C/index.html","hash":"23894fbed4b438acae04a58d77b29d1fd92e8681","modified":1551195210956},{"_id":"public/2018/08/12/实现一个AJAX/index.html","hash":"30d8da0b2d3ddb697e66f747297648517df9e996","modified":1551195210956},{"_id":"public/2018/08/12/理解JSONP-下/index.html","hash":"18d6165060ed1ab2120573f327da9a4e30618579","modified":1551195210956},{"_id":"public/2018/08/11/Web-服务器/index.html","hash":"e9b267a71c7495b9410c4bb05b8d4bcc0488e0ca","modified":1551195210956},{"_id":"public/2018/08/11/理解JSONP-上/index.html","hash":"b073f10c0270c6cbf837c1c480d6bff3f88f8d44","modified":1551195210956},{"_id":"public/2018/07/29/实现一个-jQuery-的-API/index.html","hash":"5ee7e12950c8165ee79662bd351e2b4d9a48b380","modified":1551195210956},{"_id":"public/2018/08/27/搞懂这些-你就理解-this-了/index.html","hash":"f9a5c8d81baed14d08030a4a36983f1a9e07b594","modified":1551195210956},{"_id":"public/2018/07/16/恢复github上不显示的绿块/index.html","hash":"a3fbe7b7a4bd1647e69546046b21287c8494f06d","modified":1551195210956},{"_id":"public/2018/07/12/JavaScript原型和原型链/index.html","hash":"b958b740061aa798a7f3f5c76bbad04bb8404d18","modified":1551195210957},{"_id":"public/2018/06/22/CSS常用布局学习/index.html","hash":"7a494cae0115abf6cdb9ad6f4e3ccd17de62e4ee","modified":1551195210957},{"_id":"public/2018/06/13/HTML常用的几个标签/index.html","hash":"7b41ee1134cbb5e7a62c2b149c0251513f56d127","modified":1551195210957},{"_id":"public/2018/06/11/HTML入门笔记/index.html","hash":"0ed4e4464742d77cbc0cff8b29b07fa5bf39e85f","modified":1551195210957},{"_id":"public/2018/08/20/一次性理解立即执行函数和闭包/index.html","hash":"ff3cd36219ca7c6e4418bad385f4a5bd05f08e0d","modified":1551195210958},{"_id":"public/2018/06/08/有关-HTTP-协议（IP和端口）/index.html","hash":"777d1810f26d7d55a02b17e5fb8ed61594fd1231","modified":1551195210958},{"_id":"public/2018/06/07/理解HTTP/index.html","hash":"2ffef34503a72064c1965657bde225012cf03169","modified":1551195210958},{"_id":"public/2018/06/03/windows-7与-linux-双系统安装（免U盘）/index.html","hash":"4db60c5a14371c3c6e1258a1ef329033d33594bd","modified":1551195210958},{"_id":"public/2018/06/03/一些命令行入门学习的知识和细节/index.html","hash":"fe97ef7210b978ac954db5378daad23c9568b72e","modified":1551195210958},{"_id":"public/archives/index.html","hash":"81d7e2129f852070cc47cb1d4c27673460ab74e9","modified":1551195210958},{"_id":"public/2018/05/27/windows-7与linux双系统安装（后续）/index.html","hash":"24091b9872c074abcdd0627cf259534e19799834","modified":1551195210958},{"_id":"public/2018/06/05/git入门——在本地使用git/index.html","hash":"895d3baaf25c85ab8012f5609e031ade4a940986","modified":1551195210958},{"_id":"public/archives/page/2/index.html","hash":"ddc1e7246ee59045bb16d54138ad50c19a2767eb","modified":1551195210958},{"_id":"public/archives/2018/index.html","hash":"c63987ec36ccc7a89af1807ec6d9a49dd67765b8","modified":1551195210959},{"_id":"public/archives/page/3/index.html","hash":"d636d115d5836789520d2ce41ce2930182ffa47b","modified":1551195210959},{"_id":"public/2018/09/27/理解虚拟-DOM/index.html","hash":"0665da775537a9a5949f2245a9e7662614274a91","modified":1551195210959},{"_id":"public/archives/2018/page/2/index.html","hash":"0c6e350e571cb3014f1c2388fd56218e1be6e560","modified":1551195210959},{"_id":"public/archives/2018/page/3/index.html","hash":"74333d3af6c7c0ad3179994d84989800ab98cb10","modified":1551195210959},{"_id":"public/archives/2018/06/index.html","hash":"ffdae6ab8f1fca2497f046e9b2924a002d90da15","modified":1551195210959},{"_id":"public/index.html","hash":"45063b8adbea190fa2d87e3f4f5700dbec164d3c","modified":1551195210959},{"_id":"public/page/3/index.html","hash":"50a65de466610cffde2a5cfb85affcf1bccf0a6e","modified":1551195210959},{"_id":"public/page/2/index.html","hash":"00c83e5000e2af1829ef8e6eaac0f6702410f6ab","modified":1551195210959},{"_id":"public/archives/2019/02/index.html","hash":"1dcb5c6af81340d3cf23626a7cce2d6f38613256","modified":1551195210971},{"_id":"public/2019/02/26/Vue-全家桶学习总结/index.html","hash":"ced1d50da790963a031c68f97962bc958b3a190d","modified":1551195507726},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1551195210971},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1551195210971},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1551195210971},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1551195210972},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551195210972},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551195210972},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1551195210973},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1551195210974},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1551195210974},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1551195210974},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1551195210974},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1551195210974},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1551195210974},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551195210974},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551195210974},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1551195210974},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1551195210974},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1551195211399},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1551195211399},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1551195211400},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1551195211400},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1551195211401},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1551195211401},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1551195211401},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1551195211401},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1551195211401},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1551195211401},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1551195211401},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1551195211401},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1551195211402},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1551195211402},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1551195211402},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1551195211437},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1551195211441},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1551195211449},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1551195211449},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1551195211449},{"_id":"public/css/main.css","hash":"49c0e53cf676bc9e420f498ee988b80ff7a13761","modified":1551195211449},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551195211450},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551195211450},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1551195211464},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1551195211464},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1551195211464},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1551195211464},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1551195211464},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1551195211464},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1551195211464},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1551195211464},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1551195211464},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1551195211464},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1551195211464},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1551195211464},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1551195211464},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1551195211464},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1551195211464},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1551195211465},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1551195211465},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1551195211465},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1551195211465},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1551195211465},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1551195211465},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1551195211465},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1551195211465},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1551195211465},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1551195211466},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1551195211466},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1551195211466},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1551195211466},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1551195211466},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1551195211466},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1551195211466},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1551195211466},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1551195211466},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1551195211466},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1551195211466},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1551195211466},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1551195211466},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1551195211467},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1551195211467},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1551195211467},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1551195211467},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1551195211467},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1551195211467},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1551195211467},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1551195211467},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1551195211467},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1551195211467},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1551195211467},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1551195211467},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1551195211467},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1551195211467},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551195211467},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1551195211467},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1551195211468},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1551195211468},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1551195211468},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1551195211468},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1551195211468},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551195211468},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551195211468},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1551195211468},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1551195211468},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1551195211468},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1551195211469},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551195211469},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551195211469},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551195211469},{"_id":"public/images/avatar.png","hash":"101f0deb282e6f5905b308c6c8d190776d253460","modified":1551195211481},{"_id":"public/images/background.jpg","hash":"b65aba48643d2772d52f2619d127a3d2f4684584","modified":1551195211497},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1551195211500}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"AJAX 是什么鬼","date":"2018-09-04T12:57:25.000Z","_content":"之前写了一篇博客[理解JSONP 上](https://www.jianshu.com/p/2a2fe02917e7)关于AJAX出现之前如何发请求\n简单回顾一下：\n#### 1.用 form 可以发请求，缺点是会刷新页面或新开页面 \nform发送get请求：![](https://upload-images.jianshu.io/upload_images/7094266-8a9a80cde134701d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n输入密码后，点击提交，打开开发者工具可以看到一个get请求，点开找到Request Headers点击**view source** ![](https://upload-images.jianshu.io/upload_images/7094266-2f497d2ed697fabb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n同样可以用form发送post请求，与get请求区别是post请求没有查询参数![](https://upload-images.jianshu.io/upload_images/7094266-2a9955c21d5904d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\npost请求的第四部分 password在下面的 Form Data 的**view source** 里![](https://upload-images.jianshu.io/upload_images/7094266-c10130216b9836f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 2.用 a 可以发 get 请求，但是也会刷新页面或新开页面\n点击click就发送请求![](https://upload-images.jianshu.io/upload_images/7094266-e8ecdf0d63d5c019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n<a id=\"ada\" href=\"/ada\">click</a>\n//运行一个脚本，让网页自己点击（但是依然会刷新页面）\n<script>\n  ada.click()\n</script>\n```\n#### 3.用 img 可以发 get 请求，它不会刷新页面，但是只能以图片的形式展示\n```\n<script>\n  var image = document.createElement('img')\n  image.src = '/ada'\n  image.onload = function(){\n    console.log('succsee')\n  }\n  image.onerror = function(){\n    console.log('fail')\n  }\n</script>\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-9b2b91b49a0575b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 4.用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示\n```\n<script>\n  var link = document.createElement('link')\n  link.rel = 'stylesheet'\n  link.href = '/ada'\n  //需要将link放到页面中才能发送请求\n  document.head.appendChild(link)\n</script>\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-ff9dc05b89603af5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 5.用 script 可以发 get 请求，但是只能以脚本的形式运行\n```\n<script>\n  var script = document.createElement('script')\n  script.src = \"/ada\"\n  //需要将script放到页面中才能发送请求\n  document.head.appendChild(script)\n</script>\n```\n当然还有其他方法\n\n---\n有关AJAX的学习推荐[阮一峰博客](http://javascript.ruanyifeng.com/bom/ajax.html#toc0)\n**微软的突破**\nIE 5 率先在 JS 中引入 ActiveX 对象（API），使得 JS 可以直接发起 HTTP 请求。\n随后 Mozilla、 Safari、 Opera 也跟进了，取名 XMLHttpRequest，并被纳入 W3C 规范\n**AJAX**\nJesse James Garrett 将如下技术取名叫做 AJAX（Asynchronous JavaScript and XML）：异步的 JavaScript 和 XML\n***1.使用 XMLHttpRequest 发请求\n2.服务器返回 XML 格式的字符串\n3.JS 解析 XML，并更新局部页面***\n\n#### 同样我们用node服务器来尝试一下这三个条件(AJAX)\n新建html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    hi\n</body>\n</html>\n```\nNode代码\n```\nconsole.log('含查询字符串的路径\\n' + pathWithQuery)\n  if (path === '/') {\n    var string = fs.readFileSync('./index.html', 'utf8')\n    response.statusCode = 200\n    response.setHeader('Content-Type', 'text/html; charset=utf-8')\n    response.write(string)\n    response.end()\n  } else{\n    response.statusCode = 404\n    response.setHeader('Content-Type', 'text/html; charset=utf-8')\n    response.write('找不到服务器')\n    response.end()\n  }\n```\n对于HTTP来说，响应的第四部分始终是string![](https://upload-images.jianshu.io/upload_images/7094266-01746a588b0abc36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在 html 里创建一个button，引入当前目录下的 js 文件\n```\n<body>\n    <button id=\"myButton\">点我</button>\n    <script src=\"./main.js\"></script>\n</body>\n```\nNode代码//在原Node代码中插入，下同\n```\n//注意这里是 /main.js 而不是 ./main.js，因为HTTP请求永远是绝对路径\nelse if (path === '/main.js') {\n//这里当然是./main.js\n    var string = fs.readFileSync('./main.js', 'utf8')\n    response.statusCode = 200\n    response.setHeader('Content-Type', 'text/javascript; charset=utf-8')\n    response.write(string)\n    response.end()\n} \n```\n**首先满足1.使用 XMLHttpRequest 发请求**\n```\nmyButton.addEventListener('click', (e) => {\n    let request = new XMLHttpRequest()\n    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)\n    request.open('GET', '/ada')\n    request.send()\n})\n```\n**2.服务器返回 XML 格式的字符串**\nXML已经不流行了，但是我们依然可以尝试一下\n找一个一个XML example\n```\nelse if (path === '/ada') {\n    response.statusCode = 200\n    response.setHeader('Content-Type', 'text/xml; charset=utf-8')\n    response.write(`\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <note>\n    <to>Tove</to>\n    <from>Jani</from>\n    <heading>Reminder</heading>\n    <body>Don't forget me this weekend!</body>\n</note>`)\n    response.end()\n}\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-d5529f18c6d6d036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**3.JS 解析 XML，并更新局部页面**\n浏览器是分步下载响应的，一般只要记住 **readyState === 4** 表示请求完成![](https://upload-images.jianshu.io/upload_images/7094266-a27d3791360b1d30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以用 **onreadystatechange** 监听 readyState\n```\nmyButton.addEventListener('click', (e) => {\n    let request = new XMLHttpRequest()\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            console.log('请求响应都完成了')\n\n            if (request.status >= 200 && request.status < 300) {\n                console.log('success')\n                //响应值在300-400之间浏览器会重新发送请求\n            } else if (request.status >= 400) {\n                console.log('fail')\n            }\n\n        }\n    }\n    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)\n    request.open('GET', '/ada')\n    request.send()\n})\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-6159a07fdb534df4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果把(path === '/ada'){}里改成400  //注意不要改错地方\n```\nresponse.statusCode = 400\n```\n当然会返回 fail，可以看到 readyState 是不受状态码影响的![](https://upload-images.jianshu.io/upload_images/7094266-dc4181f8240aa1b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nJS 是可以解析 XML的，但是现在XML已经被JSON取代了，我们可以简单打印出来\n```\nconsole.log(request.responseText)\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-beb53639db92273c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n[JSON](https://www.json.org/)\nJSON是道格拉斯基于JavaScript发明的数据交换语言\n- 特点：\n  - \n  - 只有 object、array、string、number、true、false、null 这几种类型\n  - 字符串首尾必须为双引号\n```\nJS         VS         JSON\nundefined/symbel      无\nnull                  null\n['a','b']             [\"a\",\"b\"]\nfunction f(){}        无\n{a:b}                 {\"a\",\"b\"}\n'hello world'         \"hello world\"\nvar a = {}\na.self = a            无法做到{无变量等形式}\n{__proto__}           没有原型链\n```\n\n**用JSON替换XML**\nNode代码：\n```\nelse if (path === '/ada') {\n    response.statusCode = 200\n    response.setHeader('Content-Type', 'text/xml; charset=utf-8')\n//变XML为JSON，key和value都可以替换成自己喜欢的\n    response.write(`\n    {\n        \"note\":{\n        \"to\": \"reader\",\n        \"from\": \"Ada\",\n        \"heading\": \"greet\",\n        \"content\": \"hello word!\"\n    }`)\n    response.end()\n```\njs完整代码\n```\nmyButton.addEventListener('click', (e) => {\n    let request = new XMLHttpRequest()\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            console.log('请求响应都完成了')\n\n            if (request.status >= 200 && request.status < 300) {\n                console.log('success')\n                console.log(typeof request.responseText)\n                console.log(request.responseText)\n                let string = request.responseText\n                // 把符合 JSON 语法的字符串转换成 JS 对应的值\n                let object = window.JSON.parse(string)\n                // JSON.parse 是浏览器提供的\n                //响应值在300-400之间浏览器会重新发送请求\n            } else if (request.status >= 400) {\n                console.log('fail')\n            }\n\n        }\n    }\n    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)\n    request.open('GET', '/ada')\n    request.send()\n})\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-4f376b146466e10d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n## 同源政策\n同源政策规定，AJAX请求只能发给同源的网址，否则就报错。\n同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。\n文章开头提到的 form 和 a 等发送请求是没有同源政策的，而AJAX是可以读取响应内容的。\n**因此只有 协议+端口+域名 一模一样（同源）才允许发 AJAX 请求**\n---\n## 如何规避同源政策？跨域\n有关JSONP跨域在文章开头提供我的博客举过例子\n这次我们用 **CORS 跨域**\n什么是 CORS:**Cross-Origin Resource Sharing(跨域资源共享)**\n---\n同样用[理解JSONP 下](https://www.jianshu.com/p/38a72bd0e37d)博客中创建过的网站来举例子\n首先打开服务器端口![](https://upload-images.jianshu.io/upload_images/7094266-49fcd7432b2c7d59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n把请求路径改为\n```\nrequest.open('GET', 'http://jack.com:8002/ada')\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-706af4f9ecdace99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击点我![](https://upload-images.jianshu.io/upload_images/7094266-7a4b7e5d44756b7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)报错了，因为不是同源，响应完成却得不到任何内容\n\n**解决方法，在Node代码中加入一句**\n```\n//允许 http://ada.com:8001 访问我\nresponse.setHeader('Access-Control-Allow-Origin','http://ada.com:8001')\n```\n点击点我，即可向 ada.com:8001 发送请求并返回 jack.com:8002/ada 的响应内容![](https://upload-images.jianshu.io/upload_images/7094266-1797c104e4b05d76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这就是用CORS实现AJAX跨域的过程\n\n完整代码详见 [github](https://github.com/Adashuai5/node-demo/tree/master/AJAX-demo)\n\n---\n本文仅供个人学习使用","source":"_posts/AJAX-是什么鬼.md","raw":"---\ntitle: AJAX 是什么鬼\ndate: 2018-09-04 20:57:25\ntags:\n---\n之前写了一篇博客[理解JSONP 上](https://www.jianshu.com/p/2a2fe02917e7)关于AJAX出现之前如何发请求\n简单回顾一下：\n#### 1.用 form 可以发请求，缺点是会刷新页面或新开页面 \nform发送get请求：![](https://upload-images.jianshu.io/upload_images/7094266-8a9a80cde134701d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n输入密码后，点击提交，打开开发者工具可以看到一个get请求，点开找到Request Headers点击**view source** ![](https://upload-images.jianshu.io/upload_images/7094266-2f497d2ed697fabb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n同样可以用form发送post请求，与get请求区别是post请求没有查询参数![](https://upload-images.jianshu.io/upload_images/7094266-2a9955c21d5904d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\npost请求的第四部分 password在下面的 Form Data 的**view source** 里![](https://upload-images.jianshu.io/upload_images/7094266-c10130216b9836f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 2.用 a 可以发 get 请求，但是也会刷新页面或新开页面\n点击click就发送请求![](https://upload-images.jianshu.io/upload_images/7094266-e8ecdf0d63d5c019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n<a id=\"ada\" href=\"/ada\">click</a>\n//运行一个脚本，让网页自己点击（但是依然会刷新页面）\n<script>\n  ada.click()\n</script>\n```\n#### 3.用 img 可以发 get 请求，它不会刷新页面，但是只能以图片的形式展示\n```\n<script>\n  var image = document.createElement('img')\n  image.src = '/ada'\n  image.onload = function(){\n    console.log('succsee')\n  }\n  image.onerror = function(){\n    console.log('fail')\n  }\n</script>\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-9b2b91b49a0575b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 4.用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示\n```\n<script>\n  var link = document.createElement('link')\n  link.rel = 'stylesheet'\n  link.href = '/ada'\n  //需要将link放到页面中才能发送请求\n  document.head.appendChild(link)\n</script>\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-ff9dc05b89603af5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 5.用 script 可以发 get 请求，但是只能以脚本的形式运行\n```\n<script>\n  var script = document.createElement('script')\n  script.src = \"/ada\"\n  //需要将script放到页面中才能发送请求\n  document.head.appendChild(script)\n</script>\n```\n当然还有其他方法\n\n---\n有关AJAX的学习推荐[阮一峰博客](http://javascript.ruanyifeng.com/bom/ajax.html#toc0)\n**微软的突破**\nIE 5 率先在 JS 中引入 ActiveX 对象（API），使得 JS 可以直接发起 HTTP 请求。\n随后 Mozilla、 Safari、 Opera 也跟进了，取名 XMLHttpRequest，并被纳入 W3C 规范\n**AJAX**\nJesse James Garrett 将如下技术取名叫做 AJAX（Asynchronous JavaScript and XML）：异步的 JavaScript 和 XML\n***1.使用 XMLHttpRequest 发请求\n2.服务器返回 XML 格式的字符串\n3.JS 解析 XML，并更新局部页面***\n\n#### 同样我们用node服务器来尝试一下这三个条件(AJAX)\n新建html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    hi\n</body>\n</html>\n```\nNode代码\n```\nconsole.log('含查询字符串的路径\\n' + pathWithQuery)\n  if (path === '/') {\n    var string = fs.readFileSync('./index.html', 'utf8')\n    response.statusCode = 200\n    response.setHeader('Content-Type', 'text/html; charset=utf-8')\n    response.write(string)\n    response.end()\n  } else{\n    response.statusCode = 404\n    response.setHeader('Content-Type', 'text/html; charset=utf-8')\n    response.write('找不到服务器')\n    response.end()\n  }\n```\n对于HTTP来说，响应的第四部分始终是string![](https://upload-images.jianshu.io/upload_images/7094266-01746a588b0abc36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在 html 里创建一个button，引入当前目录下的 js 文件\n```\n<body>\n    <button id=\"myButton\">点我</button>\n    <script src=\"./main.js\"></script>\n</body>\n```\nNode代码//在原Node代码中插入，下同\n```\n//注意这里是 /main.js 而不是 ./main.js，因为HTTP请求永远是绝对路径\nelse if (path === '/main.js') {\n//这里当然是./main.js\n    var string = fs.readFileSync('./main.js', 'utf8')\n    response.statusCode = 200\n    response.setHeader('Content-Type', 'text/javascript; charset=utf-8')\n    response.write(string)\n    response.end()\n} \n```\n**首先满足1.使用 XMLHttpRequest 发请求**\n```\nmyButton.addEventListener('click', (e) => {\n    let request = new XMLHttpRequest()\n    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)\n    request.open('GET', '/ada')\n    request.send()\n})\n```\n**2.服务器返回 XML 格式的字符串**\nXML已经不流行了，但是我们依然可以尝试一下\n找一个一个XML example\n```\nelse if (path === '/ada') {\n    response.statusCode = 200\n    response.setHeader('Content-Type', 'text/xml; charset=utf-8')\n    response.write(`\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <note>\n    <to>Tove</to>\n    <from>Jani</from>\n    <heading>Reminder</heading>\n    <body>Don't forget me this weekend!</body>\n</note>`)\n    response.end()\n}\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-d5529f18c6d6d036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**3.JS 解析 XML，并更新局部页面**\n浏览器是分步下载响应的，一般只要记住 **readyState === 4** 表示请求完成![](https://upload-images.jianshu.io/upload_images/7094266-a27d3791360b1d30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以用 **onreadystatechange** 监听 readyState\n```\nmyButton.addEventListener('click', (e) => {\n    let request = new XMLHttpRequest()\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            console.log('请求响应都完成了')\n\n            if (request.status >= 200 && request.status < 300) {\n                console.log('success')\n                //响应值在300-400之间浏览器会重新发送请求\n            } else if (request.status >= 400) {\n                console.log('fail')\n            }\n\n        }\n    }\n    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)\n    request.open('GET', '/ada')\n    request.send()\n})\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-6159a07fdb534df4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果把(path === '/ada'){}里改成400  //注意不要改错地方\n```\nresponse.statusCode = 400\n```\n当然会返回 fail，可以看到 readyState 是不受状态码影响的![](https://upload-images.jianshu.io/upload_images/7094266-dc4181f8240aa1b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nJS 是可以解析 XML的，但是现在XML已经被JSON取代了，我们可以简单打印出来\n```\nconsole.log(request.responseText)\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-beb53639db92273c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n[JSON](https://www.json.org/)\nJSON是道格拉斯基于JavaScript发明的数据交换语言\n- 特点：\n  - \n  - 只有 object、array、string、number、true、false、null 这几种类型\n  - 字符串首尾必须为双引号\n```\nJS         VS         JSON\nundefined/symbel      无\nnull                  null\n['a','b']             [\"a\",\"b\"]\nfunction f(){}        无\n{a:b}                 {\"a\",\"b\"}\n'hello world'         \"hello world\"\nvar a = {}\na.self = a            无法做到{无变量等形式}\n{__proto__}           没有原型链\n```\n\n**用JSON替换XML**\nNode代码：\n```\nelse if (path === '/ada') {\n    response.statusCode = 200\n    response.setHeader('Content-Type', 'text/xml; charset=utf-8')\n//变XML为JSON，key和value都可以替换成自己喜欢的\n    response.write(`\n    {\n        \"note\":{\n        \"to\": \"reader\",\n        \"from\": \"Ada\",\n        \"heading\": \"greet\",\n        \"content\": \"hello word!\"\n    }`)\n    response.end()\n```\njs完整代码\n```\nmyButton.addEventListener('click', (e) => {\n    let request = new XMLHttpRequest()\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            console.log('请求响应都完成了')\n\n            if (request.status >= 200 && request.status < 300) {\n                console.log('success')\n                console.log(typeof request.responseText)\n                console.log(request.responseText)\n                let string = request.responseText\n                // 把符合 JSON 语法的字符串转换成 JS 对应的值\n                let object = window.JSON.parse(string)\n                // JSON.parse 是浏览器提供的\n                //响应值在300-400之间浏览器会重新发送请求\n            } else if (request.status >= 400) {\n                console.log('fail')\n            }\n\n        }\n    }\n    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)\n    request.open('GET', '/ada')\n    request.send()\n})\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-4f376b146466e10d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n## 同源政策\n同源政策规定，AJAX请求只能发给同源的网址，否则就报错。\n同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。\n文章开头提到的 form 和 a 等发送请求是没有同源政策的，而AJAX是可以读取响应内容的。\n**因此只有 协议+端口+域名 一模一样（同源）才允许发 AJAX 请求**\n---\n## 如何规避同源政策？跨域\n有关JSONP跨域在文章开头提供我的博客举过例子\n这次我们用 **CORS 跨域**\n什么是 CORS:**Cross-Origin Resource Sharing(跨域资源共享)**\n---\n同样用[理解JSONP 下](https://www.jianshu.com/p/38a72bd0e37d)博客中创建过的网站来举例子\n首先打开服务器端口![](https://upload-images.jianshu.io/upload_images/7094266-49fcd7432b2c7d59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n把请求路径改为\n```\nrequest.open('GET', 'http://jack.com:8002/ada')\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-706af4f9ecdace99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击点我![](https://upload-images.jianshu.io/upload_images/7094266-7a4b7e5d44756b7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)报错了，因为不是同源，响应完成却得不到任何内容\n\n**解决方法，在Node代码中加入一句**\n```\n//允许 http://ada.com:8001 访问我\nresponse.setHeader('Access-Control-Allow-Origin','http://ada.com:8001')\n```\n点击点我，即可向 ada.com:8001 发送请求并返回 jack.com:8002/ada 的响应内容![](https://upload-images.jianshu.io/upload_images/7094266-1797c104e4b05d76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这就是用CORS实现AJAX跨域的过程\n\n完整代码详见 [github](https://github.com/Adashuai5/node-demo/tree/master/AJAX-demo)\n\n---\n本文仅供个人学习使用","slug":"AJAX-是什么鬼","published":1,"updated":"2019-01-22T13:41:57.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpv20000hw99ky6543z2","content":"<p>之前写了一篇博客<a href=\"https://www.jianshu.com/p/2a2fe02917e7\" target=\"_blank\" rel=\"noopener\">理解JSONP 上</a>关于AJAX出现之前如何发请求<br>简单回顾一下：</p>\n<h4 id=\"1-用-form-可以发请求，缺点是会刷新页面或新开页面\"><a href=\"#1-用-form-可以发请求，缺点是会刷新页面或新开页面\" class=\"headerlink\" title=\"1.用 form 可以发请求，缺点是会刷新页面或新开页面\"></a>1.用 form 可以发请求，缺点是会刷新页面或新开页面</h4><p>form发送get请求：<img src=\"https://upload-images.jianshu.io/upload_images/7094266-8a9a80cde134701d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>输入密码后，点击提交，打开开发者工具可以看到一个get请求，点开找到Request Headers点击<strong>view source</strong> <img src=\"https://upload-images.jianshu.io/upload_images/7094266-2f497d2ed697fabb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>同样可以用form发送post请求，与get请求区别是post请求没有查询参数<img src=\"https://upload-images.jianshu.io/upload_images/7094266-2a9955c21d5904d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>post请求的第四部分 password在下面的 Form Data 的<strong>view source</strong> 里<img src=\"https://upload-images.jianshu.io/upload_images/7094266-c10130216b9836f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"2-用-a-可以发-get-请求，但是也会刷新页面或新开页面\"><a href=\"#2-用-a-可以发-get-请求，但是也会刷新页面或新开页面\" class=\"headerlink\" title=\"2.用 a 可以发 get 请求，但是也会刷新页面或新开页面\"></a>2.用 a 可以发 get 请求，但是也会刷新页面或新开页面</h4><p>点击click就发送请求<img src=\"https://upload-images.jianshu.io/upload_images/7094266-e8ecdf0d63d5c019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a id=&quot;ada&quot; href=&quot;/ada&quot;&gt;click&lt;/a&gt;</span><br><span class=\"line\">//运行一个脚本，让网页自己点击（但是依然会刷新页面）</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  ada.click()</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-用-img-可以发-get-请求，它不会刷新页面，但是只能以图片的形式展示\"><a href=\"#3-用-img-可以发-get-请求，它不会刷新页面，但是只能以图片的形式展示\" class=\"headerlink\" title=\"3.用 img 可以发 get 请求，它不会刷新页面，但是只能以图片的形式展示\"></a>3.用 img 可以发 get 请求，它不会刷新页面，但是只能以图片的形式展示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var image = document.createElement(&apos;img&apos;)</span><br><span class=\"line\">  image.src = &apos;/ada&apos;</span><br><span class=\"line\">  image.onload = function()&#123;</span><br><span class=\"line\">    console.log(&apos;succsee&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  image.onerror = function()&#123;</span><br><span class=\"line\">    console.log(&apos;fail&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-9b2b91b49a0575b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"4-用-link-可以发-get-请求，但是只能以-CSS、favicon-的形式展示\"><a href=\"#4-用-link-可以发-get-请求，但是只能以-CSS、favicon-的形式展示\" class=\"headerlink\" title=\"4.用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示\"></a>4.用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var link = document.createElement(&apos;link&apos;)</span><br><span class=\"line\">  link.rel = &apos;stylesheet&apos;</span><br><span class=\"line\">  link.href = &apos;/ada&apos;</span><br><span class=\"line\">  //需要将link放到页面中才能发送请求</span><br><span class=\"line\">  document.head.appendChild(link)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ff9dc05b89603af5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"5-用-script-可以发-get-请求，但是只能以脚本的形式运行\"><a href=\"#5-用-script-可以发-get-请求，但是只能以脚本的形式运行\" class=\"headerlink\" title=\"5.用 script 可以发 get 请求，但是只能以脚本的形式运行\"></a>5.用 script 可以发 get 请求，但是只能以脚本的形式运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var script = document.createElement(&apos;script&apos;)</span><br><span class=\"line\">  script.src = &quot;/ada&quot;</span><br><span class=\"line\">  //需要将script放到页面中才能发送请求</span><br><span class=\"line\">  document.head.appendChild(script)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>当然还有其他方法</p>\n<hr>\n<p>有关AJAX的学习推荐<a href=\"http://javascript.ruanyifeng.com/bom/ajax.html#toc0\" target=\"_blank\" rel=\"noopener\">阮一峰博客</a><br><strong>微软的突破</strong><br>IE 5 率先在 JS 中引入 ActiveX 对象（API），使得 JS 可以直接发起 HTTP 请求。<br>随后 Mozilla、 Safari、 Opera 也跟进了，取名 XMLHttpRequest，并被纳入 W3C 规范<br><strong>AJAX</strong><br>Jesse James Garrett 将如下技术取名叫做 AJAX（Asynchronous JavaScript and XML）：异步的 JavaScript 和 XML<br><strong><em>1.使用 XMLHttpRequest 发请求<br>2.服务器返回 XML 格式的字符串<br>3.JS 解析 XML，并更新局部页面</em></strong></p>\n<h4 id=\"同样我们用node服务器来尝试一下这三个条件-AJAX\"><a href=\"#同样我们用node服务器来尝试一下这三个条件-AJAX\" class=\"headerlink\" title=\"同样我们用node服务器来尝试一下这三个条件(AJAX)\"></a>同样我们用node服务器来尝试一下这三个条件(AJAX)</h4><p>新建html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    hi</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;含查询字符串的路径\\n&apos; + pathWithQuery)</span><br><span class=\"line\">  if (path === &apos;/&apos;) &#123;</span><br><span class=\"line\">    var string = fs.readFileSync(&apos;./index.html&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125; else&#123;</span><br><span class=\"line\">    response.statusCode = 404</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(&apos;找不到服务器&apos;)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于HTTP来说，响应的第四部分始终是string<img src=\"https://upload-images.jianshu.io/upload_images/7094266-01746a588b0abc36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>在 html 里创建一个button，引入当前目录下的 js 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;button id=&quot;myButton&quot;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码//在原Node代码中插入，下同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意这里是 /main.js 而不是 ./main.js，因为HTTP请求永远是绝对路径</span><br><span class=\"line\">else if (path === &apos;/main.js&apos;) &#123;</span><br><span class=\"line\">//这里当然是./main.js</span><br><span class=\"line\">    var string = fs.readFileSync(&apos;./main.js&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/javascript; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>首先满足1.使用 XMLHttpRequest 发请求</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)</span><br><span class=\"line\">    request.open(&apos;GET&apos;, &apos;/ada&apos;)</span><br><span class=\"line\">    request.send()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.服务器返回 XML 格式的字符串</strong><br>XML已经不流行了，但是我们依然可以尝试一下<br>找一个一个XML example<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">else if (path === &apos;/ada&apos;) &#123;</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/xml; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(`</span><br><span class=\"line\">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">    &lt;note&gt;</span><br><span class=\"line\">    &lt;to&gt;Tove&lt;/to&gt;</span><br><span class=\"line\">    &lt;from&gt;Jani&lt;/from&gt;</span><br><span class=\"line\">    &lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class=\"line\">    &lt;body&gt;Don&apos;t forget me this weekend!&lt;/body&gt;</span><br><span class=\"line\">&lt;/note&gt;`)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d5529f18c6d6d036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>3.JS 解析 XML，并更新局部页面</strong><br>浏览器是分步下载响应的，一般只要记住 <strong>readyState === 4</strong> 表示请求完成<img src=\"https://upload-images.jianshu.io/upload_images/7094266-a27d3791360b1d30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以用 <strong>onreadystatechange</strong> 监听 readyState<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            console.log(&apos;请求响应都完成了&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                console.log(&apos;success&apos;)</span><br><span class=\"line\">                //响应值在300-400之间浏览器会重新发送请求</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                console.log(&apos;fail&apos;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)</span><br><span class=\"line\">    request.open(&apos;GET&apos;, &apos;/ada&apos;)</span><br><span class=\"line\">    request.send()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-6159a07fdb534df4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>如果把(path === ‘/ada’){}里改成400  //注意不要改错地方<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.statusCode = 400</span><br></pre></td></tr></table></figure></p>\n<p>当然会返回 fail，可以看到 readyState 是不受状态码影响的<img src=\"https://upload-images.jianshu.io/upload_images/7094266-dc4181f8240aa1b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>JS 是可以解析 XML的，但是现在XML已经被JSON取代了，我们可以简单打印出来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(request.responseText)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-beb53639db92273c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p><a href=\"https://www.json.org/\" target=\"_blank\" rel=\"noopener\">JSON</a><br>JSON是道格拉斯基于JavaScript发明的数据交换语言</p>\n<ul>\n<li>特点：<ul>\n<li></li>\n<li>只有 object、array、string、number、true、false、null 这几种类型</li>\n<li>字符串首尾必须为双引号<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS         VS         JSON</span><br><span class=\"line\">undefined/symbel      无</span><br><span class=\"line\">null                  null</span><br><span class=\"line\">[&apos;a&apos;,&apos;b&apos;]             [&quot;a&quot;,&quot;b&quot;]</span><br><span class=\"line\">function f()&#123;&#125;        无</span><br><span class=\"line\">&#123;a:b&#125;                 &#123;&quot;a&quot;,&quot;b&quot;&#125;</span><br><span class=\"line\">&apos;hello world&apos;         &quot;hello world&quot;</span><br><span class=\"line\">var a = &#123;&#125;</span><br><span class=\"line\">a.self = a            无法做到&#123;无变量等形式&#125;</span><br><span class=\"line\">&#123;__proto__&#125;           没有原型链</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>用JSON替换XML</strong><br>Node代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">else if (path === &apos;/ada&apos;) &#123;</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/xml; charset=utf-8&apos;)</span><br><span class=\"line\">//变XML为JSON，key和value都可以替换成自己喜欢的</span><br><span class=\"line\">    response.write(`</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;note&quot;:&#123;</span><br><span class=\"line\">        &quot;to&quot;: &quot;reader&quot;,</span><br><span class=\"line\">        &quot;from&quot;: &quot;Ada&quot;,</span><br><span class=\"line\">        &quot;heading&quot;: &quot;greet&quot;,</span><br><span class=\"line\">        &quot;content&quot;: &quot;hello word!&quot;</span><br><span class=\"line\">    &#125;`)</span><br><span class=\"line\">    response.end()</span><br></pre></td></tr></table></figure></p>\n<p>js完整代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            console.log(&apos;请求响应都完成了&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                console.log(&apos;success&apos;)</span><br><span class=\"line\">                console.log(typeof request.responseText)</span><br><span class=\"line\">                console.log(request.responseText)</span><br><span class=\"line\">                let string = request.responseText</span><br><span class=\"line\">                // 把符合 JSON 语法的字符串转换成 JS 对应的值</span><br><span class=\"line\">                let object = window.JSON.parse(string)</span><br><span class=\"line\">                // JSON.parse 是浏览器提供的</span><br><span class=\"line\">                //响应值在300-400之间浏览器会重新发送请求</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                console.log(&apos;fail&apos;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)</span><br><span class=\"line\">    request.open(&apos;GET&apos;, &apos;/ada&apos;)</span><br><span class=\"line\">    request.send()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4f376b146466e10d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<h2 id=\"同源政策\"><a href=\"#同源政策\" class=\"headerlink\" title=\"同源政策\"></a>同源政策</h2><p>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。<br>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。<br>文章开头提到的 form 和 a 等发送请求是没有同源政策的，而AJAX是可以读取响应内容的。</p>\n<h2 id=\"因此只有-协议-端口-域名-一模一样（同源）才允许发-AJAX-请求\"><a href=\"#因此只有-协议-端口-域名-一模一样（同源）才允许发-AJAX-请求\" class=\"headerlink\" title=\"因此只有 协议+端口+域名 一模一样（同源）才允许发 AJAX 请求\"></a><strong>因此只有 协议+端口+域名 一模一样（同源）才允许发 AJAX 请求</strong></h2><h2 id=\"如何规避同源政策？跨域\"><a href=\"#如何规避同源政策？跨域\" class=\"headerlink\" title=\"如何规避同源政策？跨域\"></a>如何规避同源政策？跨域</h2><p>有关JSONP跨域在文章开头提供我的博客举过例子<br>这次我们用 <strong>CORS 跨域</strong></p>\n<h2 id=\"什么是-CORS-Cross-Origin-Resource-Sharing-跨域资源共享\"><a href=\"#什么是-CORS-Cross-Origin-Resource-Sharing-跨域资源共享\" class=\"headerlink\" title=\"什么是 CORS:Cross-Origin Resource Sharing(跨域资源共享)\"></a>什么是 CORS:<strong>Cross-Origin Resource Sharing(跨域资源共享)</strong></h2><p>同样用<a href=\"https://www.jianshu.com/p/38a72bd0e37d\" target=\"_blank\" rel=\"noopener\">理解JSONP 下</a>博客中创建过的网站来举例子<br>首先打开服务器端口<img src=\"https://upload-images.jianshu.io/upload_images/7094266-49fcd7432b2c7d59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>把请求路径改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.open(&apos;GET&apos;, &apos;http://jack.com:8002/ada&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-706af4f9ecdace99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>点击点我<img src=\"https://upload-images.jianshu.io/upload_images/7094266-7a4b7e5d44756b7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">报错了，因为不是同源，响应完成却得不到任何内容</p>\n<p><strong>解决方法，在Node代码中加入一句</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//允许 http://ada.com:8001 访问我</span><br><span class=\"line\">response.setHeader(&apos;Access-Control-Allow-Origin&apos;,&apos;http://ada.com:8001&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>点击点我，即可向 ada.com:8001 发送请求并返回 jack.com:8002/ada 的响应内容<img src=\"https://upload-images.jianshu.io/upload_images/7094266-1797c104e4b05d76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>这就是用CORS实现AJAX跨域的过程</p>\n<p>完整代码详见 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/AJAX-demo\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前写了一篇博客<a href=\"https://www.jianshu.com/p/2a2fe02917e7\" target=\"_blank\" rel=\"noopener\">理解JSONP 上</a>关于AJAX出现之前如何发请求<br>简单回顾一下：</p>\n<h4 id=\"1-用-form-可以发请求，缺点是会刷新页面或新开页面\"><a href=\"#1-用-form-可以发请求，缺点是会刷新页面或新开页面\" class=\"headerlink\" title=\"1.用 form 可以发请求，缺点是会刷新页面或新开页面\"></a>1.用 form 可以发请求，缺点是会刷新页面或新开页面</h4><p>form发送get请求：<img src=\"https://upload-images.jianshu.io/upload_images/7094266-8a9a80cde134701d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>输入密码后，点击提交，打开开发者工具可以看到一个get请求，点开找到Request Headers点击<strong>view source</strong> <img src=\"https://upload-images.jianshu.io/upload_images/7094266-2f497d2ed697fabb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>同样可以用form发送post请求，与get请求区别是post请求没有查询参数<img src=\"https://upload-images.jianshu.io/upload_images/7094266-2a9955c21d5904d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>post请求的第四部分 password在下面的 Form Data 的<strong>view source</strong> 里<img src=\"https://upload-images.jianshu.io/upload_images/7094266-c10130216b9836f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"2-用-a-可以发-get-请求，但是也会刷新页面或新开页面\"><a href=\"#2-用-a-可以发-get-请求，但是也会刷新页面或新开页面\" class=\"headerlink\" title=\"2.用 a 可以发 get 请求，但是也会刷新页面或新开页面\"></a>2.用 a 可以发 get 请求，但是也会刷新页面或新开页面</h4><p>点击click就发送请求<img src=\"https://upload-images.jianshu.io/upload_images/7094266-e8ecdf0d63d5c019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a id=&quot;ada&quot; href=&quot;/ada&quot;&gt;click&lt;/a&gt;</span><br><span class=\"line\">//运行一个脚本，让网页自己点击（但是依然会刷新页面）</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  ada.click()</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-用-img-可以发-get-请求，它不会刷新页面，但是只能以图片的形式展示\"><a href=\"#3-用-img-可以发-get-请求，它不会刷新页面，但是只能以图片的形式展示\" class=\"headerlink\" title=\"3.用 img 可以发 get 请求，它不会刷新页面，但是只能以图片的形式展示\"></a>3.用 img 可以发 get 请求，它不会刷新页面，但是只能以图片的形式展示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var image = document.createElement(&apos;img&apos;)</span><br><span class=\"line\">  image.src = &apos;/ada&apos;</span><br><span class=\"line\">  image.onload = function()&#123;</span><br><span class=\"line\">    console.log(&apos;succsee&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  image.onerror = function()&#123;</span><br><span class=\"line\">    console.log(&apos;fail&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-9b2b91b49a0575b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"4-用-link-可以发-get-请求，但是只能以-CSS、favicon-的形式展示\"><a href=\"#4-用-link-可以发-get-请求，但是只能以-CSS、favicon-的形式展示\" class=\"headerlink\" title=\"4.用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示\"></a>4.用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var link = document.createElement(&apos;link&apos;)</span><br><span class=\"line\">  link.rel = &apos;stylesheet&apos;</span><br><span class=\"line\">  link.href = &apos;/ada&apos;</span><br><span class=\"line\">  //需要将link放到页面中才能发送请求</span><br><span class=\"line\">  document.head.appendChild(link)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ff9dc05b89603af5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"5-用-script-可以发-get-请求，但是只能以脚本的形式运行\"><a href=\"#5-用-script-可以发-get-请求，但是只能以脚本的形式运行\" class=\"headerlink\" title=\"5.用 script 可以发 get 请求，但是只能以脚本的形式运行\"></a>5.用 script 可以发 get 请求，但是只能以脚本的形式运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var script = document.createElement(&apos;script&apos;)</span><br><span class=\"line\">  script.src = &quot;/ada&quot;</span><br><span class=\"line\">  //需要将script放到页面中才能发送请求</span><br><span class=\"line\">  document.head.appendChild(script)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>当然还有其他方法</p>\n<hr>\n<p>有关AJAX的学习推荐<a href=\"http://javascript.ruanyifeng.com/bom/ajax.html#toc0\" target=\"_blank\" rel=\"noopener\">阮一峰博客</a><br><strong>微软的突破</strong><br>IE 5 率先在 JS 中引入 ActiveX 对象（API），使得 JS 可以直接发起 HTTP 请求。<br>随后 Mozilla、 Safari、 Opera 也跟进了，取名 XMLHttpRequest，并被纳入 W3C 规范<br><strong>AJAX</strong><br>Jesse James Garrett 将如下技术取名叫做 AJAX（Asynchronous JavaScript and XML）：异步的 JavaScript 和 XML<br><strong><em>1.使用 XMLHttpRequest 发请求<br>2.服务器返回 XML 格式的字符串<br>3.JS 解析 XML，并更新局部页面</em></strong></p>\n<h4 id=\"同样我们用node服务器来尝试一下这三个条件-AJAX\"><a href=\"#同样我们用node服务器来尝试一下这三个条件-AJAX\" class=\"headerlink\" title=\"同样我们用node服务器来尝试一下这三个条件(AJAX)\"></a>同样我们用node服务器来尝试一下这三个条件(AJAX)</h4><p>新建html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    hi</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;含查询字符串的路径\\n&apos; + pathWithQuery)</span><br><span class=\"line\">  if (path === &apos;/&apos;) &#123;</span><br><span class=\"line\">    var string = fs.readFileSync(&apos;./index.html&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125; else&#123;</span><br><span class=\"line\">    response.statusCode = 404</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(&apos;找不到服务器&apos;)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于HTTP来说，响应的第四部分始终是string<img src=\"https://upload-images.jianshu.io/upload_images/7094266-01746a588b0abc36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>在 html 里创建一个button，引入当前目录下的 js 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;button id=&quot;myButton&quot;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码//在原Node代码中插入，下同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意这里是 /main.js 而不是 ./main.js，因为HTTP请求永远是绝对路径</span><br><span class=\"line\">else if (path === &apos;/main.js&apos;) &#123;</span><br><span class=\"line\">//这里当然是./main.js</span><br><span class=\"line\">    var string = fs.readFileSync(&apos;./main.js&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/javascript; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>首先满足1.使用 XMLHttpRequest 发请求</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)</span><br><span class=\"line\">    request.open(&apos;GET&apos;, &apos;/ada&apos;)</span><br><span class=\"line\">    request.send()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.服务器返回 XML 格式的字符串</strong><br>XML已经不流行了，但是我们依然可以尝试一下<br>找一个一个XML example<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">else if (path === &apos;/ada&apos;) &#123;</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/xml; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(`</span><br><span class=\"line\">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">    &lt;note&gt;</span><br><span class=\"line\">    &lt;to&gt;Tove&lt;/to&gt;</span><br><span class=\"line\">    &lt;from&gt;Jani&lt;/from&gt;</span><br><span class=\"line\">    &lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class=\"line\">    &lt;body&gt;Don&apos;t forget me this weekend!&lt;/body&gt;</span><br><span class=\"line\">&lt;/note&gt;`)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d5529f18c6d6d036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>3.JS 解析 XML，并更新局部页面</strong><br>浏览器是分步下载响应的，一般只要记住 <strong>readyState === 4</strong> 表示请求完成<img src=\"https://upload-images.jianshu.io/upload_images/7094266-a27d3791360b1d30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以用 <strong>onreadystatechange</strong> 监听 readyState<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            console.log(&apos;请求响应都完成了&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                console.log(&apos;success&apos;)</span><br><span class=\"line\">                //响应值在300-400之间浏览器会重新发送请求</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                console.log(&apos;fail&apos;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)</span><br><span class=\"line\">    request.open(&apos;GET&apos;, &apos;/ada&apos;)</span><br><span class=\"line\">    request.send()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-6159a07fdb534df4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>如果把(path === ‘/ada’){}里改成400  //注意不要改错地方<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.statusCode = 400</span><br></pre></td></tr></table></figure></p>\n<p>当然会返回 fail，可以看到 readyState 是不受状态码影响的<img src=\"https://upload-images.jianshu.io/upload_images/7094266-dc4181f8240aa1b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>JS 是可以解析 XML的，但是现在XML已经被JSON取代了，我们可以简单打印出来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(request.responseText)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-beb53639db92273c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p><a href=\"https://www.json.org/\" target=\"_blank\" rel=\"noopener\">JSON</a><br>JSON是道格拉斯基于JavaScript发明的数据交换语言</p>\n<ul>\n<li>特点：<ul>\n<li></li>\n<li>只有 object、array、string、number、true、false、null 这几种类型</li>\n<li>字符串首尾必须为双引号<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS         VS         JSON</span><br><span class=\"line\">undefined/symbel      无</span><br><span class=\"line\">null                  null</span><br><span class=\"line\">[&apos;a&apos;,&apos;b&apos;]             [&quot;a&quot;,&quot;b&quot;]</span><br><span class=\"line\">function f()&#123;&#125;        无</span><br><span class=\"line\">&#123;a:b&#125;                 &#123;&quot;a&quot;,&quot;b&quot;&#125;</span><br><span class=\"line\">&apos;hello world&apos;         &quot;hello world&quot;</span><br><span class=\"line\">var a = &#123;&#125;</span><br><span class=\"line\">a.self = a            无法做到&#123;无变量等形式&#125;</span><br><span class=\"line\">&#123;__proto__&#125;           没有原型链</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>用JSON替换XML</strong><br>Node代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">else if (path === &apos;/ada&apos;) &#123;</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/xml; charset=utf-8&apos;)</span><br><span class=\"line\">//变XML为JSON，key和value都可以替换成自己喜欢的</span><br><span class=\"line\">    response.write(`</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;note&quot;:&#123;</span><br><span class=\"line\">        &quot;to&quot;: &quot;reader&quot;,</span><br><span class=\"line\">        &quot;from&quot;: &quot;Ada&quot;,</span><br><span class=\"line\">        &quot;heading&quot;: &quot;greet&quot;,</span><br><span class=\"line\">        &quot;content&quot;: &quot;hello word!&quot;</span><br><span class=\"line\">    &#125;`)</span><br><span class=\"line\">    response.end()</span><br></pre></td></tr></table></figure></p>\n<p>js完整代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            console.log(&apos;请求响应都完成了&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                console.log(&apos;success&apos;)</span><br><span class=\"line\">                console.log(typeof request.responseText)</span><br><span class=\"line\">                console.log(request.responseText)</span><br><span class=\"line\">                let string = request.responseText</span><br><span class=\"line\">                // 把符合 JSON 语法的字符串转换成 JS 对应的值</span><br><span class=\"line\">                let object = window.JSON.parse(string)</span><br><span class=\"line\">                // JSON.parse 是浏览器提供的</span><br><span class=\"line\">                //响应值在300-400之间浏览器会重新发送请求</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                console.log(&apos;fail&apos;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //初始化请求，参数为:method,url,async(异步状态下才是AJAX),user,password(后三个参数一般默认)</span><br><span class=\"line\">    request.open(&apos;GET&apos;, &apos;/ada&apos;)</span><br><span class=\"line\">    request.send()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4f376b146466e10d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<h2 id=\"同源政策\"><a href=\"#同源政策\" class=\"headerlink\" title=\"同源政策\"></a>同源政策</h2><p>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。<br>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。<br>文章开头提到的 form 和 a 等发送请求是没有同源政策的，而AJAX是可以读取响应内容的。</p>\n<h2 id=\"因此只有-协议-端口-域名-一模一样（同源）才允许发-AJAX-请求\"><a href=\"#因此只有-协议-端口-域名-一模一样（同源）才允许发-AJAX-请求\" class=\"headerlink\" title=\"因此只有 协议+端口+域名 一模一样（同源）才允许发 AJAX 请求\"></a><strong>因此只有 协议+端口+域名 一模一样（同源）才允许发 AJAX 请求</strong></h2><h2 id=\"如何规避同源政策？跨域\"><a href=\"#如何规避同源政策？跨域\" class=\"headerlink\" title=\"如何规避同源政策？跨域\"></a>如何规避同源政策？跨域</h2><p>有关JSONP跨域在文章开头提供我的博客举过例子<br>这次我们用 <strong>CORS 跨域</strong></p>\n<h2 id=\"什么是-CORS-Cross-Origin-Resource-Sharing-跨域资源共享\"><a href=\"#什么是-CORS-Cross-Origin-Resource-Sharing-跨域资源共享\" class=\"headerlink\" title=\"什么是 CORS:Cross-Origin Resource Sharing(跨域资源共享)\"></a>什么是 CORS:<strong>Cross-Origin Resource Sharing(跨域资源共享)</strong></h2><p>同样用<a href=\"https://www.jianshu.com/p/38a72bd0e37d\" target=\"_blank\" rel=\"noopener\">理解JSONP 下</a>博客中创建过的网站来举例子<br>首先打开服务器端口<img src=\"https://upload-images.jianshu.io/upload_images/7094266-49fcd7432b2c7d59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>把请求路径改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.open(&apos;GET&apos;, &apos;http://jack.com:8002/ada&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-706af4f9ecdace99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>点击点我<img src=\"https://upload-images.jianshu.io/upload_images/7094266-7a4b7e5d44756b7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">报错了，因为不是同源，响应完成却得不到任何内容</p>\n<p><strong>解决方法，在Node代码中加入一句</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//允许 http://ada.com:8001 访问我</span><br><span class=\"line\">response.setHeader(&apos;Access-Control-Allow-Origin&apos;,&apos;http://ada.com:8001&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>点击点我，即可向 ada.com:8001 发送请求并返回 jack.com:8002/ada 的响应内容<img src=\"https://upload-images.jianshu.io/upload_images/7094266-1797c104e4b05d76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>这就是用CORS实现AJAX跨域的过程</p>\n<p>完整代码详见 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/AJAX-demo\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n"},{"title":"CSS常用布局学习","date":"2018-06-22T14:35:31.000Z","_content":"最近开始学习CSS，了解了一些基础和常规写法。CSS的知识十分复杂，是值得不断发掘和完善的一个前端模块。对于新人来说，最好的方法就是尝试，去模仿，遇到问题再去深入，一点一点得增加对CSS的基础的理解。\n\nCSS布局对于新人来说，是一个比较基础的难点，首先我们应该理解一些常用的布局属性\n\n[学习CSS布局](http://zh.learnlayout.com/) 通过这以网站，学习**'display'**，**'position'** 以及 **'float' **等属性，加深对其认识。\n\n![](https://upload-images.jianshu.io/upload_images/7094266-da5183cded1d63d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* * *\n\n下面介绍几种常用的布局方法\n\n# 1.左右布局\n\n1.1.用 **'float' **实现左右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-36b825766bb976e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n只要设定两个布局块的宽度总和为 '**container'(容器) **的宽，那么俩个class的float属性可均为 **'float:left;' **\n\n也可以用以下方法让右边块级元素自适应左边达到左右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-95e2ada432bbbcee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n即给 **'right'** 的宽度加上 **'margin-left'**\n\n1.2.用** 'position' **实现左右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-5711c22ce85c4def.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n父元素设置为**position:relative;**\n\nleft设置固定宽度，设定为**绝对定位'position:absolute'**。\n\nright设置为**相对定位'position:relative'**。\n\nright设置左边距，**'margin-left' **为左侧栏的宽度。\n\n# 2.左中右布局\n\n2.1.用 **'float' **实现左右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4af2cbc2a81b81ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其原理与 **'float' **左右布局一样，且也可以用自适应。\n\n值得注意的是 **'middle' **所在块与 **'left' **所在块一样，要用 **'float:left;' **\n\n而 **'right'** 所在块可以用 **'float:left'** 或 **'float:right;'** 以及自适应。\n\n2.2.用** 'position' **实现左中右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-83bd3380ae9c53c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n原理与前面类似，值得注意的是，我们要调整一下html的布局，保证 **'right' **列div在 **'middle' **列div前，不然会出现第三块换行显示的情况，此问题涉及**文档流**\n\n**文档流：**文档内元素的流动方向：内联元素从左往右，宽度不够另起一行继续；块级元素，每一块占一行，从上到下依次往下\n\n所以同理，2.1.中**'middle' **若用自适应，也要调整html与上面一样\n\n# 3.水平居中\n\n其实前面已经用到了水平居中的方法\n\n**margin: 0 auto;** 常用于块级元素\n\n![](https://upload-images.jianshu.io/upload_images/7094266-467bc19891cc934f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当然还有其他水平居中及垂直居中的方法，网上有很多相关博客。如[16种方法实现水平居中垂直居中](http://louiszhai.github.io/2016/03/12/css-center/)\n\n* * *\n\n另外，如何实现将垂直元素变成水平，也可以用**'float:left;'**\n\n方法如下：\n\n1.给所有的子元素加 **float:left**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ef4aadee77723993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.给父元素加 **clearfix 类 **（其目的是去掉**float:left **产生的bug，一定会有bug，因此一定要加上）\n\n![](https://upload-images.jianshu.io/upload_images/7094266-d7be5e5d7ed3302e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**clearfix 类**写法如下\n\n![](https://upload-images.jianshu.io/upload_images/7094266-0b746da3ed8fa6cb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* * *\n\n通过上述知识，相信你对**'display'**，**'position'** 以及 **'float'** 等属性已经有所认识。后续学习过程中了解了 **'flex'**属性（其实[学习CSS布局](https://link.zhihu.com/?target=http%3A//zh.learnlayout.com/toc.html)里提到了，有兴趣可以看MDN文档，但是看文档很多时候不能快速理解）推荐看看大佬们的博客，这里推荐阮一峰老师关于**'flex'布局**的[博客](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)，上述1，2种布局方式现已经不提倡，**'flex'**是个强大的属性，**'flex'布局**应作为布局的首选。\n\n本文主要用于个人学习使用，如有侵权请联系我删除\n\n主要参考：\n\n[学习CSS布局](http://zh.learnlayout.com/toc.html)\n\n[CSS常见布局](https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/css-layout.html)\n\n[DIV+CSS页面基本布局总结](https://www.jianshu.com/p/c6673f8a6a5a)\n\n[16种方法实现水平居中垂直居中](http://louiszhai.github.io/2016/03/12/css-center/)\n","source":"_posts/CSS常用布局学习.md","raw":"---\ntitle: CSS常用布局学习\ndate: 2018-06-22 22:35:31\ntags:\n---\n最近开始学习CSS，了解了一些基础和常规写法。CSS的知识十分复杂，是值得不断发掘和完善的一个前端模块。对于新人来说，最好的方法就是尝试，去模仿，遇到问题再去深入，一点一点得增加对CSS的基础的理解。\n\nCSS布局对于新人来说，是一个比较基础的难点，首先我们应该理解一些常用的布局属性\n\n[学习CSS布局](http://zh.learnlayout.com/) 通过这以网站，学习**'display'**，**'position'** 以及 **'float' **等属性，加深对其认识。\n\n![](https://upload-images.jianshu.io/upload_images/7094266-da5183cded1d63d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* * *\n\n下面介绍几种常用的布局方法\n\n# 1.左右布局\n\n1.1.用 **'float' **实现左右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-36b825766bb976e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n只要设定两个布局块的宽度总和为 '**container'(容器) **的宽，那么俩个class的float属性可均为 **'float:left;' **\n\n也可以用以下方法让右边块级元素自适应左边达到左右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-95e2ada432bbbcee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n即给 **'right'** 的宽度加上 **'margin-left'**\n\n1.2.用** 'position' **实现左右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-5711c22ce85c4def.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n父元素设置为**position:relative;**\n\nleft设置固定宽度，设定为**绝对定位'position:absolute'**。\n\nright设置为**相对定位'position:relative'**。\n\nright设置左边距，**'margin-left' **为左侧栏的宽度。\n\n# 2.左中右布局\n\n2.1.用 **'float' **实现左右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4af2cbc2a81b81ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其原理与 **'float' **左右布局一样，且也可以用自适应。\n\n值得注意的是 **'middle' **所在块与 **'left' **所在块一样，要用 **'float:left;' **\n\n而 **'right'** 所在块可以用 **'float:left'** 或 **'float:right;'** 以及自适应。\n\n2.2.用** 'position' **实现左中右布局\n\n![](https://upload-images.jianshu.io/upload_images/7094266-83bd3380ae9c53c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n原理与前面类似，值得注意的是，我们要调整一下html的布局，保证 **'right' **列div在 **'middle' **列div前，不然会出现第三块换行显示的情况，此问题涉及**文档流**\n\n**文档流：**文档内元素的流动方向：内联元素从左往右，宽度不够另起一行继续；块级元素，每一块占一行，从上到下依次往下\n\n所以同理，2.1.中**'middle' **若用自适应，也要调整html与上面一样\n\n# 3.水平居中\n\n其实前面已经用到了水平居中的方法\n\n**margin: 0 auto;** 常用于块级元素\n\n![](https://upload-images.jianshu.io/upload_images/7094266-467bc19891cc934f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当然还有其他水平居中及垂直居中的方法，网上有很多相关博客。如[16种方法实现水平居中垂直居中](http://louiszhai.github.io/2016/03/12/css-center/)\n\n* * *\n\n另外，如何实现将垂直元素变成水平，也可以用**'float:left;'**\n\n方法如下：\n\n1.给所有的子元素加 **float:left**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ef4aadee77723993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.给父元素加 **clearfix 类 **（其目的是去掉**float:left **产生的bug，一定会有bug，因此一定要加上）\n\n![](https://upload-images.jianshu.io/upload_images/7094266-d7be5e5d7ed3302e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**clearfix 类**写法如下\n\n![](https://upload-images.jianshu.io/upload_images/7094266-0b746da3ed8fa6cb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* * *\n\n通过上述知识，相信你对**'display'**，**'position'** 以及 **'float'** 等属性已经有所认识。后续学习过程中了解了 **'flex'**属性（其实[学习CSS布局](https://link.zhihu.com/?target=http%3A//zh.learnlayout.com/toc.html)里提到了，有兴趣可以看MDN文档，但是看文档很多时候不能快速理解）推荐看看大佬们的博客，这里推荐阮一峰老师关于**'flex'布局**的[博客](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)，上述1，2种布局方式现已经不提倡，**'flex'**是个强大的属性，**'flex'布局**应作为布局的首选。\n\n本文主要用于个人学习使用，如有侵权请联系我删除\n\n主要参考：\n\n[学习CSS布局](http://zh.learnlayout.com/toc.html)\n\n[CSS常见布局](https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/css-layout.html)\n\n[DIV+CSS页面基本布局总结](https://www.jianshu.com/p/c6673f8a6a5a)\n\n[16种方法实现水平居中垂直居中](http://louiszhai.github.io/2016/03/12/css-center/)\n","slug":"CSS常用布局学习","published":1,"updated":"2019-01-22T13:59:33.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpv60001hw99ugbgwco2","content":"<p>最近开始学习CSS，了解了一些基础和常规写法。CSS的知识十分复杂，是值得不断发掘和完善的一个前端模块。对于新人来说，最好的方法就是尝试，去模仿，遇到问题再去深入，一点一点得增加对CSS的基础的理解。</p>\n<p>CSS布局对于新人来说，是一个比较基础的难点，首先我们应该理解一些常用的布局属性</p>\n<p><a href=\"http://zh.learnlayout.com/\" target=\"_blank\" rel=\"noopener\">学习CSS布局</a> 通过这以网站，学习<strong>‘display’</strong>，<strong>‘position’</strong> 以及 <strong>‘float’ </strong>等属性，加深对其认识。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-da5183cded1d63d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p>下面介绍几种常用的布局方法</p>\n<h1 id=\"1-左右布局\"><a href=\"#1-左右布局\" class=\"headerlink\" title=\"1.左右布局\"></a>1.左右布局</h1><p>1.1.用 <strong>‘float’ </strong>实现左右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-36b825766bb976e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>只要设定两个布局块的宽度总和为 ‘<strong>container’(容器) </strong>的宽，那么俩个class的float属性可均为 <strong>‘float:left;’ </strong></p>\n<p>也可以用以下方法让右边块级元素自适应左边达到左右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-95e2ada432bbbcee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>即给 <strong>‘right’</strong> 的宽度加上 <strong>‘margin-left’</strong></p>\n<p>1.2.用<strong> ‘position’ </strong>实现左右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5711c22ce85c4def.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>父元素设置为<strong>position:relative;</strong></p>\n<p>left设置固定宽度，设定为<strong>绝对定位’position:absolute’</strong>。</p>\n<p>right设置为<strong>相对定位’position:relative’</strong>。</p>\n<p>right设置左边距，<strong>‘margin-left’ </strong>为左侧栏的宽度。</p>\n<h1 id=\"2-左中右布局\"><a href=\"#2-左中右布局\" class=\"headerlink\" title=\"2.左中右布局\"></a>2.左中右布局</h1><p>2.1.用 <strong>‘float’ </strong>实现左右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4af2cbc2a81b81ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>其原理与 <strong>‘float’ </strong>左右布局一样，且也可以用自适应。</p>\n<p>值得注意的是 <strong>‘middle’ </strong>所在块与 <strong>‘left’ </strong>所在块一样，要用 <strong>‘float:left;’ </strong></p>\n<p>而 <strong>‘right’</strong> 所在块可以用 <strong>‘float:left’</strong> 或 <strong>‘float:right;’</strong> 以及自适应。</p>\n<p>2.2.用<strong> ‘position’ </strong>实现左中右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-83bd3380ae9c53c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>原理与前面类似，值得注意的是，我们要调整一下html的布局，保证 <strong>‘right’ </strong>列div在 <strong>‘middle’ </strong>列div前，不然会出现第三块换行显示的情况，此问题涉及<strong>文档流</strong></p>\n<p><strong>文档流：</strong>文档内元素的流动方向：内联元素从左往右，宽度不够另起一行继续；块级元素，每一块占一行，从上到下依次往下</p>\n<p>所以同理，2.1.中<strong>‘middle’ </strong>若用自适应，也要调整html与上面一样</p>\n<h1 id=\"3-水平居中\"><a href=\"#3-水平居中\" class=\"headerlink\" title=\"3.水平居中\"></a>3.水平居中</h1><p>其实前面已经用到了水平居中的方法</p>\n<p><strong>margin: 0 auto;</strong> 常用于块级元素</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-467bc19891cc934f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>当然还有其他水平居中及垂直居中的方法，网上有很多相关博客。如<a href=\"http://louiszhai.github.io/2016/03/12/css-center/\" target=\"_blank\" rel=\"noopener\">16种方法实现水平居中垂直居中</a></p>\n<hr>\n<p>另外，如何实现将垂直元素变成水平，也可以用<strong>‘float:left;’</strong></p>\n<p>方法如下：</p>\n<p>1.给所有的子元素加 <strong>float:left</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ef4aadee77723993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>2.给父元素加 <strong>clearfix 类 </strong>（其目的是去掉<strong>float:left </strong>产生的bug，一定会有bug，因此一定要加上）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d7be5e5d7ed3302e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>clearfix 类</strong>写法如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0b746da3ed8fa6cb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p>通过上述知识，相信你对<strong>‘display’</strong>，<strong>‘position’</strong> 以及 <strong>‘float’</strong> 等属性已经有所认识。后续学习过程中了解了 <strong>‘flex’</strong>属性（其实<a href=\"https://link.zhihu.com/?target=http%3A//zh.learnlayout.com/toc.html\" target=\"_blank\" rel=\"noopener\">学习CSS布局</a>里提到了，有兴趣可以看MDN文档，但是看文档很多时候不能快速理解）推荐看看大佬们的博客，这里推荐阮一峰老师关于<strong>‘flex’布局</strong>的<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">博客</a>，上述1，2种布局方式现已经不提倡，<strong>‘flex’</strong>是个强大的属性，<strong>‘flex’布局</strong>应作为布局的首选。</p>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除</p>\n<p>主要参考：</p>\n<p><a href=\"http://zh.learnlayout.com/toc.html\" target=\"_blank\" rel=\"noopener\">学习CSS布局</a></p>\n<p><a href=\"https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/css-layout.html\" target=\"_blank\" rel=\"noopener\">CSS常见布局</a></p>\n<p><a href=\"https://www.jianshu.com/p/c6673f8a6a5a\" target=\"_blank\" rel=\"noopener\">DIV+CSS页面基本布局总结</a></p>\n<p><a href=\"http://louiszhai.github.io/2016/03/12/css-center/\" target=\"_blank\" rel=\"noopener\">16种方法实现水平居中垂直居中</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近开始学习CSS，了解了一些基础和常规写法。CSS的知识十分复杂，是值得不断发掘和完善的一个前端模块。对于新人来说，最好的方法就是尝试，去模仿，遇到问题再去深入，一点一点得增加对CSS的基础的理解。</p>\n<p>CSS布局对于新人来说，是一个比较基础的难点，首先我们应该理解一些常用的布局属性</p>\n<p><a href=\"http://zh.learnlayout.com/\" target=\"_blank\" rel=\"noopener\">学习CSS布局</a> 通过这以网站，学习<strong>‘display’</strong>，<strong>‘position’</strong> 以及 <strong>‘float’ </strong>等属性，加深对其认识。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-da5183cded1d63d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p>下面介绍几种常用的布局方法</p>\n<h1 id=\"1-左右布局\"><a href=\"#1-左右布局\" class=\"headerlink\" title=\"1.左右布局\"></a>1.左右布局</h1><p>1.1.用 <strong>‘float’ </strong>实现左右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-36b825766bb976e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>只要设定两个布局块的宽度总和为 ‘<strong>container’(容器) </strong>的宽，那么俩个class的float属性可均为 <strong>‘float:left;’ </strong></p>\n<p>也可以用以下方法让右边块级元素自适应左边达到左右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-95e2ada432bbbcee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>即给 <strong>‘right’</strong> 的宽度加上 <strong>‘margin-left’</strong></p>\n<p>1.2.用<strong> ‘position’ </strong>实现左右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5711c22ce85c4def.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>父元素设置为<strong>position:relative;</strong></p>\n<p>left设置固定宽度，设定为<strong>绝对定位’position:absolute’</strong>。</p>\n<p>right设置为<strong>相对定位’position:relative’</strong>。</p>\n<p>right设置左边距，<strong>‘margin-left’ </strong>为左侧栏的宽度。</p>\n<h1 id=\"2-左中右布局\"><a href=\"#2-左中右布局\" class=\"headerlink\" title=\"2.左中右布局\"></a>2.左中右布局</h1><p>2.1.用 <strong>‘float’ </strong>实现左右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4af2cbc2a81b81ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>其原理与 <strong>‘float’ </strong>左右布局一样，且也可以用自适应。</p>\n<p>值得注意的是 <strong>‘middle’ </strong>所在块与 <strong>‘left’ </strong>所在块一样，要用 <strong>‘float:left;’ </strong></p>\n<p>而 <strong>‘right’</strong> 所在块可以用 <strong>‘float:left’</strong> 或 <strong>‘float:right;’</strong> 以及自适应。</p>\n<p>2.2.用<strong> ‘position’ </strong>实现左中右布局</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-83bd3380ae9c53c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>原理与前面类似，值得注意的是，我们要调整一下html的布局，保证 <strong>‘right’ </strong>列div在 <strong>‘middle’ </strong>列div前，不然会出现第三块换行显示的情况，此问题涉及<strong>文档流</strong></p>\n<p><strong>文档流：</strong>文档内元素的流动方向：内联元素从左往右，宽度不够另起一行继续；块级元素，每一块占一行，从上到下依次往下</p>\n<p>所以同理，2.1.中<strong>‘middle’ </strong>若用自适应，也要调整html与上面一样</p>\n<h1 id=\"3-水平居中\"><a href=\"#3-水平居中\" class=\"headerlink\" title=\"3.水平居中\"></a>3.水平居中</h1><p>其实前面已经用到了水平居中的方法</p>\n<p><strong>margin: 0 auto;</strong> 常用于块级元素</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-467bc19891cc934f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>当然还有其他水平居中及垂直居中的方法，网上有很多相关博客。如<a href=\"http://louiszhai.github.io/2016/03/12/css-center/\" target=\"_blank\" rel=\"noopener\">16种方法实现水平居中垂直居中</a></p>\n<hr>\n<p>另外，如何实现将垂直元素变成水平，也可以用<strong>‘float:left;’</strong></p>\n<p>方法如下：</p>\n<p>1.给所有的子元素加 <strong>float:left</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ef4aadee77723993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>2.给父元素加 <strong>clearfix 类 </strong>（其目的是去掉<strong>float:left </strong>产生的bug，一定会有bug，因此一定要加上）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d7be5e5d7ed3302e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>clearfix 类</strong>写法如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0b746da3ed8fa6cb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p>通过上述知识，相信你对<strong>‘display’</strong>，<strong>‘position’</strong> 以及 <strong>‘float’</strong> 等属性已经有所认识。后续学习过程中了解了 <strong>‘flex’</strong>属性（其实<a href=\"https://link.zhihu.com/?target=http%3A//zh.learnlayout.com/toc.html\" target=\"_blank\" rel=\"noopener\">学习CSS布局</a>里提到了，有兴趣可以看MDN文档，但是看文档很多时候不能快速理解）推荐看看大佬们的博客，这里推荐阮一峰老师关于<strong>‘flex’布局</strong>的<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">博客</a>，上述1，2种布局方式现已经不提倡，<strong>‘flex’</strong>是个强大的属性，<strong>‘flex’布局</strong>应作为布局的首选。</p>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除</p>\n<p>主要参考：</p>\n<p><a href=\"http://zh.learnlayout.com/toc.html\" target=\"_blank\" rel=\"noopener\">学习CSS布局</a></p>\n<p><a href=\"https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/css-layout.html\" target=\"_blank\" rel=\"noopener\">CSS常见布局</a></p>\n<p><a href=\"https://www.jianshu.com/p/c6673f8a6a5a\" target=\"_blank\" rel=\"noopener\">DIV+CSS页面基本布局总结</a></p>\n<p><a href=\"http://louiszhai.github.io/2016/03/12/css-center/\" target=\"_blank\" rel=\"noopener\">16种方法实现水平居中垂直居中</a></p>\n"},{"title":"CSS常用布局 续篇","date":"2018-09-10T02:32:52.000Z","_content":"几个月前初学 CSS布局，写了一篇关于 [CSS常用布局学习](https://www.jianshu.com/p/59c9477816b8) 的博客，介绍了一些传统的依靠 position 和 float 等实现简单的布局方式的例子，这些布局只能简单得实现基本功能，十分不便。\n今天，作为引申，我们用同样例子，来使用上篇中简单提到的 flex 布局的方案实现。与此同时，我将推荐最近学习的 grid 布局，它十分强大，可以方便得解决各种布局方案，且十分便于理解。\n### Flex 实现左中右布局\n\n主要是在父元素中使用以下代码\n```\ndisplay: flex;\nflex-direction:row;\n```\n相对于传统布局，是不是简便得多![Flex 左中右](https://upload-images.jianshu.io/upload_images/7094266-f0d2834c90f115a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### Flex 实现垂直居中\n```\ndisplay: flex;\njustify-content:center;\nalign-items:center;\n```\n![Flex 垂直居中](https://upload-images.jianshu.io/upload_images/7094266-42ece01a2af28519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到 flex 布局十分方便\n想要了解更多 flex 布局相关技巧可以阅读阮大大 [博客](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html) 当然你可以看 MDN\n\n前面介绍的都是一维布局，但是在复杂的二维布局方面，无疑是为解决布局而创建的 CSS 网格布局更为专业\n学习网格布局事实上是学习对应英文的过程，所以英语好真的很有优势\n### Grid 布局实现左中右\n虽然有点大材小用，但是我们是为了和前面的布局方法做对比\n你只需用两行代码\n```\ndisplay: grid;\ngrid-template-columns: 30% 40% 30%; \n```\ngrid 布局的代码更省，子元素不需要各自设定，直接在父元素上设定了![Grid 左中右](https://upload-images.jianshu.io/upload_images/7094266-beb5abb9ff73f97d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)当然这里的子元素要与对应的格子相配，即 30% 40% 30% 对应的是 div.container 里面的顺序\n### 网格布局\n这里的 fr 为分数单位\n```\ndisplay: grid;\ngrid-template-columns: 1fr 1fr 1fr; // 3列均分\ngrid-template-rows: 1fr 1fr 1fr; // 3行均分\n```\n通过上面代码实现了一个3*3的网格\n可以通过下面代码选择对应网格，并添加属性\n```\ngrid-column: 1; // or 2 or 3\ngrid-row: 1; // or 2 or 3\n```\n![网格布局示例](https://upload-images.jianshu.io/upload_images/7094266-fe08051eb5cf5c1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n以上只是 flex 布局和 grid 布局的小例子和基本用法\n想要了解更多 grid 相关内容可以看这篇 [博客](https://www.jianshu.com/p/d183265a8dad)\n通过 flex 和 grid 布局配合使用，基本上可以解决所有 CSS 布局问题\n\n本文仅供个人学习使用","source":"_posts/CSS常用布局-续篇.md","raw":"---\ntitle: CSS常用布局 续篇\ndate: 2018-09-10 10:32:52\ntags:\n---\n几个月前初学 CSS布局，写了一篇关于 [CSS常用布局学习](https://www.jianshu.com/p/59c9477816b8) 的博客，介绍了一些传统的依靠 position 和 float 等实现简单的布局方式的例子，这些布局只能简单得实现基本功能，十分不便。\n今天，作为引申，我们用同样例子，来使用上篇中简单提到的 flex 布局的方案实现。与此同时，我将推荐最近学习的 grid 布局，它十分强大，可以方便得解决各种布局方案，且十分便于理解。\n### Flex 实现左中右布局\n\n主要是在父元素中使用以下代码\n```\ndisplay: flex;\nflex-direction:row;\n```\n相对于传统布局，是不是简便得多![Flex 左中右](https://upload-images.jianshu.io/upload_images/7094266-f0d2834c90f115a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### Flex 实现垂直居中\n```\ndisplay: flex;\njustify-content:center;\nalign-items:center;\n```\n![Flex 垂直居中](https://upload-images.jianshu.io/upload_images/7094266-42ece01a2af28519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到 flex 布局十分方便\n想要了解更多 flex 布局相关技巧可以阅读阮大大 [博客](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html) 当然你可以看 MDN\n\n前面介绍的都是一维布局，但是在复杂的二维布局方面，无疑是为解决布局而创建的 CSS 网格布局更为专业\n学习网格布局事实上是学习对应英文的过程，所以英语好真的很有优势\n### Grid 布局实现左中右\n虽然有点大材小用，但是我们是为了和前面的布局方法做对比\n你只需用两行代码\n```\ndisplay: grid;\ngrid-template-columns: 30% 40% 30%; \n```\ngrid 布局的代码更省，子元素不需要各自设定，直接在父元素上设定了![Grid 左中右](https://upload-images.jianshu.io/upload_images/7094266-beb5abb9ff73f97d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)当然这里的子元素要与对应的格子相配，即 30% 40% 30% 对应的是 div.container 里面的顺序\n### 网格布局\n这里的 fr 为分数单位\n```\ndisplay: grid;\ngrid-template-columns: 1fr 1fr 1fr; // 3列均分\ngrid-template-rows: 1fr 1fr 1fr; // 3行均分\n```\n通过上面代码实现了一个3*3的网格\n可以通过下面代码选择对应网格，并添加属性\n```\ngrid-column: 1; // or 2 or 3\ngrid-row: 1; // or 2 or 3\n```\n![网格布局示例](https://upload-images.jianshu.io/upload_images/7094266-fe08051eb5cf5c1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n以上只是 flex 布局和 grid 布局的小例子和基本用法\n想要了解更多 grid 相关内容可以看这篇 [博客](https://www.jianshu.com/p/d183265a8dad)\n通过 flex 和 grid 布局配合使用，基本上可以解决所有 CSS 布局问题\n\n本文仅供个人学习使用","slug":"CSS常用布局-续篇","published":1,"updated":"2019-01-18T14:50:00.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpv80002hw99vx7trhda","content":"<p>几个月前初学 CSS布局，写了一篇关于 <a href=\"https://www.jianshu.com/p/59c9477816b8\" target=\"_blank\" rel=\"noopener\">CSS常用布局学习</a> 的博客，介绍了一些传统的依靠 position 和 float 等实现简单的布局方式的例子，这些布局只能简单得实现基本功能，十分不便。<br>今天，作为引申，我们用同样例子，来使用上篇中简单提到的 flex 布局的方案实现。与此同时，我将推荐最近学习的 grid 布局，它十分强大，可以方便得解决各种布局方案，且十分便于理解。</p>\n<h3 id=\"Flex-实现左中右布局\"><a href=\"#Flex-实现左中右布局\" class=\"headerlink\" title=\"Flex 实现左中右布局\"></a>Flex 实现左中右布局</h3><p>主要是在父元素中使用以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">flex-direction:row;</span><br></pre></td></tr></table></figure></p>\n<p>相对于传统布局，是不是简便得多<img src=\"https://upload-images.jianshu.io/upload_images/7094266-f0d2834c90f115a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Flex 左中右\"></p>\n<h3 id=\"Flex-实现垂直居中\"><a href=\"#Flex-实现垂直居中\" class=\"headerlink\" title=\"Flex 实现垂直居中\"></a>Flex 实现垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">justify-content:center;</span><br><span class=\"line\">align-items:center;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-42ece01a2af28519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Flex 垂直居中\"></p>\n<p>可以看到 flex 布局十分方便<br>想要了解更多 flex 布局相关技巧可以阅读阮大大 <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">博客</a> 当然你可以看 MDN</p>\n<p>前面介绍的都是一维布局，但是在复杂的二维布局方面，无疑是为解决布局而创建的 CSS 网格布局更为专业<br>学习网格布局事实上是学习对应英文的过程，所以英语好真的很有优势</p>\n<h3 id=\"Grid-布局实现左中右\"><a href=\"#Grid-布局实现左中右\" class=\"headerlink\" title=\"Grid 布局实现左中右\"></a>Grid 布局实现左中右</h3><p>虽然有点大材小用，但是我们是为了和前面的布局方法做对比<br>你只需用两行代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: grid;</span><br><span class=\"line\">grid-template-columns: 30% 40% 30%;</span><br></pre></td></tr></table></figure></p>\n<p>grid 布局的代码更省，子元素不需要各自设定，直接在父元素上设定了<img src=\"https://upload-images.jianshu.io/upload_images/7094266-beb5abb9ff73f97d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Grid 左中右\">当然这里的子元素要与对应的格子相配，即 30% 40% 30% 对应的是 div.container 里面的顺序</p>\n<h3 id=\"网格布局\"><a href=\"#网格布局\" class=\"headerlink\" title=\"网格布局\"></a>网格布局</h3><p>这里的 fr 为分数单位<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: grid;</span><br><span class=\"line\">grid-template-columns: 1fr 1fr 1fr; // 3列均分</span><br><span class=\"line\">grid-template-rows: 1fr 1fr 1fr; // 3行均分</span><br></pre></td></tr></table></figure></p>\n<p>通过上面代码实现了一个3*3的网格<br>可以通过下面代码选择对应网格，并添加属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid-column: 1; // or 2 or 3</span><br><span class=\"line\">grid-row: 1; // or 2 or 3</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fe08051eb5cf5c1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网格布局示例\"></p>\n<hr>\n<p>以上只是 flex 布局和 grid 布局的小例子和基本用法<br>想要了解更多 grid 相关内容可以看这篇 <a href=\"https://www.jianshu.com/p/d183265a8dad\" target=\"_blank\" rel=\"noopener\">博客</a><br>通过 flex 和 grid 布局配合使用，基本上可以解决所有 CSS 布局问题</p>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>几个月前初学 CSS布局，写了一篇关于 <a href=\"https://www.jianshu.com/p/59c9477816b8\" target=\"_blank\" rel=\"noopener\">CSS常用布局学习</a> 的博客，介绍了一些传统的依靠 position 和 float 等实现简单的布局方式的例子，这些布局只能简单得实现基本功能，十分不便。<br>今天，作为引申，我们用同样例子，来使用上篇中简单提到的 flex 布局的方案实现。与此同时，我将推荐最近学习的 grid 布局，它十分强大，可以方便得解决各种布局方案，且十分便于理解。</p>\n<h3 id=\"Flex-实现左中右布局\"><a href=\"#Flex-实现左中右布局\" class=\"headerlink\" title=\"Flex 实现左中右布局\"></a>Flex 实现左中右布局</h3><p>主要是在父元素中使用以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">flex-direction:row;</span><br></pre></td></tr></table></figure></p>\n<p>相对于传统布局，是不是简便得多<img src=\"https://upload-images.jianshu.io/upload_images/7094266-f0d2834c90f115a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Flex 左中右\"></p>\n<h3 id=\"Flex-实现垂直居中\"><a href=\"#Flex-实现垂直居中\" class=\"headerlink\" title=\"Flex 实现垂直居中\"></a>Flex 实现垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">justify-content:center;</span><br><span class=\"line\">align-items:center;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-42ece01a2af28519.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Flex 垂直居中\"></p>\n<p>可以看到 flex 布局十分方便<br>想要了解更多 flex 布局相关技巧可以阅读阮大大 <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">博客</a> 当然你可以看 MDN</p>\n<p>前面介绍的都是一维布局，但是在复杂的二维布局方面，无疑是为解决布局而创建的 CSS 网格布局更为专业<br>学习网格布局事实上是学习对应英文的过程，所以英语好真的很有优势</p>\n<h3 id=\"Grid-布局实现左中右\"><a href=\"#Grid-布局实现左中右\" class=\"headerlink\" title=\"Grid 布局实现左中右\"></a>Grid 布局实现左中右</h3><p>虽然有点大材小用，但是我们是为了和前面的布局方法做对比<br>你只需用两行代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: grid;</span><br><span class=\"line\">grid-template-columns: 30% 40% 30%;</span><br></pre></td></tr></table></figure></p>\n<p>grid 布局的代码更省，子元素不需要各自设定，直接在父元素上设定了<img src=\"https://upload-images.jianshu.io/upload_images/7094266-beb5abb9ff73f97d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Grid 左中右\">当然这里的子元素要与对应的格子相配，即 30% 40% 30% 对应的是 div.container 里面的顺序</p>\n<h3 id=\"网格布局\"><a href=\"#网格布局\" class=\"headerlink\" title=\"网格布局\"></a>网格布局</h3><p>这里的 fr 为分数单位<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: grid;</span><br><span class=\"line\">grid-template-columns: 1fr 1fr 1fr; // 3列均分</span><br><span class=\"line\">grid-template-rows: 1fr 1fr 1fr; // 3行均分</span><br></pre></td></tr></table></figure></p>\n<p>通过上面代码实现了一个3*3的网格<br>可以通过下面代码选择对应网格，并添加属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid-column: 1; // or 2 or 3</span><br><span class=\"line\">grid-row: 1; // or 2 or 3</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fe08051eb5cf5c1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网格布局示例\"></p>\n<hr>\n<p>以上只是 flex 布局和 grid 布局的小例子和基本用法<br>想要了解更多 grid 相关内容可以看这篇 <a href=\"https://www.jianshu.com/p/d183265a8dad\" target=\"_blank\" rel=\"noopener\">博客</a><br>通过 flex 和 grid 布局配合使用，基本上可以解决所有 CSS 布局问题</p>\n<p>本文仅供个人学习使用</p>\n"},{"title":"HTML入门笔记","date":"2018-06-11T12:30:39.000Z","_content":"**HTML（HyperText Markup Language）**超文本标记语言\n\n**W3C 万维网联盟**（**World Wide Web Consortium）** 是万维网的主要国际标准组织\n\n* * *\n\n# **如何学习标签**？\n\n知道它的意思就记住了，如：\n```\n替代：alternatives (alt)\n\n段落：paragraph (p)\n\n锚元素：anchor (a)\n\n有序列表：ordered list (ol)；list item (li)\n\n无序列表：unordered list (ul)；list item (li)\n\n描述列表：description list (dl)；描述术语：description term (dt)；描述定义：description definition (dd)\n```\n[导航：navigation (nav)](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav)\n**常用标签**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-a36df6ef936eeaca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n什么是 [空元素](https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%A9%BA%E5%85%83%E7%B4%A0)：可以理解为通常不含闭标签的元素，如<br>\n\n可以出现在 head 元素内的元素 [link](https://github.com/joshbuchea/HEAD#elements)\n\n**noscrip**t**：**如果页面上的脚本类型不受支持或者当前在浏览器中关闭了脚本，则在HTML 元素中定义脚本未被执行时的替代内容。\n\n<strong> HTML标签没有**块级元素**和**内联元素**的区别，因为它无法控制。**HTML不管样式**，只管内容，CSS会管样式的。写标签时一定不能管样式 。（[内联元素（行内元素）](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elemente)）</strong>\n\n**HTML内联框架（Inline elements）元素  [iframe](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe) **表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中\n\n[块级元素](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements) 默认 display 为 block，如div\n\n![](https://upload-images.jianshu.io/upload_images/7094266-dbe2604159a53d9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[可替换元素](https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element) 是表示超出CSS范围的元素; 它们是表示独立于CSS格式模型的外部对象\n\n典型的替换元素是：iframe、video、embed（嵌入）、img\n\nHTML表格（table）由标签定义。每个表格行都用 tr 标签定义。表头 th 是用标签定义的。默认情况下，表格标题以粗体居中。表格数据/单元格用 td 标签定义 \n\n![](https://upload-images.jianshu.io/upload_images/7094266-40be247e9d24e463.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n之前在IFE的学习：[笔记](http://ife.baidu.com/note/detail/id/1037)\n\n内容很乱很多，后续还应该循序渐进。最重要的是以用带记，遇到了把它记下来，多用几次自然就记住了。\n***\n本文主要用于个人学习使用，如有侵权请联系我删除。","source":"_posts/HTML入门笔记.md","raw":"---\ntitle: HTML入门笔记\ndate: 2018-06-11 20:30:39\ntags:\n---\n**HTML（HyperText Markup Language）**超文本标记语言\n\n**W3C 万维网联盟**（**World Wide Web Consortium）** 是万维网的主要国际标准组织\n\n* * *\n\n# **如何学习标签**？\n\n知道它的意思就记住了，如：\n```\n替代：alternatives (alt)\n\n段落：paragraph (p)\n\n锚元素：anchor (a)\n\n有序列表：ordered list (ol)；list item (li)\n\n无序列表：unordered list (ul)；list item (li)\n\n描述列表：description list (dl)；描述术语：description term (dt)；描述定义：description definition (dd)\n```\n[导航：navigation (nav)](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav)\n**常用标签**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-a36df6ef936eeaca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n什么是 [空元素](https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%A9%BA%E5%85%83%E7%B4%A0)：可以理解为通常不含闭标签的元素，如<br>\n\n可以出现在 head 元素内的元素 [link](https://github.com/joshbuchea/HEAD#elements)\n\n**noscrip**t**：**如果页面上的脚本类型不受支持或者当前在浏览器中关闭了脚本，则在HTML 元素中定义脚本未被执行时的替代内容。\n\n<strong> HTML标签没有**块级元素**和**内联元素**的区别，因为它无法控制。**HTML不管样式**，只管内容，CSS会管样式的。写标签时一定不能管样式 。（[内联元素（行内元素）](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elemente)）</strong>\n\n**HTML内联框架（Inline elements）元素  [iframe](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe) **表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中\n\n[块级元素](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements) 默认 display 为 block，如div\n\n![](https://upload-images.jianshu.io/upload_images/7094266-dbe2604159a53d9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[可替换元素](https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element) 是表示超出CSS范围的元素; 它们是表示独立于CSS格式模型的外部对象\n\n典型的替换元素是：iframe、video、embed（嵌入）、img\n\nHTML表格（table）由标签定义。每个表格行都用 tr 标签定义。表头 th 是用标签定义的。默认情况下，表格标题以粗体居中。表格数据/单元格用 td 标签定义 \n\n![](https://upload-images.jianshu.io/upload_images/7094266-40be247e9d24e463.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n之前在IFE的学习：[笔记](http://ife.baidu.com/note/detail/id/1037)\n\n内容很乱很多，后续还应该循序渐进。最重要的是以用带记，遇到了把它记下来，多用几次自然就记住了。\n***\n本文主要用于个人学习使用，如有侵权请联系我删除。","slug":"HTML入门笔记","published":1,"updated":"2019-01-22T13:52:28.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpv90003hw99tbx7gtk4","content":"<p><strong>HTML（HyperText Markup Language）</strong>超文本标记语言</p>\n<p><strong>W3C 万维网联盟</strong>（<strong>World Wide Web Consortium）</strong> 是万维网的主要国际标准组织</p>\n<hr>\n<h1 id=\"如何学习标签？\"><a href=\"#如何学习标签？\" class=\"headerlink\" title=\"如何学习标签？\"></a><strong>如何学习标签</strong>？</h1><p>知道它的意思就记住了，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">替代：alternatives (alt)</span><br><span class=\"line\"></span><br><span class=\"line\">段落：paragraph (p)</span><br><span class=\"line\"></span><br><span class=\"line\">锚元素：anchor (a)</span><br><span class=\"line\"></span><br><span class=\"line\">有序列表：ordered list (ol)；list item (li)</span><br><span class=\"line\"></span><br><span class=\"line\">无序列表：unordered list (ul)；list item (li)</span><br><span class=\"line\"></span><br><span class=\"line\">描述列表：description list (dl)；描述术语：description term (dt)；描述定义：description definition (dd)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\" target=\"_blank\" rel=\"noopener\">导航：navigation (nav)</a><br><strong>常用标签</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a36df6ef936eeaca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>什么是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%A9%BA%E5%85%83%E7%B4%A0\" target=\"_blank\" rel=\"noopener\">空元素</a>：可以理解为通常不含闭标签的元素，如<br></p>\n<p>可以出现在 head 元素内的元素 <a href=\"https://github.com/joshbuchea/HEAD#elements\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p><strong>noscrip</strong>t<strong>：</strong>如果页面上的脚本类型不受支持或者当前在浏览器中关闭了脚本，则在HTML 元素中定义脚本未被执行时的替代内容。</p>\n<p><strong> HTML标签没有<strong>块级元素</strong>和<strong>内联元素</strong>的区别，因为它无法控制。<strong>HTML不管样式</strong>，只管内容，CSS会管样式的。写标签时一定不能管样式 。（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elemente\" target=\"_blank\" rel=\"noopener\">内联元素（行内元素）</a>）</strong></p>\n<p><strong>HTML内联框架（Inline elements）元素  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe\" target=\"_blank\" rel=\"noopener\">iframe</a> </strong>表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements\" target=\"_blank\" rel=\"noopener\">块级元素</a> 默认 display 为 block，如div</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-dbe2604159a53d9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element\" target=\"_blank\" rel=\"noopener\">可替换元素</a> 是表示超出CSS范围的元素; 它们是表示独立于CSS格式模型的外部对象</p>\n<p>典型的替换元素是：iframe、video、embed（嵌入）、img</p>\n<p>HTML表格（table）由标签定义。每个表格行都用 tr 标签定义。表头 th 是用标签定义的。默认情况下，表格标题以粗体居中。表格数据/单元格用 td 标签定义 </p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-40be247e9d24e463.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>之前在IFE的学习：<a href=\"http://ife.baidu.com/note/detail/id/1037\" target=\"_blank\" rel=\"noopener\">笔记</a></p>\n<p>内容很乱很多，后续还应该循序渐进。最重要的是以用带记，遇到了把它记下来，多用几次自然就记住了。</p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>HTML（HyperText Markup Language）</strong>超文本标记语言</p>\n<p><strong>W3C 万维网联盟</strong>（<strong>World Wide Web Consortium）</strong> 是万维网的主要国际标准组织</p>\n<hr>\n<h1 id=\"如何学习标签？\"><a href=\"#如何学习标签？\" class=\"headerlink\" title=\"如何学习标签？\"></a><strong>如何学习标签</strong>？</h1><p>知道它的意思就记住了，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">替代：alternatives (alt)</span><br><span class=\"line\"></span><br><span class=\"line\">段落：paragraph (p)</span><br><span class=\"line\"></span><br><span class=\"line\">锚元素：anchor (a)</span><br><span class=\"line\"></span><br><span class=\"line\">有序列表：ordered list (ol)；list item (li)</span><br><span class=\"line\"></span><br><span class=\"line\">无序列表：unordered list (ul)；list item (li)</span><br><span class=\"line\"></span><br><span class=\"line\">描述列表：description list (dl)；描述术语：description term (dt)；描述定义：description definition (dd)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\" target=\"_blank\" rel=\"noopener\">导航：navigation (nav)</a><br><strong>常用标签</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a36df6ef936eeaca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>什么是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%A9%BA%E5%85%83%E7%B4%A0\" target=\"_blank\" rel=\"noopener\">空元素</a>：可以理解为通常不含闭标签的元素，如<br></p>\n<p>可以出现在 head 元素内的元素 <a href=\"https://github.com/joshbuchea/HEAD#elements\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p><strong>noscrip</strong>t<strong>：</strong>如果页面上的脚本类型不受支持或者当前在浏览器中关闭了脚本，则在HTML 元素中定义脚本未被执行时的替代内容。</p>\n<p><strong> HTML标签没有<strong>块级元素</strong>和<strong>内联元素</strong>的区别，因为它无法控制。<strong>HTML不管样式</strong>，只管内容，CSS会管样式的。写标签时一定不能管样式 。（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elemente\" target=\"_blank\" rel=\"noopener\">内联元素（行内元素）</a>）</strong></p>\n<p><strong>HTML内联框架（Inline elements）元素  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe\" target=\"_blank\" rel=\"noopener\">iframe</a> </strong>表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements\" target=\"_blank\" rel=\"noopener\">块级元素</a> 默认 display 为 block，如div</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-dbe2604159a53d9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element\" target=\"_blank\" rel=\"noopener\">可替换元素</a> 是表示超出CSS范围的元素; 它们是表示独立于CSS格式模型的外部对象</p>\n<p>典型的替换元素是：iframe、video、embed（嵌入）、img</p>\n<p>HTML表格（table）由标签定义。每个表格行都用 tr 标签定义。表头 th 是用标签定义的。默认情况下，表格标题以粗体居中。表格数据/单元格用 td 标签定义 </p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-40be247e9d24e463.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>之前在IFE的学习：<a href=\"http://ife.baidu.com/note/detail/id/1037\" target=\"_blank\" rel=\"noopener\">笔记</a></p>\n<p>内容很乱很多，后续还应该循序渐进。最重要的是以用带记，遇到了把它记下来，多用几次自然就记住了。</p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n"},{"title":"HTML常用的几个标签","date":"2018-06-13T14:04:49.000Z","_content":"**遇到新的标签属性等不会用可以用 JS BIN 尝试看看效果，就知道了**\n\n# 常见标签详解\n\n## **1\\. iframe** **标签**\n\n**嵌套页面**\n\n1.1. **iframe标签 **的** frameborder** 属性\n\n**iframe标签 **自带边界border，所以用这个属性可以去边界，如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-1031b6812b8aaf57.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-fa67255c8a244a71.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.2. **iframe标签 **的 **src**属性：主要用来加链接\n\n1.3.** iframe标签 **的 **name**属性\n\n**name属性**与** a标签**一起使用有效，如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-d6e908d8da74ea14.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## **2\\. a 标签**\n\n**跳转页面（HTTP GET 请求）**\n\n**target 属性** \n\n**target=\"_blank _top _parent _self\"**的区别，看意思就懂了分别是跳转 新空白页面；最首页（用于不止两个页面，跳到第一个页面）；父页面（不止两个页面，跳到当前页面父页面）；自身页面\n\n命令行下载 http 服务工具\n```\nnpm i -g http-server\n```\n这样就不用自己写服务了，然后用下面命令打开服务器\n```\nhttp-server -c -1\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-23d055b34597b717.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n打开服务器\n\n下面的路径都可以访问文件夹所在网页文件，复制其中一个在浏览器上访问即可\n\n如http://10.216.155.182:8080\n\n![](https://upload-images.jianshu.io/upload_images/7094266-5af1c1c11575c480.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n只有 **href=\"#\"**没有**get**请求\n\n此外 **a标签** 的 **href** 有以下几种方法\n\n![](https://upload-images.jianshu.io/upload_images/7094266-787bd332399011ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 3.form 标签\n**跳转页面（HTTP POST 请求）**\n\n3.1. **from标签 **需要加** （提交按钮）submit **来显示跳转，如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-aaa0d33e641cd112.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/7094266-e664c2791e3c60dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.2. **from标签** 主要用来发起 post 请求（如登录时输入账号密码时候）\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ca38a55f51850bee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在网页中点击提交，Network 中 post 请求中的第四部分 From Data如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-22538ebbc2c5f43d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n若是HTTP协议，密码便是明文：\"222\"，这就是为什么会有 HTTPS 出现\n\n3.3. **from标签 **与**a标签 **一样也有** target**\n## **4\\. input标签和button标签**\n\n**input 要学的比较多，可以结合[MDN文档](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)实例学习**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-fad8a6d86142a599.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**input type=\"button\"**和** button **的区别\n\n![](https://upload-images.jianshu.io/upload_images/7094266-583d5833841661dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n区别是 **input **是空元素，无法内联其他标签，而 **button **显然可以\n\n注：若form表单只有一个 **button按钮 **而无**type**属性，**button**直接升级为 **submit**（跳转）\n## 5.table标签\n\n较完整示例如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-410da64f04c3a907.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1\\. 很多人会忽略 **colgroup** 的使用，它可以用来给 table 的表列表加宽度等属性\n\n2\\. thead tbody tfoot 三个标签可以省略，加上的好处是给了每一部分定义，即使他们顺序打乱，浏览器也可以很好得形成原列表\n\n3\\. 上图中 table 的 border 有空隙可以用\n\n**border-collapse** 来去掉\n\n![](https://upload-images.jianshu.io/upload_images/7094266-b6ee3f969de3dc94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* * *\n本文主要用于个人学习使用，如有侵权请联系我删除","source":"_posts/HTML常用的几个标签.md","raw":"---\ntitle: HTML常用的几个标签\ndate: 2018-06-13 22:04:49\ntags:\n---\n**遇到新的标签属性等不会用可以用 JS BIN 尝试看看效果，就知道了**\n\n# 常见标签详解\n\n## **1\\. iframe** **标签**\n\n**嵌套页面**\n\n1.1. **iframe标签 **的** frameborder** 属性\n\n**iframe标签 **自带边界border，所以用这个属性可以去边界，如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-1031b6812b8aaf57.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-fa67255c8a244a71.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.2. **iframe标签 **的 **src**属性：主要用来加链接\n\n1.3.** iframe标签 **的 **name**属性\n\n**name属性**与** a标签**一起使用有效，如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-d6e908d8da74ea14.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## **2\\. a 标签**\n\n**跳转页面（HTTP GET 请求）**\n\n**target 属性** \n\n**target=\"_blank _top _parent _self\"**的区别，看意思就懂了分别是跳转 新空白页面；最首页（用于不止两个页面，跳到第一个页面）；父页面（不止两个页面，跳到当前页面父页面）；自身页面\n\n命令行下载 http 服务工具\n```\nnpm i -g http-server\n```\n这样就不用自己写服务了，然后用下面命令打开服务器\n```\nhttp-server -c -1\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-23d055b34597b717.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n打开服务器\n\n下面的路径都可以访问文件夹所在网页文件，复制其中一个在浏览器上访问即可\n\n如http://10.216.155.182:8080\n\n![](https://upload-images.jianshu.io/upload_images/7094266-5af1c1c11575c480.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n只有 **href=\"#\"**没有**get**请求\n\n此外 **a标签** 的 **href** 有以下几种方法\n\n![](https://upload-images.jianshu.io/upload_images/7094266-787bd332399011ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 3.form 标签\n**跳转页面（HTTP POST 请求）**\n\n3.1. **from标签 **需要加** （提交按钮）submit **来显示跳转，如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-aaa0d33e641cd112.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/7094266-e664c2791e3c60dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.2. **from标签** 主要用来发起 post 请求（如登录时输入账号密码时候）\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ca38a55f51850bee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在网页中点击提交，Network 中 post 请求中的第四部分 From Data如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-22538ebbc2c5f43d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n若是HTTP协议，密码便是明文：\"222\"，这就是为什么会有 HTTPS 出现\n\n3.3. **from标签 **与**a标签 **一样也有** target**\n## **4\\. input标签和button标签**\n\n**input 要学的比较多，可以结合[MDN文档](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)实例学习**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-fad8a6d86142a599.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**input type=\"button\"**和** button **的区别\n\n![](https://upload-images.jianshu.io/upload_images/7094266-583d5833841661dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n区别是 **input **是空元素，无法内联其他标签，而 **button **显然可以\n\n注：若form表单只有一个 **button按钮 **而无**type**属性，**button**直接升级为 **submit**（跳转）\n## 5.table标签\n\n较完整示例如图\n\n![](https://upload-images.jianshu.io/upload_images/7094266-410da64f04c3a907.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1\\. 很多人会忽略 **colgroup** 的使用，它可以用来给 table 的表列表加宽度等属性\n\n2\\. thead tbody tfoot 三个标签可以省略，加上的好处是给了每一部分定义，即使他们顺序打乱，浏览器也可以很好得形成原列表\n\n3\\. 上图中 table 的 border 有空隙可以用\n\n**border-collapse** 来去掉\n\n![](https://upload-images.jianshu.io/upload_images/7094266-b6ee3f969de3dc94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* * *\n本文主要用于个人学习使用，如有侵权请联系我删除","slug":"HTML常用的几个标签","published":1,"updated":"2019-01-22T13:56:21.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpva0004hw99wnhv0s2b","content":"<p><strong>遇到新的标签属性等不会用可以用 JS BIN 尝试看看效果，就知道了</strong></p>\n<h1 id=\"常见标签详解\"><a href=\"#常见标签详解\" class=\"headerlink\" title=\"常见标签详解\"></a>常见标签详解</h1><h2 id=\"1-iframe-标签\"><a href=\"#1-iframe-标签\" class=\"headerlink\" title=\"1. iframe 标签\"></a><strong>1. iframe</strong> <strong>标签</strong></h2><p><strong>嵌套页面</strong></p>\n<p>1.1. <strong>iframe标签 </strong>的<strong> frameborder</strong> 属性</p>\n<p><strong>iframe标签 </strong>自带边界border，所以用这个属性可以去边界，如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-1031b6812b8aaf57.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fa67255c8a244a71.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>1.2. <strong>iframe标签 </strong>的 <strong>src</strong>属性：主要用来加链接</p>\n<p>1.3.<strong> iframe标签 </strong>的 <strong>name</strong>属性</p>\n<p><strong>name属性</strong>与<strong> a标签</strong>一起使用有效，如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d6e908d8da74ea14.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"2-a-标签\"><a href=\"#2-a-标签\" class=\"headerlink\" title=\"2. a 标签\"></a><strong>2. a 标签</strong></h2><p><strong>跳转页面（HTTP GET 请求）</strong></p>\n<p><strong>target 属性</strong> </p>\n<p><strong>target=”_blank _top _parent _self”</strong>的区别，看意思就懂了分别是跳转 新空白页面；最首页（用于不止两个页面，跳到第一个页面）；父页面（不止两个页面，跳到当前页面父页面）；自身页面</p>\n<p>命令行下载 http 服务工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g http-server</span><br></pre></td></tr></table></figure></p>\n<p>这样就不用自己写服务了，然后用下面命令打开服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server -c -1</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-23d055b34597b717.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>打开服务器</p>\n<p>下面的路径都可以访问文件夹所在网页文件，复制其中一个在浏览器上访问即可</p>\n<p>如<a href=\"http://10.216.155.182:8080\" target=\"_blank\" rel=\"noopener\">http://10.216.155.182:8080</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5af1c1c11575c480.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>只有 <strong>href=”#”</strong>没有<strong>get</strong>请求</p>\n<p>此外 <strong>a标签</strong> 的 <strong>href</strong> 有以下几种方法</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-787bd332399011ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"3-form-标签\"><a href=\"#3-form-标签\" class=\"headerlink\" title=\"3.form 标签\"></a>3.form 标签</h2><p><strong>跳转页面（HTTP POST 请求）</strong></p>\n<p>3.1. <strong>from标签 </strong>需要加<strong> （提交按钮）submit </strong>来显示跳转，如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-aaa0d33e641cd112.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-e664c2791e3c60dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>3.2. <strong>from标签</strong> 主要用来发起 post 请求（如登录时输入账号密码时候）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ca38a55f51850bee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在网页中点击提交，Network 中 post 请求中的第四部分 From Data如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-22538ebbc2c5f43d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>若是HTTP协议，密码便是明文：”222”，这就是为什么会有 HTTPS 出现</p>\n<p>3.3. <strong>from标签 </strong>与<strong>a标签 </strong>一样也有<strong> target</strong></p>\n<h2 id=\"4-input标签和button标签\"><a href=\"#4-input标签和button标签\" class=\"headerlink\" title=\"4. input标签和button标签\"></a><strong>4. input标签和button标签</strong></h2><p><strong>input 要学的比较多，可以结合<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\" target=\"_blank\" rel=\"noopener\">MDN文档</a>实例学习</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fad8a6d86142a599.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>input type=”button”</strong>和<strong> button </strong>的区别</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-583d5833841661dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>区别是 <strong>input </strong>是空元素，无法内联其他标签，而 <strong>button </strong>显然可以</p>\n<p>注：若form表单只有一个 <strong>button按钮 </strong>而无<strong>type</strong>属性，<strong>button</strong>直接升级为 <strong>submit</strong>（跳转）</p>\n<h2 id=\"5-table标签\"><a href=\"#5-table标签\" class=\"headerlink\" title=\"5.table标签\"></a>5.table标签</h2><p>较完整示例如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-410da64f04c3a907.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>1. 很多人会忽略 <strong>colgroup</strong> 的使用，它可以用来给 table 的表列表加宽度等属性</p>\n<p>2. thead tbody tfoot 三个标签可以省略，加上的好处是给了每一部分定义，即使他们顺序打乱，浏览器也可以很好得形成原列表</p>\n<p>3. 上图中 table 的 border 有空隙可以用</p>\n<p><strong>border-collapse</strong> 来去掉</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-b6ee3f969de3dc94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>遇到新的标签属性等不会用可以用 JS BIN 尝试看看效果，就知道了</strong></p>\n<h1 id=\"常见标签详解\"><a href=\"#常见标签详解\" class=\"headerlink\" title=\"常见标签详解\"></a>常见标签详解</h1><h2 id=\"1-iframe-标签\"><a href=\"#1-iframe-标签\" class=\"headerlink\" title=\"1. iframe 标签\"></a><strong>1. iframe</strong> <strong>标签</strong></h2><p><strong>嵌套页面</strong></p>\n<p>1.1. <strong>iframe标签 </strong>的<strong> frameborder</strong> 属性</p>\n<p><strong>iframe标签 </strong>自带边界border，所以用这个属性可以去边界，如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-1031b6812b8aaf57.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fa67255c8a244a71.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>1.2. <strong>iframe标签 </strong>的 <strong>src</strong>属性：主要用来加链接</p>\n<p>1.3.<strong> iframe标签 </strong>的 <strong>name</strong>属性</p>\n<p><strong>name属性</strong>与<strong> a标签</strong>一起使用有效，如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d6e908d8da74ea14.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"2-a-标签\"><a href=\"#2-a-标签\" class=\"headerlink\" title=\"2. a 标签\"></a><strong>2. a 标签</strong></h2><p><strong>跳转页面（HTTP GET 请求）</strong></p>\n<p><strong>target 属性</strong> </p>\n<p><strong>target=”_blank _top _parent _self”</strong>的区别，看意思就懂了分别是跳转 新空白页面；最首页（用于不止两个页面，跳到第一个页面）；父页面（不止两个页面，跳到当前页面父页面）；自身页面</p>\n<p>命令行下载 http 服务工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g http-server</span><br></pre></td></tr></table></figure></p>\n<p>这样就不用自己写服务了，然后用下面命令打开服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server -c -1</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-23d055b34597b717.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>打开服务器</p>\n<p>下面的路径都可以访问文件夹所在网页文件，复制其中一个在浏览器上访问即可</p>\n<p>如<a href=\"http://10.216.155.182:8080\" target=\"_blank\" rel=\"noopener\">http://10.216.155.182:8080</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5af1c1c11575c480.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>只有 <strong>href=”#”</strong>没有<strong>get</strong>请求</p>\n<p>此外 <strong>a标签</strong> 的 <strong>href</strong> 有以下几种方法</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-787bd332399011ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"3-form-标签\"><a href=\"#3-form-标签\" class=\"headerlink\" title=\"3.form 标签\"></a>3.form 标签</h2><p><strong>跳转页面（HTTP POST 请求）</strong></p>\n<p>3.1. <strong>from标签 </strong>需要加<strong> （提交按钮）submit </strong>来显示跳转，如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-aaa0d33e641cd112.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-e664c2791e3c60dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>3.2. <strong>from标签</strong> 主要用来发起 post 请求（如登录时输入账号密码时候）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ca38a55f51850bee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在网页中点击提交，Network 中 post 请求中的第四部分 From Data如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-22538ebbc2c5f43d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>若是HTTP协议，密码便是明文：”222”，这就是为什么会有 HTTPS 出现</p>\n<p>3.3. <strong>from标签 </strong>与<strong>a标签 </strong>一样也有<strong> target</strong></p>\n<h2 id=\"4-input标签和button标签\"><a href=\"#4-input标签和button标签\" class=\"headerlink\" title=\"4. input标签和button标签\"></a><strong>4. input标签和button标签</strong></h2><p><strong>input 要学的比较多，可以结合<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\" target=\"_blank\" rel=\"noopener\">MDN文档</a>实例学习</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fad8a6d86142a599.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>input type=”button”</strong>和<strong> button </strong>的区别</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-583d5833841661dc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>区别是 <strong>input </strong>是空元素，无法内联其他标签，而 <strong>button </strong>显然可以</p>\n<p>注：若form表单只有一个 <strong>button按钮 </strong>而无<strong>type</strong>属性，<strong>button</strong>直接升级为 <strong>submit</strong>（跳转）</p>\n<h2 id=\"5-table标签\"><a href=\"#5-table标签\" class=\"headerlink\" title=\"5.table标签\"></a>5.table标签</h2><p>较完整示例如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-410da64f04c3a907.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>1. 很多人会忽略 <strong>colgroup</strong> 的使用，它可以用来给 table 的表列表加宽度等属性</p>\n<p>2. thead tbody tfoot 三个标签可以省略，加上的好处是给了每一部分定义，即使他们顺序打乱，浏览器也可以很好得形成原列表</p>\n<p>3. 上图中 table 的 border 有空隙可以用</p>\n<p><strong>border-collapse</strong> 来去掉</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-b6ee3f969de3dc94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除</p>\n"},{"title":"Vue 全家桶学习总结","date":"2019-02-26T15:32:17.000Z","_content":"# Vue\n\n## Vue.js 特性：\n\n1.轻量级\n2.双向数据绑定\n3.指令\n4.组件化\n\n## 什么是 MVVM\n\n```\nMVC => MVP => MVVM\n// 视图层和数据层的双向绑定\nView <=> ViewModel <=> Model\n```\n1. MVVM是一种设计思想， 是 Model-View-ViewModel 的缩写。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。\n\n2. 在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到Model 中，而 Model 数据的变化也会立即反应到 View 上。\n\n3. ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。\n\n## Vue.js 的优点\n\n1. 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的\"View\"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。\n2. 可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。\n3. 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。\n4. 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写\n5. 易用灵活高效\n\n## Vue 组件是什么\n\n组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以表现为用 is 特性进行了扩展的原生 HTML 元素。所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象 (除了一些根级特有的选项) 并提供相同的生命周期钩子。\n\n# Vue-cli\nVue CLI 是一个基于 Vue.js 进行快速开发的完整系统，致力于将 Vue 生态中的工具基础标准化。\n\n## Vue 脚手架 3.x 以上版本使用\n\n全局安装\n```\nyarn global add @vue/cli\n```\n快速原型开发\n```\nnpm install -g @vue/cli-service-global\n```\n创建项目\n```\nvue create hello-world\n// 如果是在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作，需要执行下面命令\nwinpty vue.cmd create hello-world\n```\n```\ncd hello-world\n```\nProject setup\n```\nyarn install\n```\n（以下命令 run 可以省略）\nCompiles and hot-reloads for development\n```\nyarn run serve\n```\nCompiles and minifies for production\n```\nyarn run build\n```\nRun your tests\n```\nyarn run test\n```\nLints and fixes files\n```\nyarn run lint\n```\n## Vuecli 3.x 版本(上图)与 2.x 初始化目录对比\n\n![](https://upload-images.jianshu.io/upload_images/7094266-35ec0c0fd8c70b11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/7094266-2e5b972e8f4586e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# Vue Router\n\nVue Router 是 Vue.js 官方的路由管理器。\n安装\n```\nnpm install vue-router\n```\n引用\n```\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n```\n配置路由文件，并在vue实例中注入 \n```\nconst router = new VueRouter({\n  routes:[{\n    path:'/user/:userId', // 指定要跳转的路径\n    name: 'user',\n    component: User// 指定要跳转的组件\n    }]\n})\nconst User = ({\n  template: '<div>User</div>'\n})\n```\n\n## 确定视图加载的位置\n\n```\n<router-view></router-view>\n```\n\n## 实现路由跳转\n\n```\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n```\n\n# Vuex\n\nVuex 是一个为 Vue.js 开发的状态管理模式：采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n## 在 store (存储)内有下列核心概念\n\n**State()：核心原始数据** 展示\n**Getter：计算属性，根据所依赖的数据的变化计算自身变化** 存储\n**Mutation(转变)：提交 mutation 才能改变存储状态**\n**Action：**Action 类似于 mutation，不同在于：\nAction 提交的是 mutation，而不是直接变更状态。\nAction 可以包含任意异步操作。\n**Module：可以将将 store 分割**\n一般放在 state 文件夹下\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c1e2d56805eff7e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## vuex状态管理的流程\n\nview => actions => mutations => state => view\n\n## 核心概念详解\n\n### state：记录所有公共数据状态的对象\n```\n// 组件如何获取\nthis.$store.state.XXX\n// 此处的 XXX 是 state 内定义的数据状态的键名\n```\n### mutations：包含所有 操作数据状态的方法 的对象\n```\n// 组件如何调用\nthis.$store.commit(XXX)\n// 此处的 XXX是 mutations 中定义的方法名\n```\n### actions：用于操作 mutations 内方法 的对象\nactions 提交的是 mutation，而不是直接变更状态 actions可以包含异步操作，但是 mutation 只能包含同步操作\n```\n// 如何调用\nthis.$store.dispatch(XXX)\n// 此处的XXX是你在actions中定义的方法名\n```\n### getters：定义状态内容的方法 的对象\n```\nthis.$store.getters.XXX\n// 此处的XXX是你在getters里定义的方法名\n```\n### Module\n当应用较大时，store将变得臃肿，Vuex 允许我们将 store 分割成模块（module）。\n每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割\n```\nconst moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n# Axios \naxios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：\n- 从浏览器中创建 XMLHttpRequest\n- 从 node.js 发出 http 请求\n- 支持 Promise API拦截\n- 请求和响应转换\n- 请求和响应数据取消\n- 请求自动转换JSON数据\n- 客户端支持防止 CSRF/XSRF\n1. 安装\n```\nnpm install axios\n```\n2. 引入加载\n```\nimport axios from 'axios'\n```\n3. 将axios全局挂载到 Vue 原型上\n```\nVue.prototype.$http = axios\n```\n## axios 的 url 有两种传递参数的形式\n```\n// 第一种 对象形式\nthis.$http.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n// 如果只有一个参数，可以省略 params\nthis.$http.get('/user', {\n      ID: 12345\n  }) \n--------------------------------- \n// 第二种 形式\nthis.$http.get('https://cnodejs.org/api/v1/topics?page=1&limit=15')\n```\n## POST 传递数据有两种格式：\n1. form­-data ?page=1&limit=48\n2. x-­www­-form-­urlencoded { page: 1,limit: 10 }\n\n**在 axios 中，post 请求接收的参数必须是 form­-data 形式\n如果要使用 x-­www­-form-­urlencoded 形式，需要用 qs 插件—qs.stringify 转换**\n```\nthis.$http.post('/user', qs.stringify({\n   ID: 12345\n  })\n);\n```\n---\n待完善。。","source":"_posts/Vue-全家桶学习总结.md","raw":"---\ntitle: Vue 全家桶学习总结\ndate: 2019-02-26 23:32:17\ntags:\n---\n# Vue\n\n## Vue.js 特性：\n\n1.轻量级\n2.双向数据绑定\n3.指令\n4.组件化\n\n## 什么是 MVVM\n\n```\nMVC => MVP => MVVM\n// 视图层和数据层的双向绑定\nView <=> ViewModel <=> Model\n```\n1. MVVM是一种设计思想， 是 Model-View-ViewModel 的缩写。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。\n\n2. 在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到Model 中，而 Model 数据的变化也会立即反应到 View 上。\n\n3. ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。\n\n## Vue.js 的优点\n\n1. 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的\"View\"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。\n2. 可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。\n3. 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。\n4. 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写\n5. 易用灵活高效\n\n## Vue 组件是什么\n\n组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以表现为用 is 特性进行了扩展的原生 HTML 元素。所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象 (除了一些根级特有的选项) 并提供相同的生命周期钩子。\n\n# Vue-cli\nVue CLI 是一个基于 Vue.js 进行快速开发的完整系统，致力于将 Vue 生态中的工具基础标准化。\n\n## Vue 脚手架 3.x 以上版本使用\n\n全局安装\n```\nyarn global add @vue/cli\n```\n快速原型开发\n```\nnpm install -g @vue/cli-service-global\n```\n创建项目\n```\nvue create hello-world\n// 如果是在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作，需要执行下面命令\nwinpty vue.cmd create hello-world\n```\n```\ncd hello-world\n```\nProject setup\n```\nyarn install\n```\n（以下命令 run 可以省略）\nCompiles and hot-reloads for development\n```\nyarn run serve\n```\nCompiles and minifies for production\n```\nyarn run build\n```\nRun your tests\n```\nyarn run test\n```\nLints and fixes files\n```\nyarn run lint\n```\n## Vuecli 3.x 版本(上图)与 2.x 初始化目录对比\n\n![](https://upload-images.jianshu.io/upload_images/7094266-35ec0c0fd8c70b11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/7094266-2e5b972e8f4586e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# Vue Router\n\nVue Router 是 Vue.js 官方的路由管理器。\n安装\n```\nnpm install vue-router\n```\n引用\n```\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n```\n配置路由文件，并在vue实例中注入 \n```\nconst router = new VueRouter({\n  routes:[{\n    path:'/user/:userId', // 指定要跳转的路径\n    name: 'user',\n    component: User// 指定要跳转的组件\n    }]\n})\nconst User = ({\n  template: '<div>User</div>'\n})\n```\n\n## 确定视图加载的位置\n\n```\n<router-view></router-view>\n```\n\n## 实现路由跳转\n\n```\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n```\n\n# Vuex\n\nVuex 是一个为 Vue.js 开发的状态管理模式：采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n## 在 store (存储)内有下列核心概念\n\n**State()：核心原始数据** 展示\n**Getter：计算属性，根据所依赖的数据的变化计算自身变化** 存储\n**Mutation(转变)：提交 mutation 才能改变存储状态**\n**Action：**Action 类似于 mutation，不同在于：\nAction 提交的是 mutation，而不是直接变更状态。\nAction 可以包含任意异步操作。\n**Module：可以将将 store 分割**\n一般放在 state 文件夹下\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c1e2d56805eff7e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## vuex状态管理的流程\n\nview => actions => mutations => state => view\n\n## 核心概念详解\n\n### state：记录所有公共数据状态的对象\n```\n// 组件如何获取\nthis.$store.state.XXX\n// 此处的 XXX 是 state 内定义的数据状态的键名\n```\n### mutations：包含所有 操作数据状态的方法 的对象\n```\n// 组件如何调用\nthis.$store.commit(XXX)\n// 此处的 XXX是 mutations 中定义的方法名\n```\n### actions：用于操作 mutations 内方法 的对象\nactions 提交的是 mutation，而不是直接变更状态 actions可以包含异步操作，但是 mutation 只能包含同步操作\n```\n// 如何调用\nthis.$store.dispatch(XXX)\n// 此处的XXX是你在actions中定义的方法名\n```\n### getters：定义状态内容的方法 的对象\n```\nthis.$store.getters.XXX\n// 此处的XXX是你在getters里定义的方法名\n```\n### Module\n当应用较大时，store将变得臃肿，Vuex 允许我们将 store 分割成模块（module）。\n每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割\n```\nconst moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n# Axios \naxios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：\n- 从浏览器中创建 XMLHttpRequest\n- 从 node.js 发出 http 请求\n- 支持 Promise API拦截\n- 请求和响应转换\n- 请求和响应数据取消\n- 请求自动转换JSON数据\n- 客户端支持防止 CSRF/XSRF\n1. 安装\n```\nnpm install axios\n```\n2. 引入加载\n```\nimport axios from 'axios'\n```\n3. 将axios全局挂载到 Vue 原型上\n```\nVue.prototype.$http = axios\n```\n## axios 的 url 有两种传递参数的形式\n```\n// 第一种 对象形式\nthis.$http.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n// 如果只有一个参数，可以省略 params\nthis.$http.get('/user', {\n      ID: 12345\n  }) \n--------------------------------- \n// 第二种 形式\nthis.$http.get('https://cnodejs.org/api/v1/topics?page=1&limit=15')\n```\n## POST 传递数据有两种格式：\n1. form­-data ?page=1&limit=48\n2. x-­www­-form-­urlencoded { page: 1,limit: 10 }\n\n**在 axios 中，post 请求接收的参数必须是 form­-data 形式\n如果要使用 x-­www­-form-­urlencoded 形式，需要用 qs 插件—qs.stringify 转换**\n```\nthis.$http.post('/user', qs.stringify({\n   ID: 12345\n  })\n);\n```\n---\n待完善。。","slug":"Vue-全家桶学习总结","published":1,"updated":"2019-02-26T15:37:51.537Z","_id":"cjslxkpvc0005hw99ah40xlxv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h1><h2 id=\"Vue-js-特性：\"><a href=\"#Vue-js-特性：\" class=\"headerlink\" title=\"Vue.js 特性：\"></a>Vue.js 特性：</h2><p>1.轻量级<br>2.双向数据绑定<br>3.指令<br>4.组件化</p>\n<h2 id=\"什么是-MVVM\"><a href=\"#什么是-MVVM\" class=\"headerlink\" title=\"什么是 MVVM\"></a>什么是 MVVM</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MVC =&gt; MVP =&gt; MVVM</span><br><span class=\"line\">// 视图层和数据层的双向绑定</span><br><span class=\"line\">View &lt;=&gt; ViewModel &lt;=&gt; Model</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>MVVM是一种设计思想， 是 Model-View-ViewModel 的缩写。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。</p>\n</li>\n<li><p>在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到Model 中，而 Model 数据的变化也会立即反应到 View 上。</p>\n</li>\n<li><p>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p>\n</li>\n</ol>\n<h2 id=\"Vue-js-的优点\"><a href=\"#Vue-js-的优点\" class=\"headerlink\" title=\"Vue.js 的优点\"></a>Vue.js 的优点</h2><ol>\n<li>低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>\n<li>可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</li>\n<li>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li>\n<li>可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写</li>\n<li>易用灵活高效</li>\n</ol>\n<h2 id=\"Vue-组件是什么\"><a href=\"#Vue-组件是什么\" class=\"headerlink\" title=\"Vue 组件是什么\"></a>Vue 组件是什么</h2><p>组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以表现为用 is 特性进行了扩展的原生 HTML 元素。所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象 (除了一些根级特有的选项) 并提供相同的生命周期钩子。</p>\n<h1 id=\"Vue-cli\"><a href=\"#Vue-cli\" class=\"headerlink\" title=\"Vue-cli\"></a>Vue-cli</h1><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，致力于将 Vue 生态中的工具基础标准化。</p>\n<h2 id=\"Vue-脚手架-3-x-以上版本使用\"><a href=\"#Vue-脚手架-3-x-以上版本使用\" class=\"headerlink\" title=\"Vue 脚手架 3.x 以上版本使用\"></a>Vue 脚手架 3.x 以上版本使用</h2><p>全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add @vue/cli</span><br></pre></td></tr></table></figure></p>\n<p>快速原型开发<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure></p>\n<p>创建项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create hello-world</span><br><span class=\"line\">// 如果是在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作，需要执行下面命令</span><br><span class=\"line\">winpty vue.cmd create hello-world</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd hello-world</span><br></pre></td></tr></table></figure>\n<p>Project setup<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn install</span><br></pre></td></tr></table></figure></p>\n<p>（以下命令 run 可以省略）<br>Compiles and hot-reloads for development<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run serve</span><br></pre></td></tr></table></figure></p>\n<p>Compiles and minifies for production<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run build</span><br></pre></td></tr></table></figure></p>\n<p>Run your tests<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run test</span><br></pre></td></tr></table></figure></p>\n<p>Lints and fixes files<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run lint</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Vuecli-3-x-版本-上图-与-2-x-初始化目录对比\"><a href=\"#Vuecli-3-x-版本-上图-与-2-x-初始化目录对比\" class=\"headerlink\" title=\"Vuecli 3.x 版本(上图)与 2.x 初始化目录对比\"></a>Vuecli 3.x 版本(上图)与 2.x 初始化目录对比</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-35ec0c0fd8c70b11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-2e5b972e8f4586e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"Vue-Router\"><a href=\"#Vue-Router\" class=\"headerlink\" title=\"Vue Router\"></a>Vue Router</h1><p>Vue Router 是 Vue.js 官方的路由管理器。<br>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-router</span><br></pre></td></tr></table></figure></p>\n<p>引用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import VueRouter from &apos;vue-router&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure></p>\n<p>配置路由文件，并在vue实例中注入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;</span><br><span class=\"line\">  routes:[&#123;</span><br><span class=\"line\">    path:&apos;/user/:userId&apos;, // 指定要跳转的路径</span><br><span class=\"line\">    name: &apos;user&apos;,</span><br><span class=\"line\">    component: User// 指定要跳转的组件</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const User = (&#123;</span><br><span class=\"line\">  template: &apos;&lt;div&gt;User&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"确定视图加载的位置\"><a href=\"#确定视图加载的位置\" class=\"headerlink\" title=\"确定视图加载的位置\"></a>确定视图加载的位置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现路由跳转\"><a href=\"#实现路由跳转\" class=\"headerlink\" title=\"实现路由跳转\"></a>实现路由跳转</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link :to=&quot;&#123; name: &apos;user&apos;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><p>Vuex 是一个为 Vue.js 开发的状态管理模式：采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<h2 id=\"在-store-存储-内有下列核心概念\"><a href=\"#在-store-存储-内有下列核心概念\" class=\"headerlink\" title=\"在 store (存储)内有下列核心概念\"></a>在 store (存储)内有下列核心概念</h2><p><strong>State()：核心原始数据</strong> 展示<br><strong>Getter：计算属性，根据所依赖的数据的变化计算自身变化</strong> 存储<br><strong>Mutation(转变)：提交 mutation 才能改变存储状态</strong><br><strong>Action：</strong>Action 类似于 mutation，不同在于：<br>Action 提交的是 mutation，而不是直接变更状态。<br>Action 可以包含任意异步操作。<br><strong>Module：可以将将 store 分割</strong><br>一般放在 state 文件夹下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c1e2d56805eff7e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"vuex状态管理的流程\"><a href=\"#vuex状态管理的流程\" class=\"headerlink\" title=\"vuex状态管理的流程\"></a>vuex状态管理的流程</h2><p>view =&gt; actions =&gt; mutations =&gt; state =&gt; view</p>\n<h2 id=\"核心概念详解\"><a href=\"#核心概念详解\" class=\"headerlink\" title=\"核心概念详解\"></a>核心概念详解</h2><h3 id=\"state：记录所有公共数据状态的对象\"><a href=\"#state：记录所有公共数据状态的对象\" class=\"headerlink\" title=\"state：记录所有公共数据状态的对象\"></a>state：记录所有公共数据状态的对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 组件如何获取</span><br><span class=\"line\">this.$store.state.XXX</span><br><span class=\"line\">// 此处的 XXX 是 state 内定义的数据状态的键名</span><br></pre></td></tr></table></figure>\n<h3 id=\"mutations：包含所有-操作数据状态的方法-的对象\"><a href=\"#mutations：包含所有-操作数据状态的方法-的对象\" class=\"headerlink\" title=\"mutations：包含所有 操作数据状态的方法 的对象\"></a>mutations：包含所有 操作数据状态的方法 的对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 组件如何调用</span><br><span class=\"line\">this.$store.commit(XXX)</span><br><span class=\"line\">// 此处的 XXX是 mutations 中定义的方法名</span><br></pre></td></tr></table></figure>\n<h3 id=\"actions：用于操作-mutations-内方法-的对象\"><a href=\"#actions：用于操作-mutations-内方法-的对象\" class=\"headerlink\" title=\"actions：用于操作 mutations 内方法 的对象\"></a>actions：用于操作 mutations 内方法 的对象</h3><p>actions 提交的是 mutation，而不是直接变更状态 actions可以包含异步操作，但是 mutation 只能包含同步操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如何调用</span><br><span class=\"line\">this.$store.dispatch(XXX)</span><br><span class=\"line\">// 此处的XXX是你在actions中定义的方法名</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"getters：定义状态内容的方法-的对象\"><a href=\"#getters：定义状态内容的方法-的对象\" class=\"headerlink\" title=\"getters：定义状态内容的方法 的对象\"></a>getters：定义状态内容的方法 的对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$store.getters.XXX</span><br><span class=\"line\">// 此处的XXX是你在getters里定义的方法名</span><br></pre></td></tr></table></figure>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><p>当应用较大时，store将变得臃肿，Vuex 允许我们将 store 分割成模块（module）。<br>每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const moduleA = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const moduleB = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = new Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a // -&gt; moduleA 的状态</span><br><span class=\"line\">store.state.b // -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h1><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequest</li>\n<li>从 node.js 发出 http 请求</li>\n<li>支持 Promise API拦截</li>\n<li>请求和响应转换</li>\n<li>请求和响应数据取消</li>\n<li>请求自动转换JSON数据</li>\n<li>客户端支持防止 CSRF/XSRF</li>\n</ul>\n<ol>\n<li><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &apos;axios&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将axios全局挂载到 Vue 原型上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"axios-的-url-有两种传递参数的形式\"><a href=\"#axios-的-url-有两种传递参数的形式\" class=\"headerlink\" title=\"axios 的 url 有两种传递参数的形式\"></a>axios 的 url 有两种传递参数的形式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一种 对象形式</span><br><span class=\"line\">this.$http.get(&apos;/user&apos;, &#123;</span><br><span class=\"line\">    params: &#123;</span><br><span class=\"line\">      ID: 12345</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">// 如果只有一个参数，可以省略 params</span><br><span class=\"line\">this.$http.get(&apos;/user&apos;, &#123;</span><br><span class=\"line\">      ID: 12345</span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">--------------------------------- </span><br><span class=\"line\">// 第二种 形式</span><br><span class=\"line\">this.$http.get(&apos;https://cnodejs.org/api/v1/topics?page=1&amp;limit=15&apos;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"POST-传递数据有两种格式：\"><a href=\"#POST-传递数据有两种格式：\" class=\"headerlink\" title=\"POST 传递数据有两种格式：\"></a>POST 传递数据有两种格式：</h2><ol>\n<li>form­-data ?page=1&amp;limit=48</li>\n<li>x-­www­-form-­urlencoded { page: 1,limit: 10 }</li>\n</ol>\n<p><strong>在 axios 中，post 请求接收的参数必须是 form­-data 形式<br>如果要使用 x-­www­-form-­urlencoded 形式，需要用 qs 插件—qs.stringify 转换</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$http.post(&apos;/user&apos;, qs.stringify(&#123;</span><br><span class=\"line\">   ID: 12345</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>待完善。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h1><h2 id=\"Vue-js-特性：\"><a href=\"#Vue-js-特性：\" class=\"headerlink\" title=\"Vue.js 特性：\"></a>Vue.js 特性：</h2><p>1.轻量级<br>2.双向数据绑定<br>3.指令<br>4.组件化</p>\n<h2 id=\"什么是-MVVM\"><a href=\"#什么是-MVVM\" class=\"headerlink\" title=\"什么是 MVVM\"></a>什么是 MVVM</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MVC =&gt; MVP =&gt; MVVM</span><br><span class=\"line\">// 视图层和数据层的双向绑定</span><br><span class=\"line\">View &lt;=&gt; ViewModel &lt;=&gt; Model</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>MVVM是一种设计思想， 是 Model-View-ViewModel 的缩写。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。</p>\n</li>\n<li><p>在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到Model 中，而 Model 数据的变化也会立即反应到 View 上。</p>\n</li>\n<li><p>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p>\n</li>\n</ol>\n<h2 id=\"Vue-js-的优点\"><a href=\"#Vue-js-的优点\" class=\"headerlink\" title=\"Vue.js 的优点\"></a>Vue.js 的优点</h2><ol>\n<li>低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>\n<li>可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</li>\n<li>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li>\n<li>可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写</li>\n<li>易用灵活高效</li>\n</ol>\n<h2 id=\"Vue-组件是什么\"><a href=\"#Vue-组件是什么\" class=\"headerlink\" title=\"Vue 组件是什么\"></a>Vue 组件是什么</h2><p>组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以表现为用 is 特性进行了扩展的原生 HTML 元素。所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象 (除了一些根级特有的选项) 并提供相同的生命周期钩子。</p>\n<h1 id=\"Vue-cli\"><a href=\"#Vue-cli\" class=\"headerlink\" title=\"Vue-cli\"></a>Vue-cli</h1><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，致力于将 Vue 生态中的工具基础标准化。</p>\n<h2 id=\"Vue-脚手架-3-x-以上版本使用\"><a href=\"#Vue-脚手架-3-x-以上版本使用\" class=\"headerlink\" title=\"Vue 脚手架 3.x 以上版本使用\"></a>Vue 脚手架 3.x 以上版本使用</h2><p>全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add @vue/cli</span><br></pre></td></tr></table></figure></p>\n<p>快速原型开发<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure></p>\n<p>创建项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create hello-world</span><br><span class=\"line\">// 如果是在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作，需要执行下面命令</span><br><span class=\"line\">winpty vue.cmd create hello-world</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd hello-world</span><br></pre></td></tr></table></figure>\n<p>Project setup<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn install</span><br></pre></td></tr></table></figure></p>\n<p>（以下命令 run 可以省略）<br>Compiles and hot-reloads for development<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run serve</span><br></pre></td></tr></table></figure></p>\n<p>Compiles and minifies for production<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run build</span><br></pre></td></tr></table></figure></p>\n<p>Run your tests<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run test</span><br></pre></td></tr></table></figure></p>\n<p>Lints and fixes files<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn run lint</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Vuecli-3-x-版本-上图-与-2-x-初始化目录对比\"><a href=\"#Vuecli-3-x-版本-上图-与-2-x-初始化目录对比\" class=\"headerlink\" title=\"Vuecli 3.x 版本(上图)与 2.x 初始化目录对比\"></a>Vuecli 3.x 版本(上图)与 2.x 初始化目录对比</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-35ec0c0fd8c70b11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-2e5b972e8f4586e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"Vue-Router\"><a href=\"#Vue-Router\" class=\"headerlink\" title=\"Vue Router\"></a>Vue Router</h1><p>Vue Router 是 Vue.js 官方的路由管理器。<br>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-router</span><br></pre></td></tr></table></figure></p>\n<p>引用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import VueRouter from &apos;vue-router&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure></p>\n<p>配置路由文件，并在vue实例中注入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;</span><br><span class=\"line\">  routes:[&#123;</span><br><span class=\"line\">    path:&apos;/user/:userId&apos;, // 指定要跳转的路径</span><br><span class=\"line\">    name: &apos;user&apos;,</span><br><span class=\"line\">    component: User// 指定要跳转的组件</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const User = (&#123;</span><br><span class=\"line\">  template: &apos;&lt;div&gt;User&lt;/div&gt;&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"确定视图加载的位置\"><a href=\"#确定视图加载的位置\" class=\"headerlink\" title=\"确定视图加载的位置\"></a>确定视图加载的位置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现路由跳转\"><a href=\"#实现路由跳转\" class=\"headerlink\" title=\"实现路由跳转\"></a>实现路由跳转</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link :to=&quot;&#123; name: &apos;user&apos;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><p>Vuex 是一个为 Vue.js 开发的状态管理模式：采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<h2 id=\"在-store-存储-内有下列核心概念\"><a href=\"#在-store-存储-内有下列核心概念\" class=\"headerlink\" title=\"在 store (存储)内有下列核心概念\"></a>在 store (存储)内有下列核心概念</h2><p><strong>State()：核心原始数据</strong> 展示<br><strong>Getter：计算属性，根据所依赖的数据的变化计算自身变化</strong> 存储<br><strong>Mutation(转变)：提交 mutation 才能改变存储状态</strong><br><strong>Action：</strong>Action 类似于 mutation，不同在于：<br>Action 提交的是 mutation，而不是直接变更状态。<br>Action 可以包含任意异步操作。<br><strong>Module：可以将将 store 分割</strong><br>一般放在 state 文件夹下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c1e2d56805eff7e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"vuex状态管理的流程\"><a href=\"#vuex状态管理的流程\" class=\"headerlink\" title=\"vuex状态管理的流程\"></a>vuex状态管理的流程</h2><p>view =&gt; actions =&gt; mutations =&gt; state =&gt; view</p>\n<h2 id=\"核心概念详解\"><a href=\"#核心概念详解\" class=\"headerlink\" title=\"核心概念详解\"></a>核心概念详解</h2><h3 id=\"state：记录所有公共数据状态的对象\"><a href=\"#state：记录所有公共数据状态的对象\" class=\"headerlink\" title=\"state：记录所有公共数据状态的对象\"></a>state：记录所有公共数据状态的对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 组件如何获取</span><br><span class=\"line\">this.$store.state.XXX</span><br><span class=\"line\">// 此处的 XXX 是 state 内定义的数据状态的键名</span><br></pre></td></tr></table></figure>\n<h3 id=\"mutations：包含所有-操作数据状态的方法-的对象\"><a href=\"#mutations：包含所有-操作数据状态的方法-的对象\" class=\"headerlink\" title=\"mutations：包含所有 操作数据状态的方法 的对象\"></a>mutations：包含所有 操作数据状态的方法 的对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 组件如何调用</span><br><span class=\"line\">this.$store.commit(XXX)</span><br><span class=\"line\">// 此处的 XXX是 mutations 中定义的方法名</span><br></pre></td></tr></table></figure>\n<h3 id=\"actions：用于操作-mutations-内方法-的对象\"><a href=\"#actions：用于操作-mutations-内方法-的对象\" class=\"headerlink\" title=\"actions：用于操作 mutations 内方法 的对象\"></a>actions：用于操作 mutations 内方法 的对象</h3><p>actions 提交的是 mutation，而不是直接变更状态 actions可以包含异步操作，但是 mutation 只能包含同步操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如何调用</span><br><span class=\"line\">this.$store.dispatch(XXX)</span><br><span class=\"line\">// 此处的XXX是你在actions中定义的方法名</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"getters：定义状态内容的方法-的对象\"><a href=\"#getters：定义状态内容的方法-的对象\" class=\"headerlink\" title=\"getters：定义状态内容的方法 的对象\"></a>getters：定义状态内容的方法 的对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$store.getters.XXX</span><br><span class=\"line\">// 此处的XXX是你在getters里定义的方法名</span><br></pre></td></tr></table></figure>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><p>当应用较大时，store将变得臃肿，Vuex 允许我们将 store 分割成模块（module）。<br>每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const moduleA = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const moduleB = &#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = new Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a // -&gt; moduleA 的状态</span><br><span class=\"line\">store.state.b // -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h1><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequest</li>\n<li>从 node.js 发出 http 请求</li>\n<li>支持 Promise API拦截</li>\n<li>请求和响应转换</li>\n<li>请求和响应数据取消</li>\n<li>请求自动转换JSON数据</li>\n<li>客户端支持防止 CSRF/XSRF</li>\n</ul>\n<ol>\n<li><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &apos;axios&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将axios全局挂载到 Vue 原型上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"axios-的-url-有两种传递参数的形式\"><a href=\"#axios-的-url-有两种传递参数的形式\" class=\"headerlink\" title=\"axios 的 url 有两种传递参数的形式\"></a>axios 的 url 有两种传递参数的形式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一种 对象形式</span><br><span class=\"line\">this.$http.get(&apos;/user&apos;, &#123;</span><br><span class=\"line\">    params: &#123;</span><br><span class=\"line\">      ID: 12345</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">// 如果只有一个参数，可以省略 params</span><br><span class=\"line\">this.$http.get(&apos;/user&apos;, &#123;</span><br><span class=\"line\">      ID: 12345</span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">--------------------------------- </span><br><span class=\"line\">// 第二种 形式</span><br><span class=\"line\">this.$http.get(&apos;https://cnodejs.org/api/v1/topics?page=1&amp;limit=15&apos;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"POST-传递数据有两种格式：\"><a href=\"#POST-传递数据有两种格式：\" class=\"headerlink\" title=\"POST 传递数据有两种格式：\"></a>POST 传递数据有两种格式：</h2><ol>\n<li>form­-data ?page=1&amp;limit=48</li>\n<li>x-­www­-form-­urlencoded { page: 1,limit: 10 }</li>\n</ol>\n<p><strong>在 axios 中，post 请求接收的参数必须是 form­-data 形式<br>如果要使用 x-­www­-form-­urlencoded 形式，需要用 qs 插件—qs.stringify 转换</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$http.post(&apos;/user&apos;, qs.stringify(&#123;</span><br><span class=\"line\">   ID: 12345</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>待完善。。</p>\n"},{"title":"MVC 初尝试之 V 和 C","date":"2018-08-18T08:51:10.000Z","_content":"# 什么是[MVC](http://www.ruanyifeng.com/blog/2007/11/mvc.html)![](https://upload-images.jianshu.io/upload_images/7094266-bd2a358032410034.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n视图（View）：用户界面。\n控制器（Controller）：业务逻辑\n模型（Model）：数据保存\n![](https://upload-images.jianshu.io/upload_images/7094266-6f849f9b1d7762be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nView 传送指令到 Controller\nController 完成业务逻辑后，要求 Model 改变状态\nModel 将新的数据发送到 View，用户得到反馈\n# 那么怎么做呢\n\n**1.模块化你的js代码**\n将同一模块的js代码放在同一个文件夹里并正确命名，用立即执行函数[相关博客](https://www.jianshu.com/p/d880bacbc0e9)封装代码，防止出现全局变量\n```\n<!-- 模块化 -->\n    <script src=\"./js/init-swiper.js\"></script>\n    <script src=\"./js/auto-slide-up.js\"></script>\n    <script src=\"./js/sticky-topbar.js\"></script>\n    <script src=\"./js/smoothly-navigation.js\"></script>\n```\n**2.设置 V 和 C**\n\n2.1.首先简单区分出 V 和 C\n找到 js 模块对应的 html 模块，即是 view\nview 的作用是告诉js哪一部分是对应模块的 view\n以轮播模块为例\n```\n<!-- 这就是 view ，用户可以看到 -->\n<div id=\"mySlides\">\n    <!-- Slider main container -->\n    <div class=\"swiper-container\">\n        <!-- Additional required wrapper -->\n        <div class=\"swiper-wrapper\">\n            <!-- Slides -->\n            <img src=\"./img/works/nav-page.jpg\" class=\"swiper-slide\">\n            <img src=\"./img/works/canvas.jpg\" class=\"swiper-slide\">\n            <img src=\"./img/works/apple-style-slides.jpg\" class=\"swiper-slide\">\n        </div>\n        <!-- If we need pagination -->\n        <div class=\"swiper-pagination\"></div>\n    </div>\n    <!-- If we need navigation buttons -->\n    <div class=\"swiper-button-prev\"></div>\n    <div class=\"swiper-button-next\"></div>\n</div>\n```\n2.1.1.在 js 中声明一个 view 作为 js 模块的 view，如轮播模块的 view 为 #mySlides\n2.1.2.声明一个 controller 他是 view 的函数\n```\n!function(){\n    var view = document.querySelector('#mySlides')\n    var controller = function(view){\n        var mySwiper = new Swiper(view.querySelector('.swiper-container'), {\n            loop: true,\n            // If we need pagination\n            pagination: {\n                el: '.swiper-pagination',\n            },\n        \n            // Navigation arrows\n            navigation: {\n                nextEl: '.swiper-button-next',\n                prevEl: '.swiper-button-prev',\n            }\n        })\n    }\n    controller(view)\n}.call()\n```\n2.2.再简化一下\n用另一个模块 topNavBar 举例（可以看到每个模块结构是一致的）\n```\n! function () {\n    var view = document.querySelector('#topNavBar')\n    //把 controller 变成对象\n    var controller = {\n        //把函数放到 init 里（init 即是初始化）\n        init: function (view) {\n            window.addEventListener('scroll', function (x) {\n                if (window.scrollY > 0) {\n                    topNavBar.classList.add('sticky')\n                } else {\n                    topNavBar.classList.remove('sticky')\n                }\n            })\n        }\n    }\n    //此时 controller(view) 就变成了 controller.init(view)\n    controller.init(view)\n}.call()\n```\n下面是关键\n```\n! function () {\n    var view = document.querySelector('#topNavBar')\n    var controller = {\n        //开始 controller 有个空的 view     \n        view: null,\n        //有个初始化函数\n        init: function (view) {\n            //把 view 存到 controller 的 view 里\n            this.view = view\n            //下面代码 this.bindEvents.call(this)\n            this.bindEvents()\n        },\n        //绑定事件\n        bindEvents: function () {\n            //所以这里的 this 就是上面的 this\n            //上面的 this 就等于 controller.init(view)\n            //controller.init(view) 的 this 就是 controller\n            var view = this.view\n            window.addEventListener('scroll', function (x) {\n                if (window.scrollY > 0) {\n                    topNavBar.classList.add('sticky')\n                } else {\n                    topNavBar.classList.remove('sticky')\n                }\n            })\n        }\n    }\n    //下面代码等价于controller.init.call(controller,view) 即 this 就是controller\n    controller.init(view)\n}.call()\n```\ncontroller 有个 view，有个初始化函数，并可以绑定事件\n下面优化绑定事件函数内部代码，让其只起绑定事件的作用\n```\nwindow.addEventListener('scroll', function (x) {\n    if (window.scrollY > 0) {\n        topNavBar.classList.add('sticky')\n    } else {\n        topNavBar.classList.remove('sticky')\n    }\n})\n```\n由于 addEventListener 里面的 this 代表用户触发的元素\n但是我们希望 this 与原来一致\n**解决方法一：用 bind()**\n```\nwindow.addEventListener('scroll', function (x) {\n    if (window.scrollY > 0) {\n        topNavBar.classList.add('sticky')\n    } else {\n        topNavBar.classList.remove('sticky')\n    }\n}).bind(this)\n```\n**解决方法二：**\n用箭头函数，由于箭头函数没有 this ，所以当我们在其内部使用 this 默认就是外部的 this。\n**可以说箭头函数内外 this 不变，我们的目的就是让函数内外 this 不变**\n\n然后将 addClass 和 remove Class 事件也用各自的函数分隔开，同样用 this 和 view 串起来\n完整代码\n```\n! function () {\n    var view = document.querySelector('#topNavBar')\n    var controller = {\n        view: null,\n        init: function (view) {\n            this.view = view\n            this.bindEvents()\n        },\n        bindEvents: function () {\n            var view = this.view\n            window.addEventListener('scroll', (x) =>{\n                if (window.scrollY > 0) {\n                    this.active()\n                } else {\n                    this.deactive()\n                }\n            })\n        },\n        active:function(){\n            this.view.classList.add('sticky')\n        },\n        deactive:function(){\n            this.view.classList.remove('sticky')\n        }\n    }\n    controller.init(view)\n}.call()\n```\n轮播完整代码\n```\n! function () {\n    var view = document.querySelector('#mySlides')\n    var controller = {\n        view: null,\n        swiper: null,\n        swiperOptions: {\n            loop: true,\n            pagination: {\n                el: '.swiper-pagination',\n            },\n            navigation: {\n                nextEl: '.swiper-button-next',\n                prevEl: '.swiper-button-prev',\n            }\n        },\n        init: function (view) {\n            this.view = view\n            this.initSwiper()\n        },\n        initSwiper: function () {\n            this.swiper = new Swiper(\n                this.view.querySelector('.swiper-container'), \n                this.swiperOptions\n            )\n        },\n    }\n    controller.init(view)\n}.call()\n```\nsmoothly-navigation.js 模块代码\n```\n! function () {\n    var view = document.querySelector('nav.menu')\n    var controller = {\n        view: null,\n        aTags: null,\n        init: function (view) {\n            this.view = view\n            this.initAnimation()\n            this.bindEvents()\n        },\n        initAnimation: function () {\n            function animate(time) {\n                requestAnimationFrame(animate);\n                TWEEN.update(time);\n            }\n            requestAnimationFrame(animate);\n        },\n        scrollToElement: function (element) {\n            let top = element.offsetTop\n            let currentTop = window.scrollY\n            let targetTop = top - 80\n            let s = targetTop - currentTop //路程\n            var coords = {\n                y: currentTop\n            }; //起始位置\n            var t = Math.abs(s / 100) * 300;\n            if (t > 500) {\n                t = 500\n            } //时间\n            var tween = new TWEEN.Tween(coords) //起始位置\n                .to({\n                    y: targetTop\n                }, t) //结束位置和时间\n                .easing(TWEEN.Easing.Quadratic.InOut) //缓动类型\n                .onUpdate(function () {\n                    //coords.y 已经变了\n                    window.scrollTo(0, coords.y) //如何更新界面\n                })\n                .start(); //开始缓动\n        },\n        bindEvents: function () {\n            let aTags = this.view.querySelectorAll('nav.menu > ul > li > a')\n            for (let i = 0; i < aTags.length; i++) {\n                aTags[i].onclick = (x) =>{\n                    x.preventDefault()\n                    let a = x.currentTarget\n                    let href = a.getAttribute('href') //'#siteAbout'\n                    let element = document.querySelector(href)\n                    this.scrollToElement(element)\n                }\n            }\n        }\n    }\n    controller.init(view)\n}.call()\n```\n# 总结\n所有模块结构：\n**在立即执行函数内部**\n**有个 view** \n**有个 controller**\n**controller 操作 view**\n将复杂的代码模块化，然后通过对象 controller 将 view 的函数通过 this 串起来，使得每一个 view 的函数都可以被 controller 操控\n\n**后续：MVC 的 M：[做一个简单的留言——leancloud数据库](https://www.jianshu.com/p/039f910539d8)**\n\n---\n本文仅供个人学习使用","source":"_posts/MVC-初尝试之-V-和-C.md","raw":"---\ntitle: MVC 初尝试之 V 和 C\ndate: 2018-08-18 16:51:10\ntags:\n---\n# 什么是[MVC](http://www.ruanyifeng.com/blog/2007/11/mvc.html)![](https://upload-images.jianshu.io/upload_images/7094266-bd2a358032410034.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n视图（View）：用户界面。\n控制器（Controller）：业务逻辑\n模型（Model）：数据保存\n![](https://upload-images.jianshu.io/upload_images/7094266-6f849f9b1d7762be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nView 传送指令到 Controller\nController 完成业务逻辑后，要求 Model 改变状态\nModel 将新的数据发送到 View，用户得到反馈\n# 那么怎么做呢\n\n**1.模块化你的js代码**\n将同一模块的js代码放在同一个文件夹里并正确命名，用立即执行函数[相关博客](https://www.jianshu.com/p/d880bacbc0e9)封装代码，防止出现全局变量\n```\n<!-- 模块化 -->\n    <script src=\"./js/init-swiper.js\"></script>\n    <script src=\"./js/auto-slide-up.js\"></script>\n    <script src=\"./js/sticky-topbar.js\"></script>\n    <script src=\"./js/smoothly-navigation.js\"></script>\n```\n**2.设置 V 和 C**\n\n2.1.首先简单区分出 V 和 C\n找到 js 模块对应的 html 模块，即是 view\nview 的作用是告诉js哪一部分是对应模块的 view\n以轮播模块为例\n```\n<!-- 这就是 view ，用户可以看到 -->\n<div id=\"mySlides\">\n    <!-- Slider main container -->\n    <div class=\"swiper-container\">\n        <!-- Additional required wrapper -->\n        <div class=\"swiper-wrapper\">\n            <!-- Slides -->\n            <img src=\"./img/works/nav-page.jpg\" class=\"swiper-slide\">\n            <img src=\"./img/works/canvas.jpg\" class=\"swiper-slide\">\n            <img src=\"./img/works/apple-style-slides.jpg\" class=\"swiper-slide\">\n        </div>\n        <!-- If we need pagination -->\n        <div class=\"swiper-pagination\"></div>\n    </div>\n    <!-- If we need navigation buttons -->\n    <div class=\"swiper-button-prev\"></div>\n    <div class=\"swiper-button-next\"></div>\n</div>\n```\n2.1.1.在 js 中声明一个 view 作为 js 模块的 view，如轮播模块的 view 为 #mySlides\n2.1.2.声明一个 controller 他是 view 的函数\n```\n!function(){\n    var view = document.querySelector('#mySlides')\n    var controller = function(view){\n        var mySwiper = new Swiper(view.querySelector('.swiper-container'), {\n            loop: true,\n            // If we need pagination\n            pagination: {\n                el: '.swiper-pagination',\n            },\n        \n            // Navigation arrows\n            navigation: {\n                nextEl: '.swiper-button-next',\n                prevEl: '.swiper-button-prev',\n            }\n        })\n    }\n    controller(view)\n}.call()\n```\n2.2.再简化一下\n用另一个模块 topNavBar 举例（可以看到每个模块结构是一致的）\n```\n! function () {\n    var view = document.querySelector('#topNavBar')\n    //把 controller 变成对象\n    var controller = {\n        //把函数放到 init 里（init 即是初始化）\n        init: function (view) {\n            window.addEventListener('scroll', function (x) {\n                if (window.scrollY > 0) {\n                    topNavBar.classList.add('sticky')\n                } else {\n                    topNavBar.classList.remove('sticky')\n                }\n            })\n        }\n    }\n    //此时 controller(view) 就变成了 controller.init(view)\n    controller.init(view)\n}.call()\n```\n下面是关键\n```\n! function () {\n    var view = document.querySelector('#topNavBar')\n    var controller = {\n        //开始 controller 有个空的 view     \n        view: null,\n        //有个初始化函数\n        init: function (view) {\n            //把 view 存到 controller 的 view 里\n            this.view = view\n            //下面代码 this.bindEvents.call(this)\n            this.bindEvents()\n        },\n        //绑定事件\n        bindEvents: function () {\n            //所以这里的 this 就是上面的 this\n            //上面的 this 就等于 controller.init(view)\n            //controller.init(view) 的 this 就是 controller\n            var view = this.view\n            window.addEventListener('scroll', function (x) {\n                if (window.scrollY > 0) {\n                    topNavBar.classList.add('sticky')\n                } else {\n                    topNavBar.classList.remove('sticky')\n                }\n            })\n        }\n    }\n    //下面代码等价于controller.init.call(controller,view) 即 this 就是controller\n    controller.init(view)\n}.call()\n```\ncontroller 有个 view，有个初始化函数，并可以绑定事件\n下面优化绑定事件函数内部代码，让其只起绑定事件的作用\n```\nwindow.addEventListener('scroll', function (x) {\n    if (window.scrollY > 0) {\n        topNavBar.classList.add('sticky')\n    } else {\n        topNavBar.classList.remove('sticky')\n    }\n})\n```\n由于 addEventListener 里面的 this 代表用户触发的元素\n但是我们希望 this 与原来一致\n**解决方法一：用 bind()**\n```\nwindow.addEventListener('scroll', function (x) {\n    if (window.scrollY > 0) {\n        topNavBar.classList.add('sticky')\n    } else {\n        topNavBar.classList.remove('sticky')\n    }\n}).bind(this)\n```\n**解决方法二：**\n用箭头函数，由于箭头函数没有 this ，所以当我们在其内部使用 this 默认就是外部的 this。\n**可以说箭头函数内外 this 不变，我们的目的就是让函数内外 this 不变**\n\n然后将 addClass 和 remove Class 事件也用各自的函数分隔开，同样用 this 和 view 串起来\n完整代码\n```\n! function () {\n    var view = document.querySelector('#topNavBar')\n    var controller = {\n        view: null,\n        init: function (view) {\n            this.view = view\n            this.bindEvents()\n        },\n        bindEvents: function () {\n            var view = this.view\n            window.addEventListener('scroll', (x) =>{\n                if (window.scrollY > 0) {\n                    this.active()\n                } else {\n                    this.deactive()\n                }\n            })\n        },\n        active:function(){\n            this.view.classList.add('sticky')\n        },\n        deactive:function(){\n            this.view.classList.remove('sticky')\n        }\n    }\n    controller.init(view)\n}.call()\n```\n轮播完整代码\n```\n! function () {\n    var view = document.querySelector('#mySlides')\n    var controller = {\n        view: null,\n        swiper: null,\n        swiperOptions: {\n            loop: true,\n            pagination: {\n                el: '.swiper-pagination',\n            },\n            navigation: {\n                nextEl: '.swiper-button-next',\n                prevEl: '.swiper-button-prev',\n            }\n        },\n        init: function (view) {\n            this.view = view\n            this.initSwiper()\n        },\n        initSwiper: function () {\n            this.swiper = new Swiper(\n                this.view.querySelector('.swiper-container'), \n                this.swiperOptions\n            )\n        },\n    }\n    controller.init(view)\n}.call()\n```\nsmoothly-navigation.js 模块代码\n```\n! function () {\n    var view = document.querySelector('nav.menu')\n    var controller = {\n        view: null,\n        aTags: null,\n        init: function (view) {\n            this.view = view\n            this.initAnimation()\n            this.bindEvents()\n        },\n        initAnimation: function () {\n            function animate(time) {\n                requestAnimationFrame(animate);\n                TWEEN.update(time);\n            }\n            requestAnimationFrame(animate);\n        },\n        scrollToElement: function (element) {\n            let top = element.offsetTop\n            let currentTop = window.scrollY\n            let targetTop = top - 80\n            let s = targetTop - currentTop //路程\n            var coords = {\n                y: currentTop\n            }; //起始位置\n            var t = Math.abs(s / 100) * 300;\n            if (t > 500) {\n                t = 500\n            } //时间\n            var tween = new TWEEN.Tween(coords) //起始位置\n                .to({\n                    y: targetTop\n                }, t) //结束位置和时间\n                .easing(TWEEN.Easing.Quadratic.InOut) //缓动类型\n                .onUpdate(function () {\n                    //coords.y 已经变了\n                    window.scrollTo(0, coords.y) //如何更新界面\n                })\n                .start(); //开始缓动\n        },\n        bindEvents: function () {\n            let aTags = this.view.querySelectorAll('nav.menu > ul > li > a')\n            for (let i = 0; i < aTags.length; i++) {\n                aTags[i].onclick = (x) =>{\n                    x.preventDefault()\n                    let a = x.currentTarget\n                    let href = a.getAttribute('href') //'#siteAbout'\n                    let element = document.querySelector(href)\n                    this.scrollToElement(element)\n                }\n            }\n        }\n    }\n    controller.init(view)\n}.call()\n```\n# 总结\n所有模块结构：\n**在立即执行函数内部**\n**有个 view** \n**有个 controller**\n**controller 操作 view**\n将复杂的代码模块化，然后通过对象 controller 将 view 的函数通过 this 串起来，使得每一个 view 的函数都可以被 controller 操控\n\n**后续：MVC 的 M：[做一个简单的留言——leancloud数据库](https://www.jianshu.com/p/039f910539d8)**\n\n---\n本文仅供个人学习使用","slug":"MVC-初尝试之-V-和-C","published":1,"updated":"2019-01-22T14:29:00.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvd0006hw99kkvdqkfu","content":"<h1 id=\"什么是MVC\"><a href=\"#什么是MVC\" class=\"headerlink\" title=\"什么是MVC\"></a>什么是<a href=\"http://www.ruanyifeng.com/blog/2007/11/mvc.html\" target=\"_blank\" rel=\"noopener\">MVC</a><img src=\"https://upload-images.jianshu.io/upload_images/7094266-bd2a358032410034.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></h1><p>视图（View）：用户界面。<br>控制器（Controller）：业务逻辑<br>模型（Model）：数据保存<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-6f849f9b1d7762be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>View 传送指令到 Controller<br>Controller 完成业务逻辑后，要求 Model 改变状态<br>Model 将新的数据发送到 View，用户得到反馈</p>\n<h1 id=\"那么怎么做呢\"><a href=\"#那么怎么做呢\" class=\"headerlink\" title=\"那么怎么做呢\"></a>那么怎么做呢</h1><p><strong>1.模块化你的js代码</strong><br>将同一模块的js代码放在同一个文件夹里并正确命名，用立即执行函数<a href=\"https://www.jianshu.com/p/d880bacbc0e9\" target=\"_blank\" rel=\"noopener\">相关博客</a>封装代码，防止出现全局变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 模块化 --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/init-swiper.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/auto-slide-up.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/sticky-topbar.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/smoothly-navigation.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.设置 V 和 C</strong></p>\n<p>2.1.首先简单区分出 V 和 C<br>找到 js 模块对应的 html 模块，即是 view<br>view 的作用是告诉js哪一部分是对应模块的 view<br>以轮播模块为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这就是 view ，用户可以看到 --&gt;</span><br><span class=\"line\">&lt;div id=&quot;mySlides&quot;&gt;</span><br><span class=\"line\">    &lt;!-- Slider main container --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper-container&quot;&gt;</span><br><span class=\"line\">        &lt;!-- Additional required wrapper --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class=\"line\">            &lt;!-- Slides --&gt;</span><br><span class=\"line\">            &lt;img src=&quot;./img/works/nav-page.jpg&quot; class=&quot;swiper-slide&quot;&gt;</span><br><span class=\"line\">            &lt;img src=&quot;./img/works/canvas.jpg&quot; class=&quot;swiper-slide&quot;&gt;</span><br><span class=\"line\">            &lt;img src=&quot;./img/works/apple-style-slides.jpg&quot; class=&quot;swiper-slide&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;!-- If we need pagination --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;!-- If we need navigation buttons --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.1.1.在 js 中声明一个 view 作为 js 模块的 view，如轮播模块的 view 为 #mySlides<br>2.1.2.声明一个 controller 他是 view 的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function()&#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#mySlides&apos;)</span><br><span class=\"line\">    var controller = function(view)&#123;</span><br><span class=\"line\">        var mySwiper = new Swiper(view.querySelector(&apos;.swiper-container&apos;), &#123;</span><br><span class=\"line\">            loop: true,</span><br><span class=\"line\">            // If we need pagination</span><br><span class=\"line\">            pagination: &#123;</span><br><span class=\"line\">                el: &apos;.swiper-pagination&apos;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">            // Navigation arrows</span><br><span class=\"line\">            navigation: &#123;</span><br><span class=\"line\">                nextEl: &apos;.swiper-button-next&apos;,</span><br><span class=\"line\">                prevEl: &apos;.swiper-button-prev&apos;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>2.2.再简化一下<br>用另一个模块 topNavBar 举例（可以看到每个模块结构是一致的）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#topNavBar&apos;)</span><br><span class=\"line\">    //把 controller 变成对象</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        //把函数放到 init 里（init 即是初始化）</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            window.addEventListener(&apos;scroll&apos;, function (x) &#123;</span><br><span class=\"line\">                if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">                    topNavBar.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    topNavBar.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //此时 controller(view) 就变成了 controller.init(view)</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>下面是关键<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#topNavBar&apos;)</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        //开始 controller 有个空的 view     </span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        //有个初始化函数</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            //把 view 存到 controller 的 view 里</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            //下面代码 this.bindEvents.call(this)</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //绑定事件</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            //所以这里的 this 就是上面的 this</span><br><span class=\"line\">            //上面的 this 就等于 controller.init(view)</span><br><span class=\"line\">            //controller.init(view) 的 this 就是 controller</span><br><span class=\"line\">            var view = this.view</span><br><span class=\"line\">            window.addEventListener(&apos;scroll&apos;, function (x) &#123;</span><br><span class=\"line\">                if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">                    topNavBar.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    topNavBar.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //下面代码等价于controller.init.call(controller,view) 即 this 就是controller</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>controller 有个 view，有个初始化函数，并可以绑定事件<br>下面优化绑定事件函数内部代码，让其只起绑定事件的作用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&apos;scroll&apos;, function (x) &#123;</span><br><span class=\"line\">    if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">        topNavBar.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        topNavBar.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>由于 addEventListener 里面的 this 代表用户触发的元素<br>但是我们希望 this 与原来一致<br><strong>解决方法一：用 bind()</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&apos;scroll&apos;, function (x) &#123;</span><br><span class=\"line\">    if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">        topNavBar.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        topNavBar.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).bind(this)</span><br></pre></td></tr></table></figure></p>\n<p><strong>解决方法二：</strong><br>用箭头函数，由于箭头函数没有 this ，所以当我们在其内部使用 this 默认就是外部的 this。<br><strong>可以说箭头函数内外 this 不变，我们的目的就是让函数内外 this 不变</strong></p>\n<p>然后将 addClass 和 remove Class 事件也用各自的函数分隔开，同样用 this 和 view 串起来<br>完整代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#topNavBar&apos;)</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            var view = this.view</span><br><span class=\"line\">            window.addEventListener(&apos;scroll&apos;, (x) =&gt;&#123;</span><br><span class=\"line\">                if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">                    this.active()</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    this.deactive()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        active:function()&#123;</span><br><span class=\"line\">            this.view.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deactive:function()&#123;</span><br><span class=\"line\">            this.view.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>轮播完整代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#mySlides&apos;)</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        swiper: null,</span><br><span class=\"line\">        swiperOptions: &#123;</span><br><span class=\"line\">            loop: true,</span><br><span class=\"line\">            pagination: &#123;</span><br><span class=\"line\">                el: &apos;.swiper-pagination&apos;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            navigation: &#123;</span><br><span class=\"line\">                nextEl: &apos;.swiper-button-next&apos;,</span><br><span class=\"line\">                prevEl: &apos;.swiper-button-prev&apos;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.initSwiper()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        initSwiper: function () &#123;</span><br><span class=\"line\">            this.swiper = new Swiper(</span><br><span class=\"line\">                this.view.querySelector(&apos;.swiper-container&apos;), </span><br><span class=\"line\">                this.swiperOptions</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>smoothly-navigation.js 模块代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;nav.menu&apos;)</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        aTags: null,</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.initAnimation()</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        initAnimation: function () &#123;</span><br><span class=\"line\">            function animate(time) &#123;</span><br><span class=\"line\">                requestAnimationFrame(animate);</span><br><span class=\"line\">                TWEEN.update(time);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            requestAnimationFrame(animate);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        scrollToElement: function (element) &#123;</span><br><span class=\"line\">            let top = element.offsetTop</span><br><span class=\"line\">            let currentTop = window.scrollY</span><br><span class=\"line\">            let targetTop = top - 80</span><br><span class=\"line\">            let s = targetTop - currentTop //路程</span><br><span class=\"line\">            var coords = &#123;</span><br><span class=\"line\">                y: currentTop</span><br><span class=\"line\">            &#125;; //起始位置</span><br><span class=\"line\">            var t = Math.abs(s / 100) * 300;</span><br><span class=\"line\">            if (t &gt; 500) &#123;</span><br><span class=\"line\">                t = 500</span><br><span class=\"line\">            &#125; //时间</span><br><span class=\"line\">            var tween = new TWEEN.Tween(coords) //起始位置</span><br><span class=\"line\">                .to(&#123;</span><br><span class=\"line\">                    y: targetTop</span><br><span class=\"line\">                &#125;, t) //结束位置和时间</span><br><span class=\"line\">                .easing(TWEEN.Easing.Quadratic.InOut) //缓动类型</span><br><span class=\"line\">                .onUpdate(function () &#123;</span><br><span class=\"line\">                    //coords.y 已经变了</span><br><span class=\"line\">                    window.scrollTo(0, coords.y) //如何更新界面</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .start(); //开始缓动</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            let aTags = this.view.querySelectorAll(&apos;nav.menu &gt; ul &gt; li &gt; a&apos;)</span><br><span class=\"line\">            for (let i = 0; i &lt; aTags.length; i++) &#123;</span><br><span class=\"line\">                aTags[i].onclick = (x) =&gt;&#123;</span><br><span class=\"line\">                    x.preventDefault()</span><br><span class=\"line\">                    let a = x.currentTarget</span><br><span class=\"line\">                    let href = a.getAttribute(&apos;href&apos;) //&apos;#siteAbout&apos;</span><br><span class=\"line\">                    let element = document.querySelector(href)</span><br><span class=\"line\">                    this.scrollToElement(element)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>所有模块结构：<br><strong>在立即执行函数内部</strong><br><strong>有个 view</strong><br><strong>有个 controller</strong><br><strong>controller 操作 view</strong><br>将复杂的代码模块化，然后通过对象 controller 将 view 的函数通过 this 串起来，使得每一个 view 的函数都可以被 controller 操控</p>\n<p><strong>后续：MVC 的 M：<a href=\"https://www.jianshu.com/p/039f910539d8\" target=\"_blank\" rel=\"noopener\">做一个简单的留言——leancloud数据库</a></strong></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是MVC\"><a href=\"#什么是MVC\" class=\"headerlink\" title=\"什么是MVC\"></a>什么是<a href=\"http://www.ruanyifeng.com/blog/2007/11/mvc.html\" target=\"_blank\" rel=\"noopener\">MVC</a><img src=\"https://upload-images.jianshu.io/upload_images/7094266-bd2a358032410034.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></h1><p>视图（View）：用户界面。<br>控制器（Controller）：业务逻辑<br>模型（Model）：数据保存<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-6f849f9b1d7762be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>View 传送指令到 Controller<br>Controller 完成业务逻辑后，要求 Model 改变状态<br>Model 将新的数据发送到 View，用户得到反馈</p>\n<h1 id=\"那么怎么做呢\"><a href=\"#那么怎么做呢\" class=\"headerlink\" title=\"那么怎么做呢\"></a>那么怎么做呢</h1><p><strong>1.模块化你的js代码</strong><br>将同一模块的js代码放在同一个文件夹里并正确命名，用立即执行函数<a href=\"https://www.jianshu.com/p/d880bacbc0e9\" target=\"_blank\" rel=\"noopener\">相关博客</a>封装代码，防止出现全局变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 模块化 --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/init-swiper.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/auto-slide-up.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/sticky-topbar.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/smoothly-navigation.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.设置 V 和 C</strong></p>\n<p>2.1.首先简单区分出 V 和 C<br>找到 js 模块对应的 html 模块，即是 view<br>view 的作用是告诉js哪一部分是对应模块的 view<br>以轮播模块为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这就是 view ，用户可以看到 --&gt;</span><br><span class=\"line\">&lt;div id=&quot;mySlides&quot;&gt;</span><br><span class=\"line\">    &lt;!-- Slider main container --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper-container&quot;&gt;</span><br><span class=\"line\">        &lt;!-- Additional required wrapper --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class=\"line\">            &lt;!-- Slides --&gt;</span><br><span class=\"line\">            &lt;img src=&quot;./img/works/nav-page.jpg&quot; class=&quot;swiper-slide&quot;&gt;</span><br><span class=\"line\">            &lt;img src=&quot;./img/works/canvas.jpg&quot; class=&quot;swiper-slide&quot;&gt;</span><br><span class=\"line\">            &lt;img src=&quot;./img/works/apple-style-slides.jpg&quot; class=&quot;swiper-slide&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;!-- If we need pagination --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;!-- If we need navigation buttons --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.1.1.在 js 中声明一个 view 作为 js 模块的 view，如轮播模块的 view 为 #mySlides<br>2.1.2.声明一个 controller 他是 view 的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function()&#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#mySlides&apos;)</span><br><span class=\"line\">    var controller = function(view)&#123;</span><br><span class=\"line\">        var mySwiper = new Swiper(view.querySelector(&apos;.swiper-container&apos;), &#123;</span><br><span class=\"line\">            loop: true,</span><br><span class=\"line\">            // If we need pagination</span><br><span class=\"line\">            pagination: &#123;</span><br><span class=\"line\">                el: &apos;.swiper-pagination&apos;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">            // Navigation arrows</span><br><span class=\"line\">            navigation: &#123;</span><br><span class=\"line\">                nextEl: &apos;.swiper-button-next&apos;,</span><br><span class=\"line\">                prevEl: &apos;.swiper-button-prev&apos;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>2.2.再简化一下<br>用另一个模块 topNavBar 举例（可以看到每个模块结构是一致的）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#topNavBar&apos;)</span><br><span class=\"line\">    //把 controller 变成对象</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        //把函数放到 init 里（init 即是初始化）</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            window.addEventListener(&apos;scroll&apos;, function (x) &#123;</span><br><span class=\"line\">                if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">                    topNavBar.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    topNavBar.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //此时 controller(view) 就变成了 controller.init(view)</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>下面是关键<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#topNavBar&apos;)</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        //开始 controller 有个空的 view     </span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        //有个初始化函数</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            //把 view 存到 controller 的 view 里</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            //下面代码 this.bindEvents.call(this)</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //绑定事件</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            //所以这里的 this 就是上面的 this</span><br><span class=\"line\">            //上面的 this 就等于 controller.init(view)</span><br><span class=\"line\">            //controller.init(view) 的 this 就是 controller</span><br><span class=\"line\">            var view = this.view</span><br><span class=\"line\">            window.addEventListener(&apos;scroll&apos;, function (x) &#123;</span><br><span class=\"line\">                if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">                    topNavBar.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    topNavBar.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //下面代码等价于controller.init.call(controller,view) 即 this 就是controller</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>controller 有个 view，有个初始化函数，并可以绑定事件<br>下面优化绑定事件函数内部代码，让其只起绑定事件的作用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&apos;scroll&apos;, function (x) &#123;</span><br><span class=\"line\">    if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">        topNavBar.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        topNavBar.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>由于 addEventListener 里面的 this 代表用户触发的元素<br>但是我们希望 this 与原来一致<br><strong>解决方法一：用 bind()</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&apos;scroll&apos;, function (x) &#123;</span><br><span class=\"line\">    if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">        topNavBar.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        topNavBar.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).bind(this)</span><br></pre></td></tr></table></figure></p>\n<p><strong>解决方法二：</strong><br>用箭头函数，由于箭头函数没有 this ，所以当我们在其内部使用 this 默认就是外部的 this。<br><strong>可以说箭头函数内外 this 不变，我们的目的就是让函数内外 this 不变</strong></p>\n<p>然后将 addClass 和 remove Class 事件也用各自的函数分隔开，同样用 this 和 view 串起来<br>完整代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#topNavBar&apos;)</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            var view = this.view</span><br><span class=\"line\">            window.addEventListener(&apos;scroll&apos;, (x) =&gt;&#123;</span><br><span class=\"line\">                if (window.scrollY &gt; 0) &#123;</span><br><span class=\"line\">                    this.active()</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    this.deactive()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        active:function()&#123;</span><br><span class=\"line\">            this.view.classList.add(&apos;sticky&apos;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deactive:function()&#123;</span><br><span class=\"line\">            this.view.classList.remove(&apos;sticky&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>轮播完整代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;#mySlides&apos;)</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        swiper: null,</span><br><span class=\"line\">        swiperOptions: &#123;</span><br><span class=\"line\">            loop: true,</span><br><span class=\"line\">            pagination: &#123;</span><br><span class=\"line\">                el: &apos;.swiper-pagination&apos;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            navigation: &#123;</span><br><span class=\"line\">                nextEl: &apos;.swiper-button-next&apos;,</span><br><span class=\"line\">                prevEl: &apos;.swiper-button-prev&apos;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.initSwiper()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        initSwiper: function () &#123;</span><br><span class=\"line\">            this.swiper = new Swiper(</span><br><span class=\"line\">                this.view.querySelector(&apos;.swiper-container&apos;), </span><br><span class=\"line\">                this.swiperOptions</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>smoothly-navigation.js 模块代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    var view = document.querySelector(&apos;nav.menu&apos;)</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        aTags: null,</span><br><span class=\"line\">        init: function (view) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.initAnimation()</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        initAnimation: function () &#123;</span><br><span class=\"line\">            function animate(time) &#123;</span><br><span class=\"line\">                requestAnimationFrame(animate);</span><br><span class=\"line\">                TWEEN.update(time);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            requestAnimationFrame(animate);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        scrollToElement: function (element) &#123;</span><br><span class=\"line\">            let top = element.offsetTop</span><br><span class=\"line\">            let currentTop = window.scrollY</span><br><span class=\"line\">            let targetTop = top - 80</span><br><span class=\"line\">            let s = targetTop - currentTop //路程</span><br><span class=\"line\">            var coords = &#123;</span><br><span class=\"line\">                y: currentTop</span><br><span class=\"line\">            &#125;; //起始位置</span><br><span class=\"line\">            var t = Math.abs(s / 100) * 300;</span><br><span class=\"line\">            if (t &gt; 500) &#123;</span><br><span class=\"line\">                t = 500</span><br><span class=\"line\">            &#125; //时间</span><br><span class=\"line\">            var tween = new TWEEN.Tween(coords) //起始位置</span><br><span class=\"line\">                .to(&#123;</span><br><span class=\"line\">                    y: targetTop</span><br><span class=\"line\">                &#125;, t) //结束位置和时间</span><br><span class=\"line\">                .easing(TWEEN.Easing.Quadratic.InOut) //缓动类型</span><br><span class=\"line\">                .onUpdate(function () &#123;</span><br><span class=\"line\">                    //coords.y 已经变了</span><br><span class=\"line\">                    window.scrollTo(0, coords.y) //如何更新界面</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .start(); //开始缓动</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            let aTags = this.view.querySelectorAll(&apos;nav.menu &gt; ul &gt; li &gt; a&apos;)</span><br><span class=\"line\">            for (let i = 0; i &lt; aTags.length; i++) &#123;</span><br><span class=\"line\">                aTags[i].onclick = (x) =&gt;&#123;</span><br><span class=\"line\">                    x.preventDefault()</span><br><span class=\"line\">                    let a = x.currentTarget</span><br><span class=\"line\">                    let href = a.getAttribute(&apos;href&apos;) //&apos;#siteAbout&apos;</span><br><span class=\"line\">                    let element = document.querySelector(href)</span><br><span class=\"line\">                    this.scrollToElement(element)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>所有模块结构：<br><strong>在立即执行函数内部</strong><br><strong>有个 view</strong><br><strong>有个 controller</strong><br><strong>controller 操作 view</strong><br>将复杂的代码模块化，然后通过对象 controller 将 view 的函数通过 this 串起来，使得每一个 view 的函数都可以被 controller 操控</p>\n<p><strong>后续：MVC 的 M：<a href=\"https://www.jianshu.com/p/039f910539d8\" target=\"_blank\" rel=\"noopener\">做一个简单的留言——leancloud数据库</a></strong></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n"},{"title":"git入门——在本地使用git","date":"2018-06-05T13:05:27.000Z","_content":"# 什么是git\n\ngit是世界上最好的分布式版本控制系统\n\n什么意思？可以看廖雪峰的[git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)前面部分了解其概念\n\n# 如何在本地使用git\n\n首先，打开你的命令行，本次我使用的是Windows上的git bash，进入你的桌面 cd Desktop/\n\n![](https://upload-images.jianshu.io/upload_images/7094266-43b9dc80ef559196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在桌面创建一个文件夹，如 git-demo-1 \n\nmkdir git-demo-1\n\n![](https://upload-images.jianshu.io/upload_images/7094266-0dc68b973297288f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**1\\. git init 初始化本地仓库 .git**\n\n进入这个目录：cd git-demo-1\n\n然后输入命令：git init\n\n这句命令会在 git-demo-1 里创建一个 .git 目录\n\n可以用ls -la 观察这个目录\n\n![](https://upload-images.jianshu.io/upload_images/7094266-234bac65ee856269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**2\\. git status -sb 观察当前文件状态**\n\n在 git-demo-1 目录里创建一个文件如index.html\n\ntouch index.html\n\n运行 git status -sb 可以看到文件前面有 ?? \n\n![](https://upload-images.jianshu.io/upload_images/7094266-5e3a74ba0f7d5209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**3\\. git add 文件名或 git add.**\n\n ?? 表示 git 不知道如何对待这个新的文件\n\n此时要用 git add 将文件添加到「暂存区」\n\ngit add index.html（若文件较多，一个个加麻烦，可直接用git add. 一次性将所有变动加到暂存区）\n\n然后可以再 git status -sb 观察其状态\n\n![](https://upload-images.jianshu.io/upload_images/7094266-aae00cd046749ce5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n?? 变成了 A 即告诉 git 这些文件我要加到仓库里\n\n**4. git commit -m \"信息\" 将文件正式提交到本地仓库（.git）**\n\n同样你可以一个个提交文件 \n\ngit commit index.html -m '添加index.html'\n\n或者一次提交所有文件\n\ngit commit . -m \"添加了几个文件\"\n\n再运行 git status -sb\n\n![](https://upload-images.jianshu.io/upload_images/7094266-0dc17938fa6c7440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n出现## master 说明你已经将文件上传成功了\n\n这时你可以用 git log 看历史变动\n\n![](https://upload-images.jianshu.io/upload_images/7094266-497d1b90a4b1e1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n至此，一次在本地使用 git 的过程就完成了\n\n如果对已有文件有新的变动，我们只需要依次执行 git add xxx 和 git commit -m 'xxx' 两个命令即可\n\n* * *\n\n# 总结一下就是\n\n**1\\. git init 初始化本地仓库 .git**\n\n**2\\. git add 文件名或 git add.** \n\n**3. git commit -m \"信息\" 将文件正式提交到本地仓库（.git）** \n\n**有新的变动， git add xxx 和 git commit -m 'xxx'** \n\n**过程中用 git status -sb 观察当前文件状态**\n\n**最后可用 git log 看历史变动**\n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n一些参考：\n\n[git教程](http://www.runoob.com/git/git-tutorial.html)\n\n[常用 Git 命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n\n[廖大大-git](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n","source":"_posts/git入门——在本地使用git.md","raw":"---\ntitle: git入门——在本地使用git\ndate: 2018-06-05 21:05:27\ntags:\n---\n# 什么是git\n\ngit是世界上最好的分布式版本控制系统\n\n什么意思？可以看廖雪峰的[git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)前面部分了解其概念\n\n# 如何在本地使用git\n\n首先，打开你的命令行，本次我使用的是Windows上的git bash，进入你的桌面 cd Desktop/\n\n![](https://upload-images.jianshu.io/upload_images/7094266-43b9dc80ef559196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在桌面创建一个文件夹，如 git-demo-1 \n\nmkdir git-demo-1\n\n![](https://upload-images.jianshu.io/upload_images/7094266-0dc68b973297288f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**1\\. git init 初始化本地仓库 .git**\n\n进入这个目录：cd git-demo-1\n\n然后输入命令：git init\n\n这句命令会在 git-demo-1 里创建一个 .git 目录\n\n可以用ls -la 观察这个目录\n\n![](https://upload-images.jianshu.io/upload_images/7094266-234bac65ee856269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**2\\. git status -sb 观察当前文件状态**\n\n在 git-demo-1 目录里创建一个文件如index.html\n\ntouch index.html\n\n运行 git status -sb 可以看到文件前面有 ?? \n\n![](https://upload-images.jianshu.io/upload_images/7094266-5e3a74ba0f7d5209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**3\\. git add 文件名或 git add.**\n\n ?? 表示 git 不知道如何对待这个新的文件\n\n此时要用 git add 将文件添加到「暂存区」\n\ngit add index.html（若文件较多，一个个加麻烦，可直接用git add. 一次性将所有变动加到暂存区）\n\n然后可以再 git status -sb 观察其状态\n\n![](https://upload-images.jianshu.io/upload_images/7094266-aae00cd046749ce5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n?? 变成了 A 即告诉 git 这些文件我要加到仓库里\n\n**4. git commit -m \"信息\" 将文件正式提交到本地仓库（.git）**\n\n同样你可以一个个提交文件 \n\ngit commit index.html -m '添加index.html'\n\n或者一次提交所有文件\n\ngit commit . -m \"添加了几个文件\"\n\n再运行 git status -sb\n\n![](https://upload-images.jianshu.io/upload_images/7094266-0dc17938fa6c7440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n出现## master 说明你已经将文件上传成功了\n\n这时你可以用 git log 看历史变动\n\n![](https://upload-images.jianshu.io/upload_images/7094266-497d1b90a4b1e1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n至此，一次在本地使用 git 的过程就完成了\n\n如果对已有文件有新的变动，我们只需要依次执行 git add xxx 和 git commit -m 'xxx' 两个命令即可\n\n* * *\n\n# 总结一下就是\n\n**1\\. git init 初始化本地仓库 .git**\n\n**2\\. git add 文件名或 git add.** \n\n**3. git commit -m \"信息\" 将文件正式提交到本地仓库（.git）** \n\n**有新的变动， git add xxx 和 git commit -m 'xxx'** \n\n**过程中用 git status -sb 观察当前文件状态**\n\n**最后可用 git log 看历史变动**\n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n一些参考：\n\n[git教程](http://www.runoob.com/git/git-tutorial.html)\n\n[常用 Git 命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n\n[廖大大-git](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n","slug":"git入门——在本地使用git","published":1,"updated":"2019-01-22T14:08:01.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpve0007hw999kvinmp0","content":"<h1 id=\"什么是git\"><a href=\"#什么是git\" class=\"headerlink\" title=\"什么是git\"></a>什么是git</h1><p>git是世界上最好的分布式版本控制系统</p>\n<p>什么意思？可以看廖雪峰的<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">git教程</a>前面部分了解其概念</p>\n<h1 id=\"如何在本地使用git\"><a href=\"#如何在本地使用git\" class=\"headerlink\" title=\"如何在本地使用git\"></a>如何在本地使用git</h1><p>首先，打开你的命令行，本次我使用的是Windows上的git bash，进入你的桌面 cd Desktop/</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-43b9dc80ef559196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在桌面创建一个文件夹，如 git-demo-1 </p>\n<p>mkdir git-demo-1</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0dc68b973297288f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>1. git init 初始化本地仓库 .git</strong></p>\n<p>进入这个目录：cd git-demo-1</p>\n<p>然后输入命令：git init</p>\n<p>这句命令会在 git-demo-1 里创建一个 .git 目录</p>\n<p>可以用ls -la 观察这个目录</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-234bac65ee856269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>2. git status -sb 观察当前文件状态</strong></p>\n<p>在 git-demo-1 目录里创建一个文件如index.html</p>\n<p>touch index.html</p>\n<p>运行 git status -sb 可以看到文件前面有 ?? </p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5e3a74ba0f7d5209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>3. git add 文件名或 git add.</strong></p>\n<p> ?? 表示 git 不知道如何对待这个新的文件</p>\n<p>此时要用 git add 将文件添加到「暂存区」</p>\n<p>git add index.html（若文件较多，一个个加麻烦，可直接用git add. 一次性将所有变动加到暂存区）</p>\n<p>然后可以再 git status -sb 观察其状态</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-aae00cd046749ce5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>?? 变成了 A 即告诉 git 这些文件我要加到仓库里</p>\n<p><strong>4. git commit -m “信息” 将文件正式提交到本地仓库（.git）</strong></p>\n<p>同样你可以一个个提交文件 </p>\n<p>git commit index.html -m ‘添加index.html’</p>\n<p>或者一次提交所有文件</p>\n<p>git commit . -m “添加了几个文件”</p>\n<p>再运行 git status -sb</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0dc17938fa6c7440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>出现## master 说明你已经将文件上传成功了</p>\n<p>这时你可以用 git log 看历史变动</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-497d1b90a4b1e1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>至此，一次在本地使用 git 的过程就完成了</p>\n<p>如果对已有文件有新的变动，我们只需要依次执行 git add xxx 和 git commit -m ‘xxx’ 两个命令即可</p>\n<hr>\n<h1 id=\"总结一下就是\"><a href=\"#总结一下就是\" class=\"headerlink\" title=\"总结一下就是\"></a>总结一下就是</h1><p><strong>1. git init 初始化本地仓库 .git</strong></p>\n<p><strong>2. git add 文件名或 git add.</strong> </p>\n<p><strong>3. git commit -m “信息” 将文件正式提交到本地仓库（.git）</strong> </p>\n<p><strong>有新的变动， git add xxx 和 git commit -m ‘xxx’</strong> </p>\n<p><strong>过程中用 git status -sb 观察当前文件状态</strong></p>\n<p><strong>最后可用 git log 看历史变动</strong></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p>一些参考：</p>\n<p><a href=\"http://www.runoob.com/git/git-tutorial.html\" target=\"_blank\" rel=\"noopener\">git教程</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">常用 Git 命令清单</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖大大-git</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是git\"><a href=\"#什么是git\" class=\"headerlink\" title=\"什么是git\"></a>什么是git</h1><p>git是世界上最好的分布式版本控制系统</p>\n<p>什么意思？可以看廖雪峰的<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">git教程</a>前面部分了解其概念</p>\n<h1 id=\"如何在本地使用git\"><a href=\"#如何在本地使用git\" class=\"headerlink\" title=\"如何在本地使用git\"></a>如何在本地使用git</h1><p>首先，打开你的命令行，本次我使用的是Windows上的git bash，进入你的桌面 cd Desktop/</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-43b9dc80ef559196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>在桌面创建一个文件夹，如 git-demo-1 </p>\n<p>mkdir git-demo-1</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0dc68b973297288f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>1. git init 初始化本地仓库 .git</strong></p>\n<p>进入这个目录：cd git-demo-1</p>\n<p>然后输入命令：git init</p>\n<p>这句命令会在 git-demo-1 里创建一个 .git 目录</p>\n<p>可以用ls -la 观察这个目录</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-234bac65ee856269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>2. git status -sb 观察当前文件状态</strong></p>\n<p>在 git-demo-1 目录里创建一个文件如index.html</p>\n<p>touch index.html</p>\n<p>运行 git status -sb 可以看到文件前面有 ?? </p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5e3a74ba0f7d5209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>3. git add 文件名或 git add.</strong></p>\n<p> ?? 表示 git 不知道如何对待这个新的文件</p>\n<p>此时要用 git add 将文件添加到「暂存区」</p>\n<p>git add index.html（若文件较多，一个个加麻烦，可直接用git add. 一次性将所有变动加到暂存区）</p>\n<p>然后可以再 git status -sb 观察其状态</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-aae00cd046749ce5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>?? 变成了 A 即告诉 git 这些文件我要加到仓库里</p>\n<p><strong>4. git commit -m “信息” 将文件正式提交到本地仓库（.git）</strong></p>\n<p>同样你可以一个个提交文件 </p>\n<p>git commit index.html -m ‘添加index.html’</p>\n<p>或者一次提交所有文件</p>\n<p>git commit . -m “添加了几个文件”</p>\n<p>再运行 git status -sb</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0dc17938fa6c7440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>出现## master 说明你已经将文件上传成功了</p>\n<p>这时你可以用 git log 看历史变动</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-497d1b90a4b1e1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>至此，一次在本地使用 git 的过程就完成了</p>\n<p>如果对已有文件有新的变动，我们只需要依次执行 git add xxx 和 git commit -m ‘xxx’ 两个命令即可</p>\n<hr>\n<h1 id=\"总结一下就是\"><a href=\"#总结一下就是\" class=\"headerlink\" title=\"总结一下就是\"></a>总结一下就是</h1><p><strong>1. git init 初始化本地仓库 .git</strong></p>\n<p><strong>2. git add 文件名或 git add.</strong> </p>\n<p><strong>3. git commit -m “信息” 将文件正式提交到本地仓库（.git）</strong> </p>\n<p><strong>有新的变动， git add xxx 和 git commit -m ‘xxx’</strong> </p>\n<p><strong>过程中用 git status -sb 观察当前文件状态</strong></p>\n<p><strong>最后可用 git log 看历史变动</strong></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p>一些参考：</p>\n<p><a href=\"http://www.runoob.com/git/git-tutorial.html\" target=\"_blank\" rel=\"noopener\">git教程</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">常用 Git 命令清单</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖大大-git</a></p>\n"},{"title":"OOP 初探（给 MVC 添加类）","date":"2018-09-02T08:49:17.000Z","_content":"# 面向对象程序设计：Object-oriented programming(OOP)\n\n**命名空间：name space**\n什么是命名空间？我们来看看 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4) 的例子\n```\n// 全局命名空间\nvar MYAPP = MYAPP || {};\n```\n---\n**这里补充有关逻辑运算符的知识**\n逻辑运算符：且（&&）、或（||）\n**&& 运算符返回第一个 falsy 值（停止运算），若无 falsy 值，则返回最后一个 truthy 值**\n只有（0；NaN；null；undefined；空字符串(' ')）五个是 falsy 值，除此之外其他都是 truthy 值\n```\nconsole.log(1) && 0 // 1\n```\n注意这里 console.log(1) 是返回值是 undefined （falsy 值），因此直接返回打印结果 1\n而不是返回第二个 falsy 值 0\n```\n0 && console.log(n) // 0\n```\n注意这里不会报错说 Uncaught ReferenceError: n is not defined\n因为 0 已经是 falsy 值所以直接返回，运算停止后面代码不再执行\n\n**|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值**\n---\n\n因此上面代码等价于\n```\n// 首先检查MYAPP是否已经被定义\nvar MYAPP\n// 是的话，那么使用现有的MYAPP全局对象\nif(MYAPP){\n  MYAPP = MYAPP;\n// 创建一个名为MYAPP的空对象用来封装方法，函数，变量和对象\n}else{\n  MYAPP = {};\n}\n```\n然后可以基于 MYAPP 这一 name 的空间来放置所有与 MYAPP 相关的子命名\n```\n// 子命名空间\nMYAPP.event = {};\nMYAPP.commonMethod = {}\n```\n***在JavaScript中，命名空间只是另一个包含 方法，属性，对象 的对象***\n我们常见的文件夹就类似一个命名空间\n\n---\n**构造函数：constructor（类：class）**\nJavaScript 基于原型，没有类的概念；但是我们可以定义一个类\n下面代码就是一个新的类 Person \n```\nfunction Person() { } \n// 或\nvar Person = function(){ }\n```\nJavaScript 中类的本质是函数，只是它有两个特点：\n**1.函数体内部使用了this关键字，代表了所要生成的对象实例。\n2.生成对象的时候，必须使用new命令\n这两个特点就形成了所谓的构造函数**\n*为了与普通函数区别，构造函数名字的第一个字母通常大写，如这里的Person*\n\n**对象（类的实例）**\n```\nfunction Person() { }\nvar person1 = new Person();\nvar person2 = new Person();\n```\n以 Person 为类（模版），person1 和 person2 是 Person 新的实例：person1、person2 可以调用函数 Person\n\n# 为什么会有面向对象编程？\n你写了一个 person1 ，又写了一个 person2 ，然后又写了一个 person3 。。。\n它们有很多重复的代码：这些代码结构一致（如我们之前的 [MVC 设计模式](https://zhuanlan.zhihu.com/p/42366912)），简直浪费内存（内存条那么贵）\n**于是就有了 Person 这个构造函数作为对象的模板：把所有相同结构的代码用一个函数封装起来\n可以让 person1 等只需要用 new 的方法调用这个 Person 传入参数来使用它的模版，person1 自身属性，再单独罗列即可**\n\n**下面以之前有关MVC 的 [博客](https://zhuanlan.zhihu.com/p/42366912) 中的代码为例**\n原来代码\n```\n! function () {\n    // MVC 的 V\n    var view = document.querySelector('section.message')\n    //添加 M\n    var model = {\n        init: function () {\n            var APP_ID = '2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz'\n            var APP_KEY = 'iByF5Dy55tJodAoxC4cxwAwx'\n\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        //获取所有数据\n        fetch: function () {\n            var query = new AV.Query('Message')\n            return query.find() //Promise 对象\n        },\n        //创建数据\n        save: function (name,content) {\n            var Message = AV.Object.extend('Message');\n            var message = new Message();\n            return message.save({ //Promise 对象\n                name: name,\n                content: content\n            })\n        }\n    }\n    // MVC 的 C\n    var controller = {\n        view: null,\n        model: null,\n        messageList: null,\n        init: function (view, model) {\n            this.view = view\n            this.model = model\n            this.messageList = view.querySelector('#messageList')\n            this.form = view.querySelector('form')\n            this.model.init()\n            this.loadMessages()\n            this.bindEvents()\n        },\n        loadMessages: function () {\n            this.model.fetch().then((messages) => {\n                let array = messages.map((item) => item.attributes)\n                array.forEach((item) => {\n                    let li = document.createElement('li')\n                    li.innerText = `${item.name} : ${item.content}`\n                    this.messageList.appendChild(li)\n                })\n            })\n        },\n        bindEvents: function () {\n            this.form.addEventListener('submit', (e) => {\n                e.preventDefault()\n                this.saveMessage()\n            })\n        },\n        saveMessage: function () {\n            let myForm = this.form\n            let content = myForm.querySelector('input[name=content]').value\n            let name = myForm.querySelector('input[name=name]').value\n            this.model.save(name, content).then(function (object) {\n                let li = document.createElement('li')\n                li.innerText = `${object.attributes.name} : ${object.attributes.content}`\n                let messageList = document.querySelector('#messageList')\n                messageList.appendChild(li)\n                myForm.querySelector('input[name=content]').value = ''\n                console.log(object)\n            })\n        }\n    }\n    controller.init(view, model)\n}.call()\n```\n**把 M、V、C 三个模版单独分出**\nM 的模版\n```\n// Model 办事，我放心\n// 通过全局函数 window 引入 Model 便于所有 model 调用\n// 提供三个参数：Options、resourceName 和 object\nwindow.Model = function (Options) {\n    let resourceName = Options.resourceName\n    return {\n        init: function () {\n            var APP_ID = '2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz'\n            var APP_KEY = 'iByF5Dy55tJodAoxC4cxwAwx'\n\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        fetch: function () {\n            var query = new AV.Query(resourceName)\n            return query.find()\n        },\n        //创建数据\n        save: function (object) {\n            var X = AV.Object.extend(resourceName)\n            var x = new X();\n            return x.save(object)\n        }\n    }\n}\n```\nV 就比较简单了，就一句话，但是封装后也可以调用以便减少代码\n```\nwindow.View = function(Selector){\n    return document.querySelector(Selector)\n}\n```\n这里 C 是有一定难点的，需要对 this 的概念有所理解\n```\nwindow.Controller = function (options) {\n    var init = options.init //这个 init 就是 controller 传进来的，记为 initB\n    // 4-21 return 一个 object\n    let object = {\n        view: null,\n        model: null,\n        init: function (view, model) { // 注意这里的 init 是 object 的属性,记为 initA\n            this.view = view\n            this.model = model\n            this.model.init()\n            // 3.initB.call(this)\n            init.call(this, view, model) // 这里的 init 当然是 initB，写成这样 init(view,model) 你就懂了\n            this.bindEvents.call(this)\n        },\n    }\n    // 把除 init 外的所有 options 的参数传给 object\n    // init 是公共参数，而其他实例独有的参数需要传进来\n    for (let key in options) {\n        if (key !== 'init') {\n            object[key] = options[key]\n        }\n    }\n    return object\n}\n```\n实例代码：现在可以直接调用 M、V、C 了，其他实例也是一样的\n```\n! function () {\n\t// MVC 的 V\n\t// 这里 window.View 的 window 可以省略，是默认的\n\tvar view = View('section.message')\n\t//添加 M\n\tvar model = Model({\n\t\tresourceName: 'Message'\n\t})\n\t// MVC 的 C\n\t// 1.controller === object\n\tvar controller = Controller({\n\t\tinit: function () {\n\t\t\tthis.messageList = view.querySelector('#messageList')\n\t\t\tthis.form = view.querySelector('form')\n\t\t\tthis.loadMessages()\n\t\t\t// 这里的 this 是 object，但是 object 没有上面参数\n\t\t\t// 所以才要 for...in...遍历一下，让 object 有这些 controller 独有的参数\n\t\t},\n\t\tloadMessages: function () {\n\t\t\tthis.model.fetch().then((messages) => {\n\t\t\t\tlet array = messages.map((item) => item.attributes)\n\t\t\t\tarray.forEach((item) => {\n\t\t\t\t\tlet li = document.createElement('li')\n\t\t\t\t\tli.innerText = `${item.name} : ${item.content}`\n\t\t\t\t\tthis.messageList.appendChild(li)\n\t\t\t\t})\n\t\t\t})\n\t\t},\n\t\tbindEvents: function () {\n\t\t\tthis.form.addEventListener('submit', (e) => {\n\t\t\t\te.preventDefault()\n\t\t\t\tthis.saveMessage()\n\t\t\t})\n\t\t},\n\t\tsaveMessage: function () {\n\t\t\tlet myForm = this.form\n\t\t\tlet content = myForm.querySelector('input[name=content]').value\n\t\t\tlet name = myForm.querySelector('input[name=name]').value\n\t\t\tthis.model.save({\n\t\t\t\tname: name,\n\t\t\t\tcontent: content\n\t\t\t}).then(function (object) {\n\t\t\t\tlet li = document.createElement('li')\n\t\t\t\tli.innerText = `${object.attributes.name} : ${object.attributes.content}`\n\t\t\t\tlet messageList = document.querySelector('#messageList')\n\t\t\t\tmessageList.appendChild(li)\n\t\t\t\tmyForm.querySelector('input[name=content]').value = ''\n\t\t\t\tconsole.log(object)\n\t\t\t})\n\t\t}\n\t})\n\t// 2.controller.init(view, model)\n\tcontroller.init(view, model)\n}.call()\n```\n# 关于 this\n我们以 C：controller 部分封装的代码的 this 为例：所有内容已经在代码中注明，我们来总结一下\n```\n1.controller === object\n2.controller.init(view, model)\n  写成 call 的形式：controller.init.call(controller, view, model)\n // MDN 里 this 文档告诉我们：this 是 call 的第一个参数\n  显然 controller.init 里面的 this 当然是 controller\n  那它还是 object：即 controller.init 里面的 this 就是 object\n  相当于 object.init 里面的 this 是 object\n3.initB.call(this)\n  initB 里面的 this === call 后面的this\n  call 后面 this === 第二条里的 this\n  第二条里面的 this === object\n  => initB 里面的 this 就是 object\n```\n想了解更多有关 this 知识，移步 [搞懂这些 你就理解 this 了](https://www.jianshu.com/p/bd9d8bd248ab)\n\n---\n本文仅供个人学习使用\n\n**未完待续。。**","source":"_posts/OOP-初探（给-MVC-添加类）.md","raw":"---\ntitle: OOP 初探（给 MVC 添加类）\ndate: 2018-09-02 16:49:17\ntags:\n---\n# 面向对象程序设计：Object-oriented programming(OOP)\n\n**命名空间：name space**\n什么是命名空间？我们来看看 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4) 的例子\n```\n// 全局命名空间\nvar MYAPP = MYAPP || {};\n```\n---\n**这里补充有关逻辑运算符的知识**\n逻辑运算符：且（&&）、或（||）\n**&& 运算符返回第一个 falsy 值（停止运算），若无 falsy 值，则返回最后一个 truthy 值**\n只有（0；NaN；null；undefined；空字符串(' ')）五个是 falsy 值，除此之外其他都是 truthy 值\n```\nconsole.log(1) && 0 // 1\n```\n注意这里 console.log(1) 是返回值是 undefined （falsy 值），因此直接返回打印结果 1\n而不是返回第二个 falsy 值 0\n```\n0 && console.log(n) // 0\n```\n注意这里不会报错说 Uncaught ReferenceError: n is not defined\n因为 0 已经是 falsy 值所以直接返回，运算停止后面代码不再执行\n\n**|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值**\n---\n\n因此上面代码等价于\n```\n// 首先检查MYAPP是否已经被定义\nvar MYAPP\n// 是的话，那么使用现有的MYAPP全局对象\nif(MYAPP){\n  MYAPP = MYAPP;\n// 创建一个名为MYAPP的空对象用来封装方法，函数，变量和对象\n}else{\n  MYAPP = {};\n}\n```\n然后可以基于 MYAPP 这一 name 的空间来放置所有与 MYAPP 相关的子命名\n```\n// 子命名空间\nMYAPP.event = {};\nMYAPP.commonMethod = {}\n```\n***在JavaScript中，命名空间只是另一个包含 方法，属性，对象 的对象***\n我们常见的文件夹就类似一个命名空间\n\n---\n**构造函数：constructor（类：class）**\nJavaScript 基于原型，没有类的概念；但是我们可以定义一个类\n下面代码就是一个新的类 Person \n```\nfunction Person() { } \n// 或\nvar Person = function(){ }\n```\nJavaScript 中类的本质是函数，只是它有两个特点：\n**1.函数体内部使用了this关键字，代表了所要生成的对象实例。\n2.生成对象的时候，必须使用new命令\n这两个特点就形成了所谓的构造函数**\n*为了与普通函数区别，构造函数名字的第一个字母通常大写，如这里的Person*\n\n**对象（类的实例）**\n```\nfunction Person() { }\nvar person1 = new Person();\nvar person2 = new Person();\n```\n以 Person 为类（模版），person1 和 person2 是 Person 新的实例：person1、person2 可以调用函数 Person\n\n# 为什么会有面向对象编程？\n你写了一个 person1 ，又写了一个 person2 ，然后又写了一个 person3 。。。\n它们有很多重复的代码：这些代码结构一致（如我们之前的 [MVC 设计模式](https://zhuanlan.zhihu.com/p/42366912)），简直浪费内存（内存条那么贵）\n**于是就有了 Person 这个构造函数作为对象的模板：把所有相同结构的代码用一个函数封装起来\n可以让 person1 等只需要用 new 的方法调用这个 Person 传入参数来使用它的模版，person1 自身属性，再单独罗列即可**\n\n**下面以之前有关MVC 的 [博客](https://zhuanlan.zhihu.com/p/42366912) 中的代码为例**\n原来代码\n```\n! function () {\n    // MVC 的 V\n    var view = document.querySelector('section.message')\n    //添加 M\n    var model = {\n        init: function () {\n            var APP_ID = '2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz'\n            var APP_KEY = 'iByF5Dy55tJodAoxC4cxwAwx'\n\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        //获取所有数据\n        fetch: function () {\n            var query = new AV.Query('Message')\n            return query.find() //Promise 对象\n        },\n        //创建数据\n        save: function (name,content) {\n            var Message = AV.Object.extend('Message');\n            var message = new Message();\n            return message.save({ //Promise 对象\n                name: name,\n                content: content\n            })\n        }\n    }\n    // MVC 的 C\n    var controller = {\n        view: null,\n        model: null,\n        messageList: null,\n        init: function (view, model) {\n            this.view = view\n            this.model = model\n            this.messageList = view.querySelector('#messageList')\n            this.form = view.querySelector('form')\n            this.model.init()\n            this.loadMessages()\n            this.bindEvents()\n        },\n        loadMessages: function () {\n            this.model.fetch().then((messages) => {\n                let array = messages.map((item) => item.attributes)\n                array.forEach((item) => {\n                    let li = document.createElement('li')\n                    li.innerText = `${item.name} : ${item.content}`\n                    this.messageList.appendChild(li)\n                })\n            })\n        },\n        bindEvents: function () {\n            this.form.addEventListener('submit', (e) => {\n                e.preventDefault()\n                this.saveMessage()\n            })\n        },\n        saveMessage: function () {\n            let myForm = this.form\n            let content = myForm.querySelector('input[name=content]').value\n            let name = myForm.querySelector('input[name=name]').value\n            this.model.save(name, content).then(function (object) {\n                let li = document.createElement('li')\n                li.innerText = `${object.attributes.name} : ${object.attributes.content}`\n                let messageList = document.querySelector('#messageList')\n                messageList.appendChild(li)\n                myForm.querySelector('input[name=content]').value = ''\n                console.log(object)\n            })\n        }\n    }\n    controller.init(view, model)\n}.call()\n```\n**把 M、V、C 三个模版单独分出**\nM 的模版\n```\n// Model 办事，我放心\n// 通过全局函数 window 引入 Model 便于所有 model 调用\n// 提供三个参数：Options、resourceName 和 object\nwindow.Model = function (Options) {\n    let resourceName = Options.resourceName\n    return {\n        init: function () {\n            var APP_ID = '2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz'\n            var APP_KEY = 'iByF5Dy55tJodAoxC4cxwAwx'\n\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        fetch: function () {\n            var query = new AV.Query(resourceName)\n            return query.find()\n        },\n        //创建数据\n        save: function (object) {\n            var X = AV.Object.extend(resourceName)\n            var x = new X();\n            return x.save(object)\n        }\n    }\n}\n```\nV 就比较简单了，就一句话，但是封装后也可以调用以便减少代码\n```\nwindow.View = function(Selector){\n    return document.querySelector(Selector)\n}\n```\n这里 C 是有一定难点的，需要对 this 的概念有所理解\n```\nwindow.Controller = function (options) {\n    var init = options.init //这个 init 就是 controller 传进来的，记为 initB\n    // 4-21 return 一个 object\n    let object = {\n        view: null,\n        model: null,\n        init: function (view, model) { // 注意这里的 init 是 object 的属性,记为 initA\n            this.view = view\n            this.model = model\n            this.model.init()\n            // 3.initB.call(this)\n            init.call(this, view, model) // 这里的 init 当然是 initB，写成这样 init(view,model) 你就懂了\n            this.bindEvents.call(this)\n        },\n    }\n    // 把除 init 外的所有 options 的参数传给 object\n    // init 是公共参数，而其他实例独有的参数需要传进来\n    for (let key in options) {\n        if (key !== 'init') {\n            object[key] = options[key]\n        }\n    }\n    return object\n}\n```\n实例代码：现在可以直接调用 M、V、C 了，其他实例也是一样的\n```\n! function () {\n\t// MVC 的 V\n\t// 这里 window.View 的 window 可以省略，是默认的\n\tvar view = View('section.message')\n\t//添加 M\n\tvar model = Model({\n\t\tresourceName: 'Message'\n\t})\n\t// MVC 的 C\n\t// 1.controller === object\n\tvar controller = Controller({\n\t\tinit: function () {\n\t\t\tthis.messageList = view.querySelector('#messageList')\n\t\t\tthis.form = view.querySelector('form')\n\t\t\tthis.loadMessages()\n\t\t\t// 这里的 this 是 object，但是 object 没有上面参数\n\t\t\t// 所以才要 for...in...遍历一下，让 object 有这些 controller 独有的参数\n\t\t},\n\t\tloadMessages: function () {\n\t\t\tthis.model.fetch().then((messages) => {\n\t\t\t\tlet array = messages.map((item) => item.attributes)\n\t\t\t\tarray.forEach((item) => {\n\t\t\t\t\tlet li = document.createElement('li')\n\t\t\t\t\tli.innerText = `${item.name} : ${item.content}`\n\t\t\t\t\tthis.messageList.appendChild(li)\n\t\t\t\t})\n\t\t\t})\n\t\t},\n\t\tbindEvents: function () {\n\t\t\tthis.form.addEventListener('submit', (e) => {\n\t\t\t\te.preventDefault()\n\t\t\t\tthis.saveMessage()\n\t\t\t})\n\t\t},\n\t\tsaveMessage: function () {\n\t\t\tlet myForm = this.form\n\t\t\tlet content = myForm.querySelector('input[name=content]').value\n\t\t\tlet name = myForm.querySelector('input[name=name]').value\n\t\t\tthis.model.save({\n\t\t\t\tname: name,\n\t\t\t\tcontent: content\n\t\t\t}).then(function (object) {\n\t\t\t\tlet li = document.createElement('li')\n\t\t\t\tli.innerText = `${object.attributes.name} : ${object.attributes.content}`\n\t\t\t\tlet messageList = document.querySelector('#messageList')\n\t\t\t\tmessageList.appendChild(li)\n\t\t\t\tmyForm.querySelector('input[name=content]').value = ''\n\t\t\t\tconsole.log(object)\n\t\t\t})\n\t\t}\n\t})\n\t// 2.controller.init(view, model)\n\tcontroller.init(view, model)\n}.call()\n```\n# 关于 this\n我们以 C：controller 部分封装的代码的 this 为例：所有内容已经在代码中注明，我们来总结一下\n```\n1.controller === object\n2.controller.init(view, model)\n  写成 call 的形式：controller.init.call(controller, view, model)\n // MDN 里 this 文档告诉我们：this 是 call 的第一个参数\n  显然 controller.init 里面的 this 当然是 controller\n  那它还是 object：即 controller.init 里面的 this 就是 object\n  相当于 object.init 里面的 this 是 object\n3.initB.call(this)\n  initB 里面的 this === call 后面的this\n  call 后面 this === 第二条里的 this\n  第二条里面的 this === object\n  => initB 里面的 this 就是 object\n```\n想了解更多有关 this 知识，移步 [搞懂这些 你就理解 this 了](https://www.jianshu.com/p/bd9d8bd248ab)\n\n---\n本文仅供个人学习使用\n\n**未完待续。。**","slug":"OOP-初探（给-MVC-添加类）","published":1,"updated":"2019-01-18T14:54:14.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvf0008hw992y1o044s","content":"<h1 id=\"面向对象程序设计：Object-oriented-programming-OOP\"><a href=\"#面向对象程序设计：Object-oriented-programming-OOP\" class=\"headerlink\" title=\"面向对象程序设计：Object-oriented programming(OOP)\"></a>面向对象程序设计：Object-oriented programming(OOP)</h1><p><strong>命名空间：name space</strong><br>什么是命名空间？我们来看看 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\" target=\"_blank\" rel=\"noopener\">MDN</a> 的例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局命名空间</span><br><span class=\"line\">var MYAPP = MYAPP || &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>这里补充有关逻辑运算符的知识</strong><br>逻辑运算符：且（&amp;&amp;）、或（||）<br><strong>&amp;&amp; 运算符返回第一个 falsy 值（停止运算），若无 falsy 值，则返回最后一个 truthy 值</strong><br>只有（0；NaN；null；undefined；空字符串(‘ ‘)）五个是 falsy 值，除此之外其他都是 truthy 值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(1) &amp;&amp; 0 // 1</span><br></pre></td></tr></table></figure></p>\n<p>注意这里 console.log(1) 是返回值是 undefined （falsy 值），因此直接返回打印结果 1<br>而不是返回第二个 falsy 值 0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 &amp;&amp; console.log(n) // 0</span><br></pre></td></tr></table></figure></p>\n<p>注意这里不会报错说 Uncaught ReferenceError: n is not defined<br>因为 0 已经是 falsy 值所以直接返回，运算停止后面代码不再执行</p>\n<h2 id=\"运算符返回第一个-truthy-值（停止运算），若无-truthy-值，则返回最后一个-falsy-值\"><a href=\"#运算符返回第一个-truthy-值（停止运算），若无-truthy-值，则返回最后一个-falsy-值\" class=\"headerlink\" title=\"|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值\"></a><strong>|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值</strong></h2><p>因此上面代码等价于<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先检查MYAPP是否已经被定义</span><br><span class=\"line\">var MYAPP</span><br><span class=\"line\">// 是的话，那么使用现有的MYAPP全局对象</span><br><span class=\"line\">if(MYAPP)&#123;</span><br><span class=\"line\">  MYAPP = MYAPP;</span><br><span class=\"line\">// 创建一个名为MYAPP的空对象用来封装方法，函数，变量和对象</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">  MYAPP = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后可以基于 MYAPP 这一 name 的空间来放置所有与 MYAPP 相关的子命名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子命名空间</span><br><span class=\"line\">MYAPP.event = &#123;&#125;;</span><br><span class=\"line\">MYAPP.commonMethod = &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>在JavaScript中，命名空间只是另一个包含 方法，属性，对象 的对象</em></strong><br>我们常见的文件夹就类似一个命名空间</p>\n<hr>\n<p><strong>构造函数：constructor（类：class）</strong><br>JavaScript 基于原型，没有类的概念；但是我们可以定义一个类<br>下面代码就是一个新的类 Person<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123; &#125; </span><br><span class=\"line\">// 或</span><br><span class=\"line\">var Person = function()&#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript 中类的本质是函数，只是它有两个特点：<br><strong>1.函数体内部使用了this关键字，代表了所要生成的对象实例。<br>2.生成对象的时候，必须使用new命令<br>这两个特点就形成了所谓的构造函数</strong><br><em>为了与普通函数区别，构造函数名字的第一个字母通常大写，如这里的Person</em></p>\n<p><strong>对象（类的实例）</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123; &#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br></pre></td></tr></table></figure></p>\n<p>以 Person 为类（模版），person1 和 person2 是 Person 新的实例：person1、person2 可以调用函数 Person</p>\n<h1 id=\"为什么会有面向对象编程？\"><a href=\"#为什么会有面向对象编程？\" class=\"headerlink\" title=\"为什么会有面向对象编程？\"></a>为什么会有面向对象编程？</h1><p>你写了一个 person1 ，又写了一个 person2 ，然后又写了一个 person3 。。。<br>它们有很多重复的代码：这些代码结构一致（如我们之前的 <a href=\"https://zhuanlan.zhihu.com/p/42366912\" target=\"_blank\" rel=\"noopener\">MVC 设计模式</a>），简直浪费内存（内存条那么贵）<br><strong>于是就有了 Person 这个构造函数作为对象的模板：把所有相同结构的代码用一个函数封装起来<br>可以让 person1 等只需要用 new 的方法调用这个 Person 传入参数来使用它的模版，person1 自身属性，再单独罗列即可</strong></p>\n<p><strong>下面以之前有关MVC 的 <a href=\"https://zhuanlan.zhihu.com/p/42366912\" target=\"_blank\" rel=\"noopener\">博客</a> 中的代码为例</strong><br>原来代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    // MVC 的 V</span><br><span class=\"line\">    var view = document.querySelector(&apos;section.message&apos;)</span><br><span class=\"line\">    //添加 M</span><br><span class=\"line\">    var model = &#123;</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            var APP_ID = &apos;2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz&apos;</span><br><span class=\"line\">            var APP_KEY = &apos;iByF5Dy55tJodAoxC4cxwAwx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">            AV.init(&#123;</span><br><span class=\"line\">                appId: APP_ID,</span><br><span class=\"line\">                appKey: APP_KEY</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //获取所有数据</span><br><span class=\"line\">        fetch: function () &#123;</span><br><span class=\"line\">            var query = new AV.Query(&apos;Message&apos;)</span><br><span class=\"line\">            return query.find() //Promise 对象</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //创建数据</span><br><span class=\"line\">        save: function (name,content) &#123;</span><br><span class=\"line\">            var Message = AV.Object.extend(&apos;Message&apos;);</span><br><span class=\"line\">            var message = new Message();</span><br><span class=\"line\">            return message.save(&#123; //Promise 对象</span><br><span class=\"line\">                name: name,</span><br><span class=\"line\">                content: content</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // MVC 的 C</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        model: null,</span><br><span class=\"line\">        messageList: null,</span><br><span class=\"line\">        init: function (view, model) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.model = model</span><br><span class=\"line\">            this.messageList = view.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">            this.form = view.querySelector(&apos;form&apos;)</span><br><span class=\"line\">            this.model.init()</span><br><span class=\"line\">            this.loadMessages()</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        loadMessages: function () &#123;</span><br><span class=\"line\">            this.model.fetch().then((messages) =&gt; &#123;</span><br><span class=\"line\">                let array = messages.map((item) =&gt; item.attributes)</span><br><span class=\"line\">                array.forEach((item) =&gt; &#123;</span><br><span class=\"line\">                    let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">                    li.innerText = `$&#123;item.name&#125; : $&#123;item.content&#125;`</span><br><span class=\"line\">                    this.messageList.appendChild(li)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            this.form.addEventListener(&apos;submit&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">                e.preventDefault()</span><br><span class=\"line\">                this.saveMessage()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        saveMessage: function () &#123;</span><br><span class=\"line\">            let myForm = this.form</span><br><span class=\"line\">            let content = myForm.querySelector(&apos;input[name=content]&apos;).value</span><br><span class=\"line\">            let name = myForm.querySelector(&apos;input[name=name]&apos;).value</span><br><span class=\"line\">            this.model.save(name, content).then(function (object) &#123;</span><br><span class=\"line\">                let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">                li.innerText = `$&#123;object.attributes.name&#125; : $&#123;object.attributes.content&#125;`</span><br><span class=\"line\">                let messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">                messageList.appendChild(li)</span><br><span class=\"line\">                myForm.querySelector(&apos;input[name=content]&apos;).value = &apos;&apos;</span><br><span class=\"line\">                console.log(object)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p><strong>把 M、V、C 三个模版单独分出</strong><br>M 的模版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Model 办事，我放心</span><br><span class=\"line\">// 通过全局函数 window 引入 Model 便于所有 model 调用</span><br><span class=\"line\">// 提供三个参数：Options、resourceName 和 object</span><br><span class=\"line\">window.Model = function (Options) &#123;</span><br><span class=\"line\">    let resourceName = Options.resourceName</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            var APP_ID = &apos;2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz&apos;</span><br><span class=\"line\">            var APP_KEY = &apos;iByF5Dy55tJodAoxC4cxwAwx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">            AV.init(&#123;</span><br><span class=\"line\">                appId: APP_ID,</span><br><span class=\"line\">                appKey: APP_KEY</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fetch: function () &#123;</span><br><span class=\"line\">            var query = new AV.Query(resourceName)</span><br><span class=\"line\">            return query.find()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //创建数据</span><br><span class=\"line\">        save: function (object) &#123;</span><br><span class=\"line\">            var X = AV.Object.extend(resourceName)</span><br><span class=\"line\">            var x = new X();</span><br><span class=\"line\">            return x.save(object)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>V 就比较简单了，就一句话，但是封装后也可以调用以便减少代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.View = function(Selector)&#123;</span><br><span class=\"line\">    return document.querySelector(Selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 C 是有一定难点的，需要对 this 的概念有所理解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.Controller = function (options) &#123;</span><br><span class=\"line\">    var init = options.init //这个 init 就是 controller 传进来的，记为 initB</span><br><span class=\"line\">    // 4-21 return 一个 object</span><br><span class=\"line\">    let object = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        model: null,</span><br><span class=\"line\">        init: function (view, model) &#123; // 注意这里的 init 是 object 的属性,记为 initA</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.model = model</span><br><span class=\"line\">            this.model.init()</span><br><span class=\"line\">            // 3.initB.call(this)</span><br><span class=\"line\">            init.call(this, view, model) // 这里的 init 当然是 initB，写成这样 init(view,model) 你就懂了</span><br><span class=\"line\">            this.bindEvents.call(this)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 把除 init 外的所有 options 的参数传给 object</span><br><span class=\"line\">    // init 是公共参数，而其他实例独有的参数需要传进来</span><br><span class=\"line\">    for (let key in options) &#123;</span><br><span class=\"line\">        if (key !== &apos;init&apos;) &#123;</span><br><span class=\"line\">            object[key] = options[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实例代码：现在可以直接调用 M、V、C 了，其他实例也是一样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">\t// MVC 的 V</span><br><span class=\"line\">\t// 这里 window.View 的 window 可以省略，是默认的</span><br><span class=\"line\">\tvar view = View(&apos;section.message&apos;)</span><br><span class=\"line\">\t//添加 M</span><br><span class=\"line\">\tvar model = Model(&#123;</span><br><span class=\"line\">\t\tresourceName: &apos;Message&apos;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t// MVC 的 C</span><br><span class=\"line\">\t// 1.controller === object</span><br><span class=\"line\">\tvar controller = Controller(&#123;</span><br><span class=\"line\">\t\tinit: function () &#123;</span><br><span class=\"line\">\t\t\tthis.messageList = view.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">\t\t\tthis.form = view.querySelector(&apos;form&apos;)</span><br><span class=\"line\">\t\t\tthis.loadMessages()</span><br><span class=\"line\">\t\t\t// 这里的 this 是 object，但是 object 没有上面参数</span><br><span class=\"line\">\t\t\t// 所以才要 for...in...遍历一下，让 object 有这些 controller 独有的参数</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tloadMessages: function () &#123;</span><br><span class=\"line\">\t\t\tthis.model.fetch().then((messages) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\tlet array = messages.map((item) =&gt; item.attributes)</span><br><span class=\"line\">\t\t\t\tarray.forEach((item) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tlet li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">\t\t\t\t\tli.innerText = `$&#123;item.name&#125; : $&#123;item.content&#125;`</span><br><span class=\"line\">\t\t\t\t\tthis.messageList.appendChild(li)</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tbindEvents: function () &#123;</span><br><span class=\"line\">\t\t\tthis.form.addEventListener(&apos;submit&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\te.preventDefault()</span><br><span class=\"line\">\t\t\t\tthis.saveMessage()</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsaveMessage: function () &#123;</span><br><span class=\"line\">\t\t\tlet myForm = this.form</span><br><span class=\"line\">\t\t\tlet content = myForm.querySelector(&apos;input[name=content]&apos;).value</span><br><span class=\"line\">\t\t\tlet name = myForm.querySelector(&apos;input[name=name]&apos;).value</span><br><span class=\"line\">\t\t\tthis.model.save(&#123;</span><br><span class=\"line\">\t\t\t\tname: name,</span><br><span class=\"line\">\t\t\t\tcontent: content</span><br><span class=\"line\">\t\t\t&#125;).then(function (object) &#123;</span><br><span class=\"line\">\t\t\t\tlet li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">\t\t\t\tli.innerText = `$&#123;object.attributes.name&#125; : $&#123;object.attributes.content&#125;`</span><br><span class=\"line\">\t\t\t\tlet messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">\t\t\t\tmessageList.appendChild(li)</span><br><span class=\"line\">\t\t\t\tmyForm.querySelector(&apos;input[name=content]&apos;).value = &apos;&apos;</span><br><span class=\"line\">\t\t\t\tconsole.log(object)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t// 2.controller.init(view, model)</span><br><span class=\"line\">\tcontroller.init(view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"关于-this\"><a href=\"#关于-this\" class=\"headerlink\" title=\"关于 this\"></a>关于 this</h1><p>我们以 C：controller 部分封装的代码的 this 为例：所有内容已经在代码中注明，我们来总结一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.controller === object</span><br><span class=\"line\">2.controller.init(view, model)</span><br><span class=\"line\">  写成 call 的形式：controller.init.call(controller, view, model)</span><br><span class=\"line\"> // MDN 里 this 文档告诉我们：this 是 call 的第一个参数</span><br><span class=\"line\">  显然 controller.init 里面的 this 当然是 controller</span><br><span class=\"line\">  那它还是 object：即 controller.init 里面的 this 就是 object</span><br><span class=\"line\">  相当于 object.init 里面的 this 是 object</span><br><span class=\"line\">3.initB.call(this)</span><br><span class=\"line\">  initB 里面的 this === call 后面的this</span><br><span class=\"line\">  call 后面 this === 第二条里的 this</span><br><span class=\"line\">  第二条里面的 this === object</span><br><span class=\"line\">  =&gt; initB 里面的 this 就是 object</span><br></pre></td></tr></table></figure></p>\n<p>想了解更多有关 this 知识，移步 <a href=\"https://www.jianshu.com/p/bd9d8bd248ab\" target=\"_blank\" rel=\"noopener\">搞懂这些 你就理解 this 了</a></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n<p><strong>未完待续。。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面向对象程序设计：Object-oriented-programming-OOP\"><a href=\"#面向对象程序设计：Object-oriented-programming-OOP\" class=\"headerlink\" title=\"面向对象程序设计：Object-oriented programming(OOP)\"></a>面向对象程序设计：Object-oriented programming(OOP)</h1><p><strong>命名空间：name space</strong><br>什么是命名空间？我们来看看 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\" target=\"_blank\" rel=\"noopener\">MDN</a> 的例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局命名空间</span><br><span class=\"line\">var MYAPP = MYAPP || &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>这里补充有关逻辑运算符的知识</strong><br>逻辑运算符：且（&amp;&amp;）、或（||）<br><strong>&amp;&amp; 运算符返回第一个 falsy 值（停止运算），若无 falsy 值，则返回最后一个 truthy 值</strong><br>只有（0；NaN；null；undefined；空字符串(‘ ‘)）五个是 falsy 值，除此之外其他都是 truthy 值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(1) &amp;&amp; 0 // 1</span><br></pre></td></tr></table></figure></p>\n<p>注意这里 console.log(1) 是返回值是 undefined （falsy 值），因此直接返回打印结果 1<br>而不是返回第二个 falsy 值 0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 &amp;&amp; console.log(n) // 0</span><br></pre></td></tr></table></figure></p>\n<p>注意这里不会报错说 Uncaught ReferenceError: n is not defined<br>因为 0 已经是 falsy 值所以直接返回，运算停止后面代码不再执行</p>\n<h2 id=\"运算符返回第一个-truthy-值（停止运算），若无-truthy-值，则返回最后一个-falsy-值\"><a href=\"#运算符返回第一个-truthy-值（停止运算），若无-truthy-值，则返回最后一个-falsy-值\" class=\"headerlink\" title=\"|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值\"></a><strong>|| 运算符返回第一个 truthy 值（停止运算），若无 truthy 值，则返回最后一个 falsy 值</strong></h2><p>因此上面代码等价于<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先检查MYAPP是否已经被定义</span><br><span class=\"line\">var MYAPP</span><br><span class=\"line\">// 是的话，那么使用现有的MYAPP全局对象</span><br><span class=\"line\">if(MYAPP)&#123;</span><br><span class=\"line\">  MYAPP = MYAPP;</span><br><span class=\"line\">// 创建一个名为MYAPP的空对象用来封装方法，函数，变量和对象</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">  MYAPP = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后可以基于 MYAPP 这一 name 的空间来放置所有与 MYAPP 相关的子命名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子命名空间</span><br><span class=\"line\">MYAPP.event = &#123;&#125;;</span><br><span class=\"line\">MYAPP.commonMethod = &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>在JavaScript中，命名空间只是另一个包含 方法，属性，对象 的对象</em></strong><br>我们常见的文件夹就类似一个命名空间</p>\n<hr>\n<p><strong>构造函数：constructor（类：class）</strong><br>JavaScript 基于原型，没有类的概念；但是我们可以定义一个类<br>下面代码就是一个新的类 Person<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123; &#125; </span><br><span class=\"line\">// 或</span><br><span class=\"line\">var Person = function()&#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript 中类的本质是函数，只是它有两个特点：<br><strong>1.函数体内部使用了this关键字，代表了所要生成的对象实例。<br>2.生成对象的时候，必须使用new命令<br>这两个特点就形成了所谓的构造函数</strong><br><em>为了与普通函数区别，构造函数名字的第一个字母通常大写，如这里的Person</em></p>\n<p><strong>对象（类的实例）</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123; &#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">var person2 = new Person();</span><br></pre></td></tr></table></figure></p>\n<p>以 Person 为类（模版），person1 和 person2 是 Person 新的实例：person1、person2 可以调用函数 Person</p>\n<h1 id=\"为什么会有面向对象编程？\"><a href=\"#为什么会有面向对象编程？\" class=\"headerlink\" title=\"为什么会有面向对象编程？\"></a>为什么会有面向对象编程？</h1><p>你写了一个 person1 ，又写了一个 person2 ，然后又写了一个 person3 。。。<br>它们有很多重复的代码：这些代码结构一致（如我们之前的 <a href=\"https://zhuanlan.zhihu.com/p/42366912\" target=\"_blank\" rel=\"noopener\">MVC 设计模式</a>），简直浪费内存（内存条那么贵）<br><strong>于是就有了 Person 这个构造函数作为对象的模板：把所有相同结构的代码用一个函数封装起来<br>可以让 person1 等只需要用 new 的方法调用这个 Person 传入参数来使用它的模版，person1 自身属性，再单独罗列即可</strong></p>\n<p><strong>下面以之前有关MVC 的 <a href=\"https://zhuanlan.zhihu.com/p/42366912\" target=\"_blank\" rel=\"noopener\">博客</a> 中的代码为例</strong><br>原来代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">    // MVC 的 V</span><br><span class=\"line\">    var view = document.querySelector(&apos;section.message&apos;)</span><br><span class=\"line\">    //添加 M</span><br><span class=\"line\">    var model = &#123;</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            var APP_ID = &apos;2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz&apos;</span><br><span class=\"line\">            var APP_KEY = &apos;iByF5Dy55tJodAoxC4cxwAwx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">            AV.init(&#123;</span><br><span class=\"line\">                appId: APP_ID,</span><br><span class=\"line\">                appKey: APP_KEY</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //获取所有数据</span><br><span class=\"line\">        fetch: function () &#123;</span><br><span class=\"line\">            var query = new AV.Query(&apos;Message&apos;)</span><br><span class=\"line\">            return query.find() //Promise 对象</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //创建数据</span><br><span class=\"line\">        save: function (name,content) &#123;</span><br><span class=\"line\">            var Message = AV.Object.extend(&apos;Message&apos;);</span><br><span class=\"line\">            var message = new Message();</span><br><span class=\"line\">            return message.save(&#123; //Promise 对象</span><br><span class=\"line\">                name: name,</span><br><span class=\"line\">                content: content</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // MVC 的 C</span><br><span class=\"line\">    var controller = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        model: null,</span><br><span class=\"line\">        messageList: null,</span><br><span class=\"line\">        init: function (view, model) &#123;</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.model = model</span><br><span class=\"line\">            this.messageList = view.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">            this.form = view.querySelector(&apos;form&apos;)</span><br><span class=\"line\">            this.model.init()</span><br><span class=\"line\">            this.loadMessages()</span><br><span class=\"line\">            this.bindEvents()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        loadMessages: function () &#123;</span><br><span class=\"line\">            this.model.fetch().then((messages) =&gt; &#123;</span><br><span class=\"line\">                let array = messages.map((item) =&gt; item.attributes)</span><br><span class=\"line\">                array.forEach((item) =&gt; &#123;</span><br><span class=\"line\">                    let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">                    li.innerText = `$&#123;item.name&#125; : $&#123;item.content&#125;`</span><br><span class=\"line\">                    this.messageList.appendChild(li)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        bindEvents: function () &#123;</span><br><span class=\"line\">            this.form.addEventListener(&apos;submit&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">                e.preventDefault()</span><br><span class=\"line\">                this.saveMessage()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        saveMessage: function () &#123;</span><br><span class=\"line\">            let myForm = this.form</span><br><span class=\"line\">            let content = myForm.querySelector(&apos;input[name=content]&apos;).value</span><br><span class=\"line\">            let name = myForm.querySelector(&apos;input[name=name]&apos;).value</span><br><span class=\"line\">            this.model.save(name, content).then(function (object) &#123;</span><br><span class=\"line\">                let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">                li.innerText = `$&#123;object.attributes.name&#125; : $&#123;object.attributes.content&#125;`</span><br><span class=\"line\">                let messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">                messageList.appendChild(li)</span><br><span class=\"line\">                myForm.querySelector(&apos;input[name=content]&apos;).value = &apos;&apos;</span><br><span class=\"line\">                console.log(object)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    controller.init(view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p><strong>把 M、V、C 三个模版单独分出</strong><br>M 的模版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Model 办事，我放心</span><br><span class=\"line\">// 通过全局函数 window 引入 Model 便于所有 model 调用</span><br><span class=\"line\">// 提供三个参数：Options、resourceName 和 object</span><br><span class=\"line\">window.Model = function (Options) &#123;</span><br><span class=\"line\">    let resourceName = Options.resourceName</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        init: function () &#123;</span><br><span class=\"line\">            var APP_ID = &apos;2zeITbbU6cgHT0mdBscQtmp0-gzGzoHsz&apos;</span><br><span class=\"line\">            var APP_KEY = &apos;iByF5Dy55tJodAoxC4cxwAwx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">            AV.init(&#123;</span><br><span class=\"line\">                appId: APP_ID,</span><br><span class=\"line\">                appKey: APP_KEY</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fetch: function () &#123;</span><br><span class=\"line\">            var query = new AV.Query(resourceName)</span><br><span class=\"line\">            return query.find()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //创建数据</span><br><span class=\"line\">        save: function (object) &#123;</span><br><span class=\"line\">            var X = AV.Object.extend(resourceName)</span><br><span class=\"line\">            var x = new X();</span><br><span class=\"line\">            return x.save(object)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>V 就比较简单了，就一句话，但是封装后也可以调用以便减少代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.View = function(Selector)&#123;</span><br><span class=\"line\">    return document.querySelector(Selector)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里 C 是有一定难点的，需要对 this 的概念有所理解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.Controller = function (options) &#123;</span><br><span class=\"line\">    var init = options.init //这个 init 就是 controller 传进来的，记为 initB</span><br><span class=\"line\">    // 4-21 return 一个 object</span><br><span class=\"line\">    let object = &#123;</span><br><span class=\"line\">        view: null,</span><br><span class=\"line\">        model: null,</span><br><span class=\"line\">        init: function (view, model) &#123; // 注意这里的 init 是 object 的属性,记为 initA</span><br><span class=\"line\">            this.view = view</span><br><span class=\"line\">            this.model = model</span><br><span class=\"line\">            this.model.init()</span><br><span class=\"line\">            // 3.initB.call(this)</span><br><span class=\"line\">            init.call(this, view, model) // 这里的 init 当然是 initB，写成这样 init(view,model) 你就懂了</span><br><span class=\"line\">            this.bindEvents.call(this)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 把除 init 外的所有 options 的参数传给 object</span><br><span class=\"line\">    // init 是公共参数，而其他实例独有的参数需要传进来</span><br><span class=\"line\">    for (let key in options) &#123;</span><br><span class=\"line\">        if (key !== &apos;init&apos;) &#123;</span><br><span class=\"line\">            object[key] = options[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实例代码：现在可以直接调用 M、V、C 了，其他实例也是一样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function () &#123;</span><br><span class=\"line\">\t// MVC 的 V</span><br><span class=\"line\">\t// 这里 window.View 的 window 可以省略，是默认的</span><br><span class=\"line\">\tvar view = View(&apos;section.message&apos;)</span><br><span class=\"line\">\t//添加 M</span><br><span class=\"line\">\tvar model = Model(&#123;</span><br><span class=\"line\">\t\tresourceName: &apos;Message&apos;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t// MVC 的 C</span><br><span class=\"line\">\t// 1.controller === object</span><br><span class=\"line\">\tvar controller = Controller(&#123;</span><br><span class=\"line\">\t\tinit: function () &#123;</span><br><span class=\"line\">\t\t\tthis.messageList = view.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">\t\t\tthis.form = view.querySelector(&apos;form&apos;)</span><br><span class=\"line\">\t\t\tthis.loadMessages()</span><br><span class=\"line\">\t\t\t// 这里的 this 是 object，但是 object 没有上面参数</span><br><span class=\"line\">\t\t\t// 所以才要 for...in...遍历一下，让 object 有这些 controller 独有的参数</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tloadMessages: function () &#123;</span><br><span class=\"line\">\t\t\tthis.model.fetch().then((messages) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\tlet array = messages.map((item) =&gt; item.attributes)</span><br><span class=\"line\">\t\t\t\tarray.forEach((item) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tlet li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">\t\t\t\t\tli.innerText = `$&#123;item.name&#125; : $&#123;item.content&#125;`</span><br><span class=\"line\">\t\t\t\t\tthis.messageList.appendChild(li)</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tbindEvents: function () &#123;</span><br><span class=\"line\">\t\t\tthis.form.addEventListener(&apos;submit&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">\t\t\t\te.preventDefault()</span><br><span class=\"line\">\t\t\t\tthis.saveMessage()</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsaveMessage: function () &#123;</span><br><span class=\"line\">\t\t\tlet myForm = this.form</span><br><span class=\"line\">\t\t\tlet content = myForm.querySelector(&apos;input[name=content]&apos;).value</span><br><span class=\"line\">\t\t\tlet name = myForm.querySelector(&apos;input[name=name]&apos;).value</span><br><span class=\"line\">\t\t\tthis.model.save(&#123;</span><br><span class=\"line\">\t\t\t\tname: name,</span><br><span class=\"line\">\t\t\t\tcontent: content</span><br><span class=\"line\">\t\t\t&#125;).then(function (object) &#123;</span><br><span class=\"line\">\t\t\t\tlet li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">\t\t\t\tli.innerText = `$&#123;object.attributes.name&#125; : $&#123;object.attributes.content&#125;`</span><br><span class=\"line\">\t\t\t\tlet messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">\t\t\t\tmessageList.appendChild(li)</span><br><span class=\"line\">\t\t\t\tmyForm.querySelector(&apos;input[name=content]&apos;).value = &apos;&apos;</span><br><span class=\"line\">\t\t\t\tconsole.log(object)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t// 2.controller.init(view, model)</span><br><span class=\"line\">\tcontroller.init(view, model)</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"关于-this\"><a href=\"#关于-this\" class=\"headerlink\" title=\"关于 this\"></a>关于 this</h1><p>我们以 C：controller 部分封装的代码的 this 为例：所有内容已经在代码中注明，我们来总结一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.controller === object</span><br><span class=\"line\">2.controller.init(view, model)</span><br><span class=\"line\">  写成 call 的形式：controller.init.call(controller, view, model)</span><br><span class=\"line\"> // MDN 里 this 文档告诉我们：this 是 call 的第一个参数</span><br><span class=\"line\">  显然 controller.init 里面的 this 当然是 controller</span><br><span class=\"line\">  那它还是 object：即 controller.init 里面的 this 就是 object</span><br><span class=\"line\">  相当于 object.init 里面的 this 是 object</span><br><span class=\"line\">3.initB.call(this)</span><br><span class=\"line\">  initB 里面的 this === call 后面的this</span><br><span class=\"line\">  call 后面 this === 第二条里的 this</span><br><span class=\"line\">  第二条里面的 this === object</span><br><span class=\"line\">  =&gt; initB 里面的 this 就是 object</span><br></pre></td></tr></table></figure></p>\n<p>想了解更多有关 this 知识，移步 <a href=\"https://www.jianshu.com/p/bd9d8bd248ab\" target=\"_blank\" rel=\"noopener\">搞懂这些 你就理解 this 了</a></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n<p><strong>未完待续。。</strong></p>\n"},{"title":"hash 模式和 history 模式小记","date":"2019-01-28T13:55:33.000Z","_content":"在 vue-router 中，默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。\n如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面\n\n## hash 模式和 history 模式主要区别\n1.  使用 hash 模式，当 一个窗口的 hash （URL 中 # 后面的部分）改变时就会触发 hashchange 事件，而不会刷新页面，比如: 在页面内点击带有锚点的 a 标签，不会刷新页面。\n2.  使用 history，URL 没有了 #，一般都需要服务器端配置或支持 SSR，否则刷新页面服务器会返回 404。\n\n## hash 模式以及为什么改变 hash 不刷新页面——[URL的井号‘#’](http://www.ruanyifeng.com/blog/2011/03/url_hash.html)\n## 有关 [history 对象](https://javascript.ruanyifeng.com/bom/history.html#toc1)\n由于 HTML5 只在 IE9 以上支持\n## 控制 vue-router 内的自动降级\n>HTML5 历史模式或 hash 模式，在 IE9 中自动降级\n\n可使用 **fallback** API\n\n![](https://upload-images.jianshu.io/upload_images/7094266-b7d0691f21ffc7cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/hash-模式和-history-模式小记.md","raw":"---\ntitle: hash 模式和 history 模式小记\ndate: 2019-01-28 21:55:33\ntags:\n---\n在 vue-router 中，默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。\n如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面\n\n## hash 模式和 history 模式主要区别\n1.  使用 hash 模式，当 一个窗口的 hash （URL 中 # 后面的部分）改变时就会触发 hashchange 事件，而不会刷新页面，比如: 在页面内点击带有锚点的 a 标签，不会刷新页面。\n2.  使用 history，URL 没有了 #，一般都需要服务器端配置或支持 SSR，否则刷新页面服务器会返回 404。\n\n## hash 模式以及为什么改变 hash 不刷新页面——[URL的井号‘#’](http://www.ruanyifeng.com/blog/2011/03/url_hash.html)\n## 有关 [history 对象](https://javascript.ruanyifeng.com/bom/history.html#toc1)\n由于 HTML5 只在 IE9 以上支持\n## 控制 vue-router 内的自动降级\n>HTML5 历史模式或 hash 模式，在 IE9 中自动降级\n\n可使用 **fallback** API\n\n![](https://upload-images.jianshu.io/upload_images/7094266-b7d0691f21ffc7cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"hash-模式和-history-模式小记","published":1,"updated":"2019-01-28T13:56:59.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvg0009hw992t9btous","content":"<p>在 vue-router 中，默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。<br>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面</p>\n<h2 id=\"hash-模式和-history-模式主要区别\"><a href=\"#hash-模式和-history-模式主要区别\" class=\"headerlink\" title=\"hash 模式和 history 模式主要区别\"></a>hash 模式和 history 模式主要区别</h2><ol>\n<li>使用 hash 模式，当 一个窗口的 hash （URL 中 # 后面的部分）改变时就会触发 hashchange 事件，而不会刷新页面，比如: 在页面内点击带有锚点的 a 标签，不会刷新页面。</li>\n<li>使用 history，URL 没有了 #，一般都需要服务器端配置或支持 SSR，否则刷新页面服务器会返回 404。</li>\n</ol>\n<h2 id=\"hash-模式以及为什么改变-hash-不刷新页面——URL的井号‘-’\"><a href=\"#hash-模式以及为什么改变-hash-不刷新页面——URL的井号‘-’\" class=\"headerlink\" title=\"hash 模式以及为什么改变 hash 不刷新页面——URL的井号‘#’\"></a>hash 模式以及为什么改变 hash 不刷新页面——<a href=\"http://www.ruanyifeng.com/blog/2011/03/url_hash.html\" target=\"_blank\" rel=\"noopener\">URL的井号‘#’</a></h2><h2 id=\"有关-history-对象\"><a href=\"#有关-history-对象\" class=\"headerlink\" title=\"有关 history 对象\"></a>有关 <a href=\"https://javascript.ruanyifeng.com/bom/history.html#toc1\" target=\"_blank\" rel=\"noopener\">history 对象</a></h2><p>由于 HTML5 只在 IE9 以上支持</p>\n<h2 id=\"控制-vue-router-内的自动降级\"><a href=\"#控制-vue-router-内的自动降级\" class=\"headerlink\" title=\"控制 vue-router 内的自动降级\"></a>控制 vue-router 内的自动降级</h2><blockquote>\n<p>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</p>\n</blockquote>\n<p>可使用 <strong>fallback</strong> API</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-b7d0691f21ffc7cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 vue-router 中，默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。<br>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面</p>\n<h2 id=\"hash-模式和-history-模式主要区别\"><a href=\"#hash-模式和-history-模式主要区别\" class=\"headerlink\" title=\"hash 模式和 history 模式主要区别\"></a>hash 模式和 history 模式主要区别</h2><ol>\n<li>使用 hash 模式，当 一个窗口的 hash （URL 中 # 后面的部分）改变时就会触发 hashchange 事件，而不会刷新页面，比如: 在页面内点击带有锚点的 a 标签，不会刷新页面。</li>\n<li>使用 history，URL 没有了 #，一般都需要服务器端配置或支持 SSR，否则刷新页面服务器会返回 404。</li>\n</ol>\n<h2 id=\"hash-模式以及为什么改变-hash-不刷新页面——URL的井号‘-’\"><a href=\"#hash-模式以及为什么改变-hash-不刷新页面——URL的井号‘-’\" class=\"headerlink\" title=\"hash 模式以及为什么改变 hash 不刷新页面——URL的井号‘#’\"></a>hash 模式以及为什么改变 hash 不刷新页面——<a href=\"http://www.ruanyifeng.com/blog/2011/03/url_hash.html\" target=\"_blank\" rel=\"noopener\">URL的井号‘#’</a></h2><h2 id=\"有关-history-对象\"><a href=\"#有关-history-对象\" class=\"headerlink\" title=\"有关 history 对象\"></a>有关 <a href=\"https://javascript.ruanyifeng.com/bom/history.html#toc1\" target=\"_blank\" rel=\"noopener\">history 对象</a></h2><p>由于 HTML5 只在 IE9 以上支持</p>\n<h2 id=\"控制-vue-router-内的自动降级\"><a href=\"#控制-vue-router-内的自动降级\" class=\"headerlink\" title=\"控制 vue-router 内的自动降级\"></a>控制 vue-router 内的自动降级</h2><blockquote>\n<p>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</p>\n</blockquote>\n<p>可使用 <strong>fallback</strong> API</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-b7d0691f21ffc7cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"HTTP 学习之 Cookie","date":"2018-09-16T10:43:31.000Z","_content":"## Cookie：\n今天我们要说的当然不是甜品，而是在 HTTP 协议中使用到的 Cookie 知识\n`HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。`\n\n我们知道，服务器和客户端（浏览器）之间通过 HTTP 发送请求和响应来交流。\n但是 HTTP 是[无状态协议](https://en.wikipedia.org/wiki/Stateless_protocol)：这样做当然能够减少服务器负担，服务器不必记录每一次请求和响应的状态，但这严重阻碍了[交互式Web应用程序](https://zh.wikipedia.org/wiki/%E4%BA%A4%E4%BA%92%E5%BC%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F \"交互式Web应用程序\")的实现。\n\n**所以就有了 Cookie 技术：在请求和响应的报文中写入 Cookie 信息来控制客户端状态。**\n- 服务器通过 Set-Cookie 响应头设置 Cookie\n- 浏览器得到 Cookie 之后，每次请求都要带上 Cookie\n- 服务器发现并读取 Cookie 就知道对应客户端的状态信息\n\nCookie主要用于以下三个方面：\n- 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n- 个性化设置（如用户自定义设置、主题等）\n- 浏览器行为跟踪（如跟踪分析用户行为等）\n\n**通过 HTTP 协议和 Cookie 技术的协同作用，服务器与客户端之间就可以既快速（HTTP 无状态）又可控（Cookie 有状态）得请求和响应并交互了。\n当然，由于 Cookie 的安全性等问题，有了 Session（服务器的一小块内存）本文不涉及**\n\n## 在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 [API 详情](https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value)\n```\nresponse.setHeader('Set-Cookie',`sign_in_email = ${email}`)\n```\n(这是我写的关于登录注册 demo 里登录请求成功的服务端响应 Cookie 内容部分，完整的代码有兴趣可以看我 [github](https://github.com/Adashuai5/node-demo/tree/master/cookie-demo)，有关 node.js 搭建简单的服务器的内容可以看我相关博客)\n\n如图当 1@ada.com 用户发送登录请求成功，服务器返回响应的响应头（Response Headers）内出现 Set - Cookie ![](https://upload-images.jianshu.io/upload_images/7094266-fdff2ea48f36c28e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)其他页面（只要是同源域名）都将带上 Cookie 信息（这里我们并没有设置其他内容）![](https://upload-images.jianshu.io/upload_images/7094266-341585400a01ecf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n设置多个 Cookies\n```\nresponse.setHeader('Set-Cookie', [`sign_in_email = ${email}`, 'language=javascript']);\n```\n在开发者工具里的 Application 界面里有 Cookies 我们可以随意设置其 cookie ![](http://upload-images.jianshu.io/upload_images/7094266-637c2da4867f4daf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## Set-Cookie 字段还可以附加 Cookie 的属性 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie)\n![常用属性](https://upload-images.jianshu.io/upload_images/7094266-479fc61fdf79ed54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**多个属性之间用 ; 连接，下面代码添加了 Secure 和 HttpOnly 属性**\n```\nresponse.setHeader('Set-Cookie',`sign_in_email = ${email};Secure;HttpOnly`)\n```\n**可以通过设置 Set-Cookie 的 Max-Age 属性 和 Expires 属性**\n以 node.js 为例\n```\nresponse.setHeader('Set-Cookie',' Max-Age=1000; Expires=Sun, 16 Sep 2018 10:05:35 GMT')\n```\n上面代码设置了响应头在1000秒后 cookie 失效，同时指定了 Expires 和Max-Age，那么Max-Age的值将优先生效\n\n关闭 session（会话）即可删除内存 Cookie；上述过期时间达到则会删除硬盘 Cookie，因此可以通过设置过期时间删除 Cookie\n我们还可以通过手动清除浏览器 Cookie 及缓存删除 cookie\n\n**相关内容可以参考\n[Cookie 的属性](http://javascript.ruanyifeng.com/bom/cookie.html#toc4)\n[HTTP Cookie](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies)\n[Cookie-wikipedia](https://zh.wikipedia.org/wiki/Cookie)\n同时这也是本文参考内容，另外还参考了 《图解HTTP》相关章节**\n\n---\n本文仅供个人学习使用","source":"_posts/HTTP-学习之-Cookie.md","raw":"---\ntitle: HTTP 学习之 Cookie\ndate: 2018-09-16 18:43:31\ntags:\n---\n## Cookie：\n今天我们要说的当然不是甜品，而是在 HTTP 协议中使用到的 Cookie 知识\n`HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。`\n\n我们知道，服务器和客户端（浏览器）之间通过 HTTP 发送请求和响应来交流。\n但是 HTTP 是[无状态协议](https://en.wikipedia.org/wiki/Stateless_protocol)：这样做当然能够减少服务器负担，服务器不必记录每一次请求和响应的状态，但这严重阻碍了[交互式Web应用程序](https://zh.wikipedia.org/wiki/%E4%BA%A4%E4%BA%92%E5%BC%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F \"交互式Web应用程序\")的实现。\n\n**所以就有了 Cookie 技术：在请求和响应的报文中写入 Cookie 信息来控制客户端状态。**\n- 服务器通过 Set-Cookie 响应头设置 Cookie\n- 浏览器得到 Cookie 之后，每次请求都要带上 Cookie\n- 服务器发现并读取 Cookie 就知道对应客户端的状态信息\n\nCookie主要用于以下三个方面：\n- 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n- 个性化设置（如用户自定义设置、主题等）\n- 浏览器行为跟踪（如跟踪分析用户行为等）\n\n**通过 HTTP 协议和 Cookie 技术的协同作用，服务器与客户端之间就可以既快速（HTTP 无状态）又可控（Cookie 有状态）得请求和响应并交互了。\n当然，由于 Cookie 的安全性等问题，有了 Session（服务器的一小块内存）本文不涉及**\n\n## 在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 [API 详情](https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value)\n```\nresponse.setHeader('Set-Cookie',`sign_in_email = ${email}`)\n```\n(这是我写的关于登录注册 demo 里登录请求成功的服务端响应 Cookie 内容部分，完整的代码有兴趣可以看我 [github](https://github.com/Adashuai5/node-demo/tree/master/cookie-demo)，有关 node.js 搭建简单的服务器的内容可以看我相关博客)\n\n如图当 1@ada.com 用户发送登录请求成功，服务器返回响应的响应头（Response Headers）内出现 Set - Cookie ![](https://upload-images.jianshu.io/upload_images/7094266-fdff2ea48f36c28e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)其他页面（只要是同源域名）都将带上 Cookie 信息（这里我们并没有设置其他内容）![](https://upload-images.jianshu.io/upload_images/7094266-341585400a01ecf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n设置多个 Cookies\n```\nresponse.setHeader('Set-Cookie', [`sign_in_email = ${email}`, 'language=javascript']);\n```\n在开发者工具里的 Application 界面里有 Cookies 我们可以随意设置其 cookie ![](http://upload-images.jianshu.io/upload_images/7094266-637c2da4867f4daf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## Set-Cookie 字段还可以附加 Cookie 的属性 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie)\n![常用属性](https://upload-images.jianshu.io/upload_images/7094266-479fc61fdf79ed54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**多个属性之间用 ; 连接，下面代码添加了 Secure 和 HttpOnly 属性**\n```\nresponse.setHeader('Set-Cookie',`sign_in_email = ${email};Secure;HttpOnly`)\n```\n**可以通过设置 Set-Cookie 的 Max-Age 属性 和 Expires 属性**\n以 node.js 为例\n```\nresponse.setHeader('Set-Cookie',' Max-Age=1000; Expires=Sun, 16 Sep 2018 10:05:35 GMT')\n```\n上面代码设置了响应头在1000秒后 cookie 失效，同时指定了 Expires 和Max-Age，那么Max-Age的值将优先生效\n\n关闭 session（会话）即可删除内存 Cookie；上述过期时间达到则会删除硬盘 Cookie，因此可以通过设置过期时间删除 Cookie\n我们还可以通过手动清除浏览器 Cookie 及缓存删除 cookie\n\n**相关内容可以参考\n[Cookie 的属性](http://javascript.ruanyifeng.com/bom/cookie.html#toc4)\n[HTTP Cookie](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies)\n[Cookie-wikipedia](https://zh.wikipedia.org/wiki/Cookie)\n同时这也是本文参考内容，另外还参考了 《图解HTTP》相关章节**\n\n---\n本文仅供个人学习使用","slug":"HTTP-学习之-Cookie","published":1,"updated":"2019-01-18T14:47:55.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvi000ahw992omv65we","content":"<h2 id=\"Cookie：\"><a href=\"#Cookie：\" class=\"headerlink\" title=\"Cookie：\"></a>Cookie：</h2><p>今天我们要说的当然不是甜品，而是在 HTTP 协议中使用到的 Cookie 知识<br><code>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</code></p>\n<p>我们知道，服务器和客户端（浏览器）之间通过 HTTP 发送请求和响应来交流。<br>但是 HTTP 是<a href=\"https://en.wikipedia.org/wiki/Stateless_protocol\" target=\"_blank\" rel=\"noopener\">无状态协议</a>：这样做当然能够减少服务器负担，服务器不必记录每一次请求和响应的状态，但这严重阻碍了<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%A4%E4%BA%92%E5%BC%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\" title=\"交互式Web应用程序\" target=\"_blank\" rel=\"noopener\">交互式Web应用程序</a>的实现。</p>\n<p><strong>所以就有了 Cookie 技术：在请求和响应的报文中写入 Cookie 信息来控制客户端状态。</strong></p>\n<ul>\n<li>服务器通过 Set-Cookie 响应头设置 Cookie</li>\n<li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li>\n<li>服务器发现并读取 Cookie 就知道对应客户端的状态信息</li>\n</ul>\n<p>Cookie主要用于以下三个方面：</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<p><strong>通过 HTTP 协议和 Cookie 技术的协同作用，服务器与客户端之间就可以既快速（HTTP 无状态）又可控（Cookie 有状态）得请求和响应并交互了。<br>当然，由于 Cookie 的安全性等问题，有了 Session（服务器的一小块内存）本文不涉及</strong></p>\n<h2 id=\"在-node-js-服务端中设置响应头的-Set-Cookie（以用户的-email-为例）代码示例-API-详情\"><a href=\"#在-node-js-服务端中设置响应头的-Set-Cookie（以用户的-email-为例）代码示例-API-详情\" class=\"headerlink\" title=\"在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 API 详情\"></a>在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 <a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value\" target=\"_blank\" rel=\"noopener\">API 详情</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,`sign_in_email = $&#123;email&#125;`)</span><br></pre></td></tr></table></figure>\n<p>(这是我写的关于登录注册 demo 里登录请求成功的服务端响应 Cookie 内容部分，完整的代码有兴趣可以看我 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/cookie-demo\" target=\"_blank\" rel=\"noopener\">github</a>，有关 node.js 搭建简单的服务器的内容可以看我相关博客)</p>\n<p>如图当 <a href=\"mailto:1@ada.com\" target=\"_blank\" rel=\"noopener\">1@ada.com</a> 用户发送登录请求成功，服务器返回响应的响应头（Response Headers）内出现 Set - Cookie <img src=\"https://upload-images.jianshu.io/upload_images/7094266-fdff2ea48f36c28e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">其他页面（只要是同源域名）都将带上 Cookie 信息（这里我们并没有设置其他内容）<img src=\"https://upload-images.jianshu.io/upload_images/7094266-341585400a01ecf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>设置多个 Cookies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;, [`sign_in_email = $&#123;email&#125;`, &apos;language=javascript&apos;]);</span><br></pre></td></tr></table></figure></p>\n<p>在开发者工具里的 Application 界面里有 Cookies 我们可以随意设置其 cookie <img src=\"http://upload-images.jianshu.io/upload_images/7094266-637c2da4867f4daf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"Set-Cookie-字段还可以附加-Cookie-的属性-MDN\"><a href=\"#Set-Cookie-字段还可以附加-Cookie-的属性-MDN\" class=\"headerlink\" title=\"Set-Cookie 字段还可以附加 Cookie 的属性 MDN\"></a>Set-Cookie 字段还可以附加 Cookie 的属性 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie\" target=\"_blank\" rel=\"noopener\">MDN</a></h2><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-479fc61fdf79ed54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"常用属性\"><br><strong>多个属性之间用 ; 连接，下面代码添加了 Secure 和 HttpOnly 属性</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,`sign_in_email = $&#123;email&#125;;Secure;HttpOnly`)</span><br></pre></td></tr></table></figure></p>\n<p><strong>可以通过设置 Set-Cookie 的 Max-Age 属性 和 Expires 属性</strong><br>以 node.js 为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,&apos; Max-Age=1000; Expires=Sun, 16 Sep 2018 10:05:35 GMT&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>上面代码设置了响应头在1000秒后 cookie 失效，同时指定了 Expires 和Max-Age，那么Max-Age的值将优先生效</p>\n<p>关闭 session（会话）即可删除内存 Cookie；上述过期时间达到则会删除硬盘 Cookie，因此可以通过设置过期时间删除 Cookie<br>我们还可以通过手动清除浏览器 Cookie 及缓存删除 cookie</p>\n<p><strong>相关内容可以参考<br><a href=\"http://javascript.ruanyifeng.com/bom/cookie.html#toc4\" target=\"_blank\" rel=\"noopener\">Cookie 的属性</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">HTTP Cookie</a><br><a href=\"https://zh.wikipedia.org/wiki/Cookie\" target=\"_blank\" rel=\"noopener\">Cookie-wikipedia</a><br>同时这也是本文参考内容，另外还参考了 《图解HTTP》相关章节</strong></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Cookie：\"><a href=\"#Cookie：\" class=\"headerlink\" title=\"Cookie：\"></a>Cookie：</h2><p>今天我们要说的当然不是甜品，而是在 HTTP 协议中使用到的 Cookie 知识<br><code>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</code></p>\n<p>我们知道，服务器和客户端（浏览器）之间通过 HTTP 发送请求和响应来交流。<br>但是 HTTP 是<a href=\"https://en.wikipedia.org/wiki/Stateless_protocol\" target=\"_blank\" rel=\"noopener\">无状态协议</a>：这样做当然能够减少服务器负担，服务器不必记录每一次请求和响应的状态，但这严重阻碍了<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%A4%E4%BA%92%E5%BC%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\" title=\"交互式Web应用程序\" target=\"_blank\" rel=\"noopener\">交互式Web应用程序</a>的实现。</p>\n<p><strong>所以就有了 Cookie 技术：在请求和响应的报文中写入 Cookie 信息来控制客户端状态。</strong></p>\n<ul>\n<li>服务器通过 Set-Cookie 响应头设置 Cookie</li>\n<li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li>\n<li>服务器发现并读取 Cookie 就知道对应客户端的状态信息</li>\n</ul>\n<p>Cookie主要用于以下三个方面：</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<p><strong>通过 HTTP 协议和 Cookie 技术的协同作用，服务器与客户端之间就可以既快速（HTTP 无状态）又可控（Cookie 有状态）得请求和响应并交互了。<br>当然，由于 Cookie 的安全性等问题，有了 Session（服务器的一小块内存）本文不涉及</strong></p>\n<h2 id=\"在-node-js-服务端中设置响应头的-Set-Cookie（以用户的-email-为例）代码示例-API-详情\"><a href=\"#在-node-js-服务端中设置响应头的-Set-Cookie（以用户的-email-为例）代码示例-API-详情\" class=\"headerlink\" title=\"在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 API 详情\"></a>在 node.js 服务端中设置响应头的 Set Cookie（以用户的 email 为例）代码示例 <a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value\" target=\"_blank\" rel=\"noopener\">API 详情</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,`sign_in_email = $&#123;email&#125;`)</span><br></pre></td></tr></table></figure>\n<p>(这是我写的关于登录注册 demo 里登录请求成功的服务端响应 Cookie 内容部分，完整的代码有兴趣可以看我 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/cookie-demo\" target=\"_blank\" rel=\"noopener\">github</a>，有关 node.js 搭建简单的服务器的内容可以看我相关博客)</p>\n<p>如图当 <a href=\"mailto:1@ada.com\" target=\"_blank\" rel=\"noopener\">1@ada.com</a> 用户发送登录请求成功，服务器返回响应的响应头（Response Headers）内出现 Set - Cookie <img src=\"https://upload-images.jianshu.io/upload_images/7094266-fdff2ea48f36c28e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">其他页面（只要是同源域名）都将带上 Cookie 信息（这里我们并没有设置其他内容）<img src=\"https://upload-images.jianshu.io/upload_images/7094266-341585400a01ecf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>设置多个 Cookies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;, [`sign_in_email = $&#123;email&#125;`, &apos;language=javascript&apos;]);</span><br></pre></td></tr></table></figure></p>\n<p>在开发者工具里的 Application 界面里有 Cookies 我们可以随意设置其 cookie <img src=\"http://upload-images.jianshu.io/upload_images/7094266-637c2da4867f4daf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"Set-Cookie-字段还可以附加-Cookie-的属性-MDN\"><a href=\"#Set-Cookie-字段还可以附加-Cookie-的属性-MDN\" class=\"headerlink\" title=\"Set-Cookie 字段还可以附加 Cookie 的属性 MDN\"></a>Set-Cookie 字段还可以附加 Cookie 的属性 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie\" target=\"_blank\" rel=\"noopener\">MDN</a></h2><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-479fc61fdf79ed54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"常用属性\"><br><strong>多个属性之间用 ; 连接，下面代码添加了 Secure 和 HttpOnly 属性</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,`sign_in_email = $&#123;email&#125;;Secure;HttpOnly`)</span><br></pre></td></tr></table></figure></p>\n<p><strong>可以通过设置 Set-Cookie 的 Max-Age 属性 和 Expires 属性</strong><br>以 node.js 为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(&apos;Set-Cookie&apos;,&apos; Max-Age=1000; Expires=Sun, 16 Sep 2018 10:05:35 GMT&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>上面代码设置了响应头在1000秒后 cookie 失效，同时指定了 Expires 和Max-Age，那么Max-Age的值将优先生效</p>\n<p>关闭 session（会话）即可删除内存 Cookie；上述过期时间达到则会删除硬盘 Cookie，因此可以通过设置过期时间删除 Cookie<br>我们还可以通过手动清除浏览器 Cookie 及缓存删除 cookie</p>\n<p><strong>相关内容可以参考<br><a href=\"http://javascript.ruanyifeng.com/bom/cookie.html#toc4\" target=\"_blank\" rel=\"noopener\">Cookie 的属性</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">HTTP Cookie</a><br><a href=\"https://zh.wikipedia.org/wiki/Cookie\" target=\"_blank\" rel=\"noopener\">Cookie-wikipedia</a><br>同时这也是本文参考内容，另外还参考了 《图解HTTP》相关章节</strong></p>\n<hr>\n<p>本文仅供个人学习使用</p>\n"},{"title":"windows 7与linux双系统安装（后续）","date":"2018-05-26T16:35:45.000Z","_content":"前两天美滋滋得安装了windows 7下的linux双系统ubuntu，详情见 [链接](https://zhuanlan.zhihu.com/p/37277742) ，以为从此即将开始愉快的学（zhuang）习（bi）之旅了。没想到接下来就是各种强行熟悉其各种命令的噩梦。。。\n\n* * *\n\n首先是各种无法启动\n\n![image](http://upload-images.jianshu.io/upload_images/7094266-acbb7fb00b6400ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n于是我选择各种重装，结果悲剧了。\n\n![](http://upload-images.jianshu.io/upload_images/7094266-cfe90c6da4aba864.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n每次重启都是这个，崩溃\n\n于是跟着大神们开始启动救援模式，具体可自行google“grub rescue”这篇是我写文章时打开的 博客 [链接](http://link.zhihu.com/?target=https%3A//blog.csdn.net/u012234115/article/details/38110613)\n\n当我跟着大神们一步步\n```\nls （hdx，msdosx）/\n\nset root=hdx，msdosx\n\nset prefix=（hdx，msdosx）/grub\n\ninsmod normal\n\nnormal\n```\n终于成功进入grub2界面，即可选择系统（每个人不一样，可以多看看不同博客，有细微差别，我当时尝试了不同格式上述命令，终于属于找到自己电脑的，当你都看完你就都懂了）\n\n此时问题又来了，我进不了ubuntu啊，因为我就是启动不了才发生后续问题的，这个问题至今未解决。。那怎么办，无法更新grub就一直会重启出现grub rescue啊（鬼知道我打了多少遍上面的命令，相信你懂得）我找了各种解决办法，包括什么用尝试启动ubuntu来下载 [引导修复（boot repair）](http://link.zhihu.com/?target=https%3A//blog.csdn.net/u012260238/article/details/52713724) ，但是我ubuntu无法联网啊，U盘也没有（上一篇免U盘装双系统），还有什么live cd，都没有不会啊 （上述情况任何一样有都有相应解决方法，可视情况选择，具体我给的链接应该涵盖了）\n\n在我都打算用grub rescue 作为引导启动项的时候（每次开机打一遍上面的命令），我发现了新的简便方法，只需用到 EasyBCD（装系统时用到）。由于我们可以进入grub2界面进入windows系统，因此操作方便（其实之前一直想尝试用 DiskGenius[参考博客](http://link.zhihu.com/?target=https%3A//blog.csdn.net/pkueecser/article/details/6888392)重建MBR的方法，但是怕windows系统也崩溃。。其实一直最担心的是这个，好多数据的。。结果担心是多余）\n\n了解MBR GRUB 可参考博客 [链接](http://link.zhihu.com/?target=https%3A//blog.csdn.net/jscese/article/details/36865449)\n\n通过EasyBCD 重建MBR 解决grub rescue的问题具体可参考 博客 [链接](http://link.zhihu.com/?target=https%3A//blog.csdn.net/xuehuafeiwu123/article/details/78829717)\n\n当然我的ubuntu还没删，万一哪天高兴打算再研究一下，估计不行的话会删尝试虚拟机的方法，不过可能还是用笔记本破釜沉舟直接安装linux较好，有空在试吧。\n\n本次装双系统花了2个下午加3个晚上，终于成功回到了起点。。。\n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n**参考博客：**\n\n[ubuntu无法启动的解决方法 - CSDN博客](https://blog.csdn.net/xqhrs232/article/details/50967886)\n[双系统Ubuntu 引导修复（Boot Repair） - CSDN博客](https://blog.csdn.net/u012260238/article/details/52713724)\n[Win7与Ubuntu双系统时【卸载Ubuntu】 - CSDN博客](https://blog.csdn.net/pkueecser/article/details/6888392)\n[Win7+Ubuntu双系统，如何卸载Ubuntu系统？ - CSDN博客](https://blog.csdn.net/xuehuafeiwu123/article/details/78829717)\n[删除linux系统分区后进windows出现grub rescue（已解决） - CSDN博客](https://blog.csdn.net/u012234115/article/details/38110613)\n[Ubuntu--grub rescue 主引导修复 - CSDN博客](https://blog.csdn.net/jscese/article/details/36865449)","source":"_posts/windows-7与linux双系统安装（后续）.md","raw":"---\ntitle: windows 7与linux双系统安装（后续）\ndate: 2018-05-27 00:35:45\ntags:\n---\n前两天美滋滋得安装了windows 7下的linux双系统ubuntu，详情见 [链接](https://zhuanlan.zhihu.com/p/37277742) ，以为从此即将开始愉快的学（zhuang）习（bi）之旅了。没想到接下来就是各种强行熟悉其各种命令的噩梦。。。\n\n* * *\n\n首先是各种无法启动\n\n![image](http://upload-images.jianshu.io/upload_images/7094266-acbb7fb00b6400ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n于是我选择各种重装，结果悲剧了。\n\n![](http://upload-images.jianshu.io/upload_images/7094266-cfe90c6da4aba864.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n每次重启都是这个，崩溃\n\n于是跟着大神们开始启动救援模式，具体可自行google“grub rescue”这篇是我写文章时打开的 博客 [链接](http://link.zhihu.com/?target=https%3A//blog.csdn.net/u012234115/article/details/38110613)\n\n当我跟着大神们一步步\n```\nls （hdx，msdosx）/\n\nset root=hdx，msdosx\n\nset prefix=（hdx，msdosx）/grub\n\ninsmod normal\n\nnormal\n```\n终于成功进入grub2界面，即可选择系统（每个人不一样，可以多看看不同博客，有细微差别，我当时尝试了不同格式上述命令，终于属于找到自己电脑的，当你都看完你就都懂了）\n\n此时问题又来了，我进不了ubuntu啊，因为我就是启动不了才发生后续问题的，这个问题至今未解决。。那怎么办，无法更新grub就一直会重启出现grub rescue啊（鬼知道我打了多少遍上面的命令，相信你懂得）我找了各种解决办法，包括什么用尝试启动ubuntu来下载 [引导修复（boot repair）](http://link.zhihu.com/?target=https%3A//blog.csdn.net/u012260238/article/details/52713724) ，但是我ubuntu无法联网啊，U盘也没有（上一篇免U盘装双系统），还有什么live cd，都没有不会啊 （上述情况任何一样有都有相应解决方法，可视情况选择，具体我给的链接应该涵盖了）\n\n在我都打算用grub rescue 作为引导启动项的时候（每次开机打一遍上面的命令），我发现了新的简便方法，只需用到 EasyBCD（装系统时用到）。由于我们可以进入grub2界面进入windows系统，因此操作方便（其实之前一直想尝试用 DiskGenius[参考博客](http://link.zhihu.com/?target=https%3A//blog.csdn.net/pkueecser/article/details/6888392)重建MBR的方法，但是怕windows系统也崩溃。。其实一直最担心的是这个，好多数据的。。结果担心是多余）\n\n了解MBR GRUB 可参考博客 [链接](http://link.zhihu.com/?target=https%3A//blog.csdn.net/jscese/article/details/36865449)\n\n通过EasyBCD 重建MBR 解决grub rescue的问题具体可参考 博客 [链接](http://link.zhihu.com/?target=https%3A//blog.csdn.net/xuehuafeiwu123/article/details/78829717)\n\n当然我的ubuntu还没删，万一哪天高兴打算再研究一下，估计不行的话会删尝试虚拟机的方法，不过可能还是用笔记本破釜沉舟直接安装linux较好，有空在试吧。\n\n本次装双系统花了2个下午加3个晚上，终于成功回到了起点。。。\n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n**参考博客：**\n\n[ubuntu无法启动的解决方法 - CSDN博客](https://blog.csdn.net/xqhrs232/article/details/50967886)\n[双系统Ubuntu 引导修复（Boot Repair） - CSDN博客](https://blog.csdn.net/u012260238/article/details/52713724)\n[Win7与Ubuntu双系统时【卸载Ubuntu】 - CSDN博客](https://blog.csdn.net/pkueecser/article/details/6888392)\n[Win7+Ubuntu双系统，如何卸载Ubuntu系统？ - CSDN博客](https://blog.csdn.net/xuehuafeiwu123/article/details/78829717)\n[删除linux系统分区后进windows出现grub rescue（已解决） - CSDN博客](https://blog.csdn.net/u012234115/article/details/38110613)\n[Ubuntu--grub rescue 主引导修复 - CSDN博客](https://blog.csdn.net/jscese/article/details/36865449)","slug":"windows-7与linux双系统安装（后续）","published":1,"updated":"2019-01-22T14:26:59.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvj000bhw99zr6ybede","content":"<p>前两天美滋滋得安装了windows 7下的linux双系统ubuntu，详情见 <a href=\"https://zhuanlan.zhihu.com/p/37277742\" target=\"_blank\" rel=\"noopener\">链接</a> ，以为从此即将开始愉快的学（zhuang）习（bi）之旅了。没想到接下来就是各种强行熟悉其各种命令的噩梦。。。</p>\n<hr>\n<p>首先是各种无法启动</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7094266-acbb7fb00b6400ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>于是我选择各种重装，结果悲剧了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7094266-cfe90c6da4aba864.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>每次重启都是这个，崩溃</p>\n<p>于是跟着大神们开始启动救援模式，具体可自行google“grub rescue”这篇是我写文章时打开的 博客 <a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/u012234115/article/details/38110613\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>当我跟着大神们一步步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls （hdx，msdosx）/</span><br><span class=\"line\"></span><br><span class=\"line\">set root=hdx，msdosx</span><br><span class=\"line\"></span><br><span class=\"line\">set prefix=（hdx，msdosx）/grub</span><br><span class=\"line\"></span><br><span class=\"line\">insmod normal</span><br><span class=\"line\"></span><br><span class=\"line\">normal</span><br></pre></td></tr></table></figure></p>\n<p>终于成功进入grub2界面，即可选择系统（每个人不一样，可以多看看不同博客，有细微差别，我当时尝试了不同格式上述命令，终于属于找到自己电脑的，当你都看完你就都懂了）</p>\n<p>此时问题又来了，我进不了ubuntu啊，因为我就是启动不了才发生后续问题的，这个问题至今未解决。。那怎么办，无法更新grub就一直会重启出现grub rescue啊（鬼知道我打了多少遍上面的命令，相信你懂得）我找了各种解决办法，包括什么用尝试启动ubuntu来下载 <a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/u012260238/article/details/52713724\" target=\"_blank\" rel=\"noopener\">引导修复（boot repair）</a> ，但是我ubuntu无法联网啊，U盘也没有（上一篇免U盘装双系统），还有什么live cd，都没有不会啊 （上述情况任何一样有都有相应解决方法，可视情况选择，具体我给的链接应该涵盖了）</p>\n<p>在我都打算用grub rescue 作为引导启动项的时候（每次开机打一遍上面的命令），我发现了新的简便方法，只需用到 EasyBCD（装系统时用到）。由于我们可以进入grub2界面进入windows系统，因此操作方便（其实之前一直想尝试用 DiskGenius<a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/pkueecser/article/details/6888392\" target=\"_blank\" rel=\"noopener\">参考博客</a>重建MBR的方法，但是怕windows系统也崩溃。。其实一直最担心的是这个，好多数据的。。结果担心是多余）</p>\n<p>了解MBR GRUB 可参考博客 <a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/jscese/article/details/36865449\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>通过EasyBCD 重建MBR 解决grub rescue的问题具体可参考 博客 <a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/xuehuafeiwu123/article/details/78829717\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>当然我的ubuntu还没删，万一哪天高兴打算再研究一下，估计不行的话会删尝试虚拟机的方法，不过可能还是用笔记本破釜沉舟直接安装linux较好，有空在试吧。</p>\n<p>本次装双系统花了2个下午加3个晚上，终于成功回到了起点。。。</p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p><strong>参考博客：</strong></p>\n<p><a href=\"https://blog.csdn.net/xqhrs232/article/details/50967886\" target=\"_blank\" rel=\"noopener\">ubuntu无法启动的解决方法 - CSDN博客</a><br><a href=\"https://blog.csdn.net/u012260238/article/details/52713724\" target=\"_blank\" rel=\"noopener\">双系统Ubuntu 引导修复（Boot Repair） - CSDN博客</a><br><a href=\"https://blog.csdn.net/pkueecser/article/details/6888392\" target=\"_blank\" rel=\"noopener\">Win7与Ubuntu双系统时【卸载Ubuntu】 - CSDN博客</a><br><a href=\"https://blog.csdn.net/xuehuafeiwu123/article/details/78829717\" target=\"_blank\" rel=\"noopener\">Win7+Ubuntu双系统，如何卸载Ubuntu系统？ - CSDN博客</a><br><a href=\"https://blog.csdn.net/u012234115/article/details/38110613\" target=\"_blank\" rel=\"noopener\">删除linux系统分区后进windows出现grub rescue（已解决） - CSDN博客</a><br><a href=\"https://blog.csdn.net/jscese/article/details/36865449\" target=\"_blank\" rel=\"noopener\">Ubuntu–grub rescue 主引导修复 - CSDN博客</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天美滋滋得安装了windows 7下的linux双系统ubuntu，详情见 <a href=\"https://zhuanlan.zhihu.com/p/37277742\" target=\"_blank\" rel=\"noopener\">链接</a> ，以为从此即将开始愉快的学（zhuang）习（bi）之旅了。没想到接下来就是各种强行熟悉其各种命令的噩梦。。。</p>\n<hr>\n<p>首先是各种无法启动</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7094266-acbb7fb00b6400ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>于是我选择各种重装，结果悲剧了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7094266-cfe90c6da4aba864.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>每次重启都是这个，崩溃</p>\n<p>于是跟着大神们开始启动救援模式，具体可自行google“grub rescue”这篇是我写文章时打开的 博客 <a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/u012234115/article/details/38110613\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>当我跟着大神们一步步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls （hdx，msdosx）/</span><br><span class=\"line\"></span><br><span class=\"line\">set root=hdx，msdosx</span><br><span class=\"line\"></span><br><span class=\"line\">set prefix=（hdx，msdosx）/grub</span><br><span class=\"line\"></span><br><span class=\"line\">insmod normal</span><br><span class=\"line\"></span><br><span class=\"line\">normal</span><br></pre></td></tr></table></figure></p>\n<p>终于成功进入grub2界面，即可选择系统（每个人不一样，可以多看看不同博客，有细微差别，我当时尝试了不同格式上述命令，终于属于找到自己电脑的，当你都看完你就都懂了）</p>\n<p>此时问题又来了，我进不了ubuntu啊，因为我就是启动不了才发生后续问题的，这个问题至今未解决。。那怎么办，无法更新grub就一直会重启出现grub rescue啊（鬼知道我打了多少遍上面的命令，相信你懂得）我找了各种解决办法，包括什么用尝试启动ubuntu来下载 <a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/u012260238/article/details/52713724\" target=\"_blank\" rel=\"noopener\">引导修复（boot repair）</a> ，但是我ubuntu无法联网啊，U盘也没有（上一篇免U盘装双系统），还有什么live cd，都没有不会啊 （上述情况任何一样有都有相应解决方法，可视情况选择，具体我给的链接应该涵盖了）</p>\n<p>在我都打算用grub rescue 作为引导启动项的时候（每次开机打一遍上面的命令），我发现了新的简便方法，只需用到 EasyBCD（装系统时用到）。由于我们可以进入grub2界面进入windows系统，因此操作方便（其实之前一直想尝试用 DiskGenius<a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/pkueecser/article/details/6888392\" target=\"_blank\" rel=\"noopener\">参考博客</a>重建MBR的方法，但是怕windows系统也崩溃。。其实一直最担心的是这个，好多数据的。。结果担心是多余）</p>\n<p>了解MBR GRUB 可参考博客 <a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/jscese/article/details/36865449\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>通过EasyBCD 重建MBR 解决grub rescue的问题具体可参考 博客 <a href=\"http://link.zhihu.com/?target=https%3A//blog.csdn.net/xuehuafeiwu123/article/details/78829717\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>当然我的ubuntu还没删，万一哪天高兴打算再研究一下，估计不行的话会删尝试虚拟机的方法，不过可能还是用笔记本破釜沉舟直接安装linux较好，有空在试吧。</p>\n<p>本次装双系统花了2个下午加3个晚上，终于成功回到了起点。。。</p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p><strong>参考博客：</strong></p>\n<p><a href=\"https://blog.csdn.net/xqhrs232/article/details/50967886\" target=\"_blank\" rel=\"noopener\">ubuntu无法启动的解决方法 - CSDN博客</a><br><a href=\"https://blog.csdn.net/u012260238/article/details/52713724\" target=\"_blank\" rel=\"noopener\">双系统Ubuntu 引导修复（Boot Repair） - CSDN博客</a><br><a href=\"https://blog.csdn.net/pkueecser/article/details/6888392\" target=\"_blank\" rel=\"noopener\">Win7与Ubuntu双系统时【卸载Ubuntu】 - CSDN博客</a><br><a href=\"https://blog.csdn.net/xuehuafeiwu123/article/details/78829717\" target=\"_blank\" rel=\"noopener\">Win7+Ubuntu双系统，如何卸载Ubuntu系统？ - CSDN博客</a><br><a href=\"https://blog.csdn.net/u012234115/article/details/38110613\" target=\"_blank\" rel=\"noopener\">删除linux系统分区后进windows出现grub rescue（已解决） - CSDN博客</a><br><a href=\"https://blog.csdn.net/jscese/article/details/36865449\" target=\"_blank\" rel=\"noopener\">Ubuntu–grub rescue 主引导修复 - CSDN博客</a></p>\n"},{"title":"windows 7与 linux 双系统安装（免U盘）","date":"2018-06-03T14:30:14.000Z","_content":"之前一直看到linux系统的安利，决定在原windows 7系统下装个linux系统来学习。网上找了大量教程，遇到了各种各样的问题，花费了很长时间，终于成功。由于身边没有U盘，选择了免U盘安装的便捷方法。本次选择的linux系统版本为使用量最多的ubuntu。下面分享安装的过程中的问题及解决方法。\n\n**系统环境：**\n\nwindows 7（win10相同）\n\n**准备工具：**\n\n1.EasyBCD，一款用来配置与调整启动配置数据的软件，本次我使用的是2.3版本。\n\n2.Ubuntu 系统，[官网下载](https://link.zhihu.com/?target=https%3A//cn.ubuntu.com/download/)，选择自己喜欢的版本，本次我选用的是Ubuntu 17.04版本。\n\n**windows分区：**\n\n从windows 系统磁盘中分出40-100G空间作为linux系统存储空间\n\n1.桌面右键我的电脑，点击管理->磁盘管理\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-08c675192441c530.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.选择一个可用空间多的盘，右击选 压缩卷。压缩相应大小空间，本次我选用的是80G，即81920（可自行按实际情况选择40-100G）\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-1e878e73901c0b1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.压缩完成后生成的盘为为分配，选择新建简单卷，一直点下一步就可以了。\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-651995342bc7e591.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.若出现无法新建简单卷的情况，如下（未出现即分区成功，可直接看下一过程）\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-45a5f96809ab9018.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n主分区和逻辑分区已满情况：磁盘主分区加上逻辑分区（绿色框区域）超过4个区，就会出现这种情况。（想了解可看[遇到此情况原因](https://link.zhihu.com/?target=https%3A//blog.csdn.net/qiushisoftware/article/details/19337945)）\n\n由于我原本的逻辑分区空间不足，我选择的办法是将某个主分区转换成逻辑分区，这样就相当于将磁盘转化到3.的盘的状态，即主分区和逻辑分区不超过4个。用到的软件是DiskGenius [下载地址](https://link.zhihu.com/?target=http%3A//www.diskgenius.cn/download.php)\n\n选中原来想分区的主分区盘 右击->转化为逻辑分区即可\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-09adb29a2c6cc10d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后重复步骤3就能成功\n\n**Ubuntu：**\n\n将下载好的Ubuntu iOS镜像文件放到电脑某个盘根目录下，本次我选择的是F盘，然后解压到当前目录下（选个文件少的盘，安装完成后这些解压文件和镜像都没用了，文件多的话删除的时候比较蛋疼，好在解压下来的文件一般有相同的修改日期，可作为删除参考依据）。保证解压后的这些文件和Ubuntu iOS镜像文件在同一个盘的根目录下，要不然安装过程中可能出现找不到系统文件的情况。\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-0d9f66878975eea7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-8f38604e93644e1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**EasyBCD：**\n\n打开EasyBCD，选择添加新条目。在下半部分框里点击ISO项，名称随便填，路径选择你的ubuntu ISO镜像所在的地方。模式从磁盘运行。选完后，添加条目\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-fc7fd3391c25169b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后点击编辑引导菜单，就可以看到刚才添加的条目了。选择倒计时，如果Use Metro bootloader没有勾选上，勾选下。完成后保存设置。\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-16069c81c35d9de9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**进入Ubuntu安装：**\n\n主要安装过程我参考了[_牙牙](https://link.zhihu.com/?target=https%3A//www.jianshu.com/u/563525e5cc40)的简书 [地址](https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/417c1001a559) 所给方法进行（由于图片无法截取，只能贴其博客了，大家可以按其博客从“4.关机重启，会出现两个选项，选Ubuntu iOS，单击进入安装引导过程“开始）\n\n当我进行到这一步时候\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-fc2b00988be311dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n出现了“因为不能卸载以下挂载点上分区：/cdrom”的提示框（找不到图了，遇到应该会懂）此时不要点继续（我点了继续然后安装了一晚上没动静），点后退。\n\n解决方法是在此界面时选择试用 Ubuntu\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-7e0728cbb8a2de16.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n进入后按快捷键ctrl+alt+T进入终端\n\n输入sudo umount -l /cdrom 回车即可继续进行安装Ubuntu（‘-l’中‘l’是小写的L）\n\n若还是未安装成功，多尝试几遍，有与上述不一致的问题多google，每个电脑情况不同，但是遇到问题基本上前人都解决过了，一定能有效解决。（ **Ctrl+Alt+Del**可以立即终结电脑的异常状态，因此安装未成功可用此快捷键快速重启）\n\n相信你一定能愉快得开始玩耍linux系统的。\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n**主要参考博客：**\n\n[win10下装ubuntu双系统（免U盘）](https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/417c1001a559)\n\n其他参考链接已在文中注明。\n\n","source":"_posts/windows-7与-linux-双系统安装（免U盘）.md","raw":"---\ntitle: windows 7与 linux 双系统安装（免U盘）\ndate: 2018-06-03 22:30:14\ntags:\n---\n之前一直看到linux系统的安利，决定在原windows 7系统下装个linux系统来学习。网上找了大量教程，遇到了各种各样的问题，花费了很长时间，终于成功。由于身边没有U盘，选择了免U盘安装的便捷方法。本次选择的linux系统版本为使用量最多的ubuntu。下面分享安装的过程中的问题及解决方法。\n\n**系统环境：**\n\nwindows 7（win10相同）\n\n**准备工具：**\n\n1.EasyBCD，一款用来配置与调整启动配置数据的软件，本次我使用的是2.3版本。\n\n2.Ubuntu 系统，[官网下载](https://link.zhihu.com/?target=https%3A//cn.ubuntu.com/download/)，选择自己喜欢的版本，本次我选用的是Ubuntu 17.04版本。\n\n**windows分区：**\n\n从windows 系统磁盘中分出40-100G空间作为linux系统存储空间\n\n1.桌面右键我的电脑，点击管理->磁盘管理\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-08c675192441c530.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.选择一个可用空间多的盘，右击选 压缩卷。压缩相应大小空间，本次我选用的是80G，即81920（可自行按实际情况选择40-100G）\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-1e878e73901c0b1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.压缩完成后生成的盘为为分配，选择新建简单卷，一直点下一步就可以了。\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-651995342bc7e591.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.若出现无法新建简单卷的情况，如下（未出现即分区成功，可直接看下一过程）\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-45a5f96809ab9018.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n主分区和逻辑分区已满情况：磁盘主分区加上逻辑分区（绿色框区域）超过4个区，就会出现这种情况。（想了解可看[遇到此情况原因](https://link.zhihu.com/?target=https%3A//blog.csdn.net/qiushisoftware/article/details/19337945)）\n\n由于我原本的逻辑分区空间不足，我选择的办法是将某个主分区转换成逻辑分区，这样就相当于将磁盘转化到3.的盘的状态，即主分区和逻辑分区不超过4个。用到的软件是DiskGenius [下载地址](https://link.zhihu.com/?target=http%3A//www.diskgenius.cn/download.php)\n\n选中原来想分区的主分区盘 右击->转化为逻辑分区即可\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-09adb29a2c6cc10d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后重复步骤3就能成功\n\n**Ubuntu：**\n\n将下载好的Ubuntu iOS镜像文件放到电脑某个盘根目录下，本次我选择的是F盘，然后解压到当前目录下（选个文件少的盘，安装完成后这些解压文件和镜像都没用了，文件多的话删除的时候比较蛋疼，好在解压下来的文件一般有相同的修改日期，可作为删除参考依据）。保证解压后的这些文件和Ubuntu iOS镜像文件在同一个盘的根目录下，要不然安装过程中可能出现找不到系统文件的情况。\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-0d9f66878975eea7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-8f38604e93644e1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**EasyBCD：**\n\n打开EasyBCD，选择添加新条目。在下半部分框里点击ISO项，名称随便填，路径选择你的ubuntu ISO镜像所在的地方。模式从磁盘运行。选完后，添加条目\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-fc7fd3391c25169b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后点击编辑引导菜单，就可以看到刚才添加的条目了。选择倒计时，如果Use Metro bootloader没有勾选上，勾选下。完成后保存设置。\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-16069c81c35d9de9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**进入Ubuntu安装：**\n\n主要安装过程我参考了[_牙牙](https://link.zhihu.com/?target=https%3A//www.jianshu.com/u/563525e5cc40)的简书 [地址](https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/417c1001a559) 所给方法进行（由于图片无法截取，只能贴其博客了，大家可以按其博客从“4.关机重启，会出现两个选项，选Ubuntu iOS，单击进入安装引导过程“开始）\n\n当我进行到这一步时候\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-fc2b00988be311dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n出现了“因为不能卸载以下挂载点上分区：/cdrom”的提示框（找不到图了，遇到应该会懂）此时不要点继续（我点了继续然后安装了一晚上没动静），点后退。\n\n解决方法是在此界面时选择试用 Ubuntu\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-7e0728cbb8a2de16.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n进入后按快捷键ctrl+alt+T进入终端\n\n输入sudo umount -l /cdrom 回车即可继续进行安装Ubuntu（‘-l’中‘l’是小写的L）\n\n若还是未安装成功，多尝试几遍，有与上述不一致的问题多google，每个电脑情况不同，但是遇到问题基本上前人都解决过了，一定能有效解决。（ **Ctrl+Alt+Del**可以立即终结电脑的异常状态，因此安装未成功可用此快捷键快速重启）\n\n相信你一定能愉快得开始玩耍linux系统的。\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n**主要参考博客：**\n\n[win10下装ubuntu双系统（免U盘）](https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/417c1001a559)\n\n其他参考链接已在文中注明。\n\n","slug":"windows-7与-linux-双系统安装（免U盘）","published":1,"updated":"2019-01-22T14:05:06.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvk000chw9974xc47ze","content":"<p>之前一直看到linux系统的安利，决定在原windows 7系统下装个linux系统来学习。网上找了大量教程，遇到了各种各样的问题，花费了很长时间，终于成功。由于身边没有U盘，选择了免U盘安装的便捷方法。本次选择的linux系统版本为使用量最多的ubuntu。下面分享安装的过程中的问题及解决方法。</p>\n<p><strong>系统环境：</strong></p>\n<p>windows 7（win10相同）</p>\n<p><strong>准备工具：</strong></p>\n<p>1.EasyBCD，一款用来配置与调整启动配置数据的软件，本次我使用的是2.3版本。</p>\n<p>2.Ubuntu 系统，<a href=\"https://link.zhihu.com/?target=https%3A//cn.ubuntu.com/download/\" target=\"_blank\" rel=\"noopener\">官网下载</a>，选择自己喜欢的版本，本次我选用的是Ubuntu 17.04版本。</p>\n<p><strong>windows分区：</strong></p>\n<p>从windows 系统磁盘中分出40-100G空间作为linux系统存储空间</p>\n<p>1.桌面右键我的电脑，点击管理-&gt;磁盘管理</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-08c675192441c530.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>2.选择一个可用空间多的盘，右击选 压缩卷。压缩相应大小空间，本次我选用的是80G，即81920（可自行按实际情况选择40-100G）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-1e878e73901c0b1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>3.压缩完成后生成的盘为为分配，选择新建简单卷，一直点下一步就可以了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-651995342bc7e591.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>4.若出现无法新建简单卷的情况，如下（未出现即分区成功，可直接看下一过程）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-45a5f96809ab9018.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>主分区和逻辑分区已满情况：磁盘主分区加上逻辑分区（绿色框区域）超过4个区，就会出现这种情况。（想了解可看<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/qiushisoftware/article/details/19337945\" target=\"_blank\" rel=\"noopener\">遇到此情况原因</a>）</p>\n<p>由于我原本的逻辑分区空间不足，我选择的办法是将某个主分区转换成逻辑分区，这样就相当于将磁盘转化到3.的盘的状态，即主分区和逻辑分区不超过4个。用到的软件是DiskGenius <a href=\"https://link.zhihu.com/?target=http%3A//www.diskgenius.cn/download.php\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<p>选中原来想分区的主分区盘 右击-&gt;转化为逻辑分区即可</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-09adb29a2c6cc10d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>然后重复步骤3就能成功</p>\n<p><strong>Ubuntu：</strong></p>\n<p>将下载好的Ubuntu iOS镜像文件放到电脑某个盘根目录下，本次我选择的是F盘，然后解压到当前目录下（选个文件少的盘，安装完成后这些解压文件和镜像都没用了，文件多的话删除的时候比较蛋疼，好在解压下来的文件一般有相同的修改日期，可作为删除参考依据）。保证解压后的这些文件和Ubuntu iOS镜像文件在同一个盘的根目录下，要不然安装过程中可能出现找不到系统文件的情况。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0d9f66878975eea7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-8f38604e93644e1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>EasyBCD：</strong></p>\n<p>打开EasyBCD，选择添加新条目。在下半部分框里点击ISO项，名称随便填，路径选择你的ubuntu ISO镜像所在的地方。模式从磁盘运行。选完后，添加条目</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fc7fd3391c25169b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>然后点击编辑引导菜单，就可以看到刚才添加的条目了。选择倒计时，如果Use Metro bootloader没有勾选上，勾选下。完成后保存设置。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-16069c81c35d9de9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>进入Ubuntu安装：</strong></p>\n<p>主要安装过程我参考了<a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/u/563525e5cc40\" target=\"_blank\" rel=\"noopener\">_牙牙</a>的简书 <a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/417c1001a559\" target=\"_blank\" rel=\"noopener\">地址</a> 所给方法进行（由于图片无法截取，只能贴其博客了，大家可以按其博客从“4.关机重启，会出现两个选项，选Ubuntu iOS，单击进入安装引导过程“开始）</p>\n<p>当我进行到这一步时候</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fc2b00988be311dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>出现了“因为不能卸载以下挂载点上分区：/cdrom”的提示框（找不到图了，遇到应该会懂）此时不要点继续（我点了继续然后安装了一晚上没动静），点后退。</p>\n<p>解决方法是在此界面时选择试用 Ubuntu</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-7e0728cbb8a2de16.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>进入后按快捷键ctrl+alt+T进入终端</p>\n<p>输入sudo umount -l /cdrom 回车即可继续进行安装Ubuntu（‘-l’中‘l’是小写的L）</p>\n<p>若还是未安装成功，多尝试几遍，有与上述不一致的问题多google，每个电脑情况不同，但是遇到问题基本上前人都解决过了，一定能有效解决。（ <strong>Ctrl+Alt+Del</strong>可以立即终结电脑的异常状态，因此安装未成功可用此快捷键快速重启）</p>\n<p>相信你一定能愉快得开始玩耍linux系统的。</p>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p><strong>主要参考博客：</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/417c1001a559\" target=\"_blank\" rel=\"noopener\">win10下装ubuntu双系统（免U盘）</a></p>\n<p>其他参考链接已在文中注明。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前一直看到linux系统的安利，决定在原windows 7系统下装个linux系统来学习。网上找了大量教程，遇到了各种各样的问题，花费了很长时间，终于成功。由于身边没有U盘，选择了免U盘安装的便捷方法。本次选择的linux系统版本为使用量最多的ubuntu。下面分享安装的过程中的问题及解决方法。</p>\n<p><strong>系统环境：</strong></p>\n<p>windows 7（win10相同）</p>\n<p><strong>准备工具：</strong></p>\n<p>1.EasyBCD，一款用来配置与调整启动配置数据的软件，本次我使用的是2.3版本。</p>\n<p>2.Ubuntu 系统，<a href=\"https://link.zhihu.com/?target=https%3A//cn.ubuntu.com/download/\" target=\"_blank\" rel=\"noopener\">官网下载</a>，选择自己喜欢的版本，本次我选用的是Ubuntu 17.04版本。</p>\n<p><strong>windows分区：</strong></p>\n<p>从windows 系统磁盘中分出40-100G空间作为linux系统存储空间</p>\n<p>1.桌面右键我的电脑，点击管理-&gt;磁盘管理</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-08c675192441c530.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>2.选择一个可用空间多的盘，右击选 压缩卷。压缩相应大小空间，本次我选用的是80G，即81920（可自行按实际情况选择40-100G）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-1e878e73901c0b1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>3.压缩完成后生成的盘为为分配，选择新建简单卷，一直点下一步就可以了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-651995342bc7e591.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>4.若出现无法新建简单卷的情况，如下（未出现即分区成功，可直接看下一过程）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-45a5f96809ab9018.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>主分区和逻辑分区已满情况：磁盘主分区加上逻辑分区（绿色框区域）超过4个区，就会出现这种情况。（想了解可看<a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/qiushisoftware/article/details/19337945\" target=\"_blank\" rel=\"noopener\">遇到此情况原因</a>）</p>\n<p>由于我原本的逻辑分区空间不足，我选择的办法是将某个主分区转换成逻辑分区，这样就相当于将磁盘转化到3.的盘的状态，即主分区和逻辑分区不超过4个。用到的软件是DiskGenius <a href=\"https://link.zhihu.com/?target=http%3A//www.diskgenius.cn/download.php\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<p>选中原来想分区的主分区盘 右击-&gt;转化为逻辑分区即可</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-09adb29a2c6cc10d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>然后重复步骤3就能成功</p>\n<p><strong>Ubuntu：</strong></p>\n<p>将下载好的Ubuntu iOS镜像文件放到电脑某个盘根目录下，本次我选择的是F盘，然后解压到当前目录下（选个文件少的盘，安装完成后这些解压文件和镜像都没用了，文件多的话删除的时候比较蛋疼，好在解压下来的文件一般有相同的修改日期，可作为删除参考依据）。保证解压后的这些文件和Ubuntu iOS镜像文件在同一个盘的根目录下，要不然安装过程中可能出现找不到系统文件的情况。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0d9f66878975eea7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-8f38604e93644e1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>EasyBCD：</strong></p>\n<p>打开EasyBCD，选择添加新条目。在下半部分框里点击ISO项，名称随便填，路径选择你的ubuntu ISO镜像所在的地方。模式从磁盘运行。选完后，添加条目</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fc7fd3391c25169b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>然后点击编辑引导菜单，就可以看到刚才添加的条目了。选择倒计时，如果Use Metro bootloader没有勾选上，勾选下。完成后保存设置。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-16069c81c35d9de9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>进入Ubuntu安装：</strong></p>\n<p>主要安装过程我参考了<a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/u/563525e5cc40\" target=\"_blank\" rel=\"noopener\">_牙牙</a>的简书 <a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/417c1001a559\" target=\"_blank\" rel=\"noopener\">地址</a> 所给方法进行（由于图片无法截取，只能贴其博客了，大家可以按其博客从“4.关机重启，会出现两个选项，选Ubuntu iOS，单击进入安装引导过程“开始）</p>\n<p>当我进行到这一步时候</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fc2b00988be311dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>出现了“因为不能卸载以下挂载点上分区：/cdrom”的提示框（找不到图了，遇到应该会懂）此时不要点继续（我点了继续然后安装了一晚上没动静），点后退。</p>\n<p>解决方法是在此界面时选择试用 Ubuntu</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-7e0728cbb8a2de16.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>进入后按快捷键ctrl+alt+T进入终端</p>\n<p>输入sudo umount -l /cdrom 回车即可继续进行安装Ubuntu（‘-l’中‘l’是小写的L）</p>\n<p>若还是未安装成功，多尝试几遍，有与上述不一致的问题多google，每个电脑情况不同，但是遇到问题基本上前人都解决过了，一定能有效解决。（ <strong>Ctrl+Alt+Del</strong>可以立即终结电脑的异常状态，因此安装未成功可用此快捷键快速重启）</p>\n<p>相信你一定能愉快得开始玩耍linux系统的。</p>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p><strong>主要参考博客：</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/417c1001a559\" target=\"_blank\" rel=\"noopener\">win10下装ubuntu双系统（免U盘）</a></p>\n<p>其他参考链接已在文中注明。</p>\n"},{"title":"一次性理解立即执行函数和闭包","date":"2018-08-19T16:29:46.000Z","_content":"# Immediately-Invoked Function Expression（IIFE）：立即调用函数表达式\n**使用全局变量可能会造成一些不必要的麻烦\n因此我们要使用局部变量**\n\n在 java 语言中我们可以用 {  } 将代码包裹起来，使它们成为局部变量\n但是这在 ES5 中不行，因为 var 有变量提升\n```\n{\n  var a = 1;\n}\n// 上面代码等同于\nvar a \n{\n  a = 1;\n}\n```\n**ES6 里面引入了 let 的概念，于是有了块级作用域**\n解决了这个问题，IIFE 似乎就变得不那么必要了\n```\n{\n  let a = 1;\n}\na \n// Uncaught ReferenceError: a is not defined\n```\n但是了解 IIFE 可以让我们初学者更好得理解函数表达式、变量提升等的概念，以及了解前端语言的发展进程，知道前人一步步将原本不那么美好的 js 变得规范化的过程，学习他们的智慧。\n\n**ES5 里面，没有块级作用域，只有函数（函数作用域）可提供局部变量环境**\n于是我们声明一个 function xxx，然后 xxx.call()\n```\nfunction xxx(){\n  var a = 1;\n}.call()\n```\n但是这个时候 xxx 也是全局变量（全局函数）\n所以我们不能给这个函数名字，即需要使用**匿名函数**\n```\nfunction(){\n  var a = 1;\n}.call()\n// Uncaught SyntaxError: Unexpected token (\n```\n但是这在 Chrome 里会报错，js 语法错误\n\n**这是由于浏览器认为这是一个函数声明\n解决办法：让浏览器去解析这个函数表达式**\n如给函数取反\n```\n! function(){\n  var a = 1;\n}.call() \n// 我们不在乎这个匿名函数的返回值，所以加个 ! 取反没关系\n```\n类似的还有\n```\n+function(){}()\n-function(){}()\n~function(){}()\nvoid function(){}()\nnew function(){}()\n// function(){}() === function(){}.call()\n//用 .call() 更清楚\n```\n如果实在不想改变函数返回值，也可以用圆括号\n```\n(function(){}).call() \n(function(){}.call())\n```\n但是方法会有不好的情况：如果括号前面有东西\n```\na\n(function(){}).call() \n//等价于\na().call() \n//这不是我们想要的\n//同理\na\n(function(){}.call())\n//等价于\na()\n```\n所以不推荐\n\n你也可以用一个随机变量名函数而不用匿名函数，永远都不会变量污染的那种变量（这种方法好吗？）\n```\nfunction ada231231284u3lkda(){\n  var a = 1;\n}.call()\n```\n\n**当然最推荐的还是用取反 ！，这就好像是个警示：我要开始用 IIFE 了**\n\n---\n**IIFE 达到了局部变量的效果，外面访问不到立即执行函数里面的变量（避免变量污染）**\n\n**但有时候我们需要访问 IIFE 里面的内容，怎么办？**\n最简单的方法是直接用全局变量 window\n```\n! function(){\n  var a = window.a = {\n    n: 1\n  }\n}.call() \n// 另一个立即执行函数通过 window.a 访问\n! function(){\n  var b = window.a\n  console.log(a)\n}.call() // {n: 1}\n```\n**我们还可以在 IIFE 里面使用闭包来隐藏 a**\n```\n! function(){\n  var a = {\n    n: 1\n  }\n  // 声明一个匿名函数保存于 window.nAdd1 \n  window.nAdd1 = function(){\n    a.n += 1\n    // return 新的 a.n\n    return a.n\n  }\n}.call() \n// 匿名函数可以操作函数外面的变量 a ，这就是闭包\n// 另一个立即执行函数通过 window 访问\n! function(){\n  var b = window.nAdd1()\n  console.log(newN)\n}.call() // 2\n```\n**IIFE 使得 a 成为局部变量而无法被外部访问\n闭包使得匿名函数可以操作 a\nwindow.nAdd1 保存了匿名函数的地址\n任何地方都可以使用 window.nAdd1\n=> 任何地方都可以使用 window.nAdd1 操作 a，但是不能直接访问 a\n这就是 window 和闭包联合作用的效果**\n# 闭包\n将上面代码整合在一起，就是闭包的常见形式\n```\nfunction fn(){\n  var a = {\n    n: 1\n  }\n  function fn2(){\n    a.n += 1\n    return a.n\n  }\n  return fn2\n}\nvar fn1 = fn()\nfn1() // 2\n// 上面代码其实就是\n(function(){\n  var a = {\n    n: 1\n  }\n  return function(){\n    a.n += 1\n    return a.n\n  }\n}.call()) // IIFE\n.call()// 2\n```\n**现在我们明白了为什么闭包一般在 IIFE 里出现**\n IIFE 提供局部变量的环境，才有闭包的用武之地\n**return 的作用**\n上面代码中的 return 和 window 的作用一样，是为了让外部能够访问函数作用域内部的函数，当然 return a.n 的作用也是如此\n\n**而闭包的作用，至此应该理解了**\n\n---\n本文仅作为个人学习使用\n\n相关参考：\n[Immediately-Invoked Function Expression (IIFE)](http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife)\n[「每日一题」什么是立即执行函数？有什么作用？](https://zhuanlan.zhihu.com/p/22465092)\n[「每日一题」JS 中的闭包是什么？](https://zhuanlan.zhihu.com/p/22486908)\n[JS标准参考教程——IIFE](https://wangdoc.com/javascript/types/function.html#%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88iife%EF%BC%89)\n[ES6入门——let#块级作用域](http://es6.ruanyifeng.com/#docs/let#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F)","source":"_posts/一次性理解立即执行函数和闭包.md","raw":"---\ntitle: 一次性理解立即执行函数和闭包\ndate: 2018-08-20 00:29:46\ntags:\n---\n# Immediately-Invoked Function Expression（IIFE）：立即调用函数表达式\n**使用全局变量可能会造成一些不必要的麻烦\n因此我们要使用局部变量**\n\n在 java 语言中我们可以用 {  } 将代码包裹起来，使它们成为局部变量\n但是这在 ES5 中不行，因为 var 有变量提升\n```\n{\n  var a = 1;\n}\n// 上面代码等同于\nvar a \n{\n  a = 1;\n}\n```\n**ES6 里面引入了 let 的概念，于是有了块级作用域**\n解决了这个问题，IIFE 似乎就变得不那么必要了\n```\n{\n  let a = 1;\n}\na \n// Uncaught ReferenceError: a is not defined\n```\n但是了解 IIFE 可以让我们初学者更好得理解函数表达式、变量提升等的概念，以及了解前端语言的发展进程，知道前人一步步将原本不那么美好的 js 变得规范化的过程，学习他们的智慧。\n\n**ES5 里面，没有块级作用域，只有函数（函数作用域）可提供局部变量环境**\n于是我们声明一个 function xxx，然后 xxx.call()\n```\nfunction xxx(){\n  var a = 1;\n}.call()\n```\n但是这个时候 xxx 也是全局变量（全局函数）\n所以我们不能给这个函数名字，即需要使用**匿名函数**\n```\nfunction(){\n  var a = 1;\n}.call()\n// Uncaught SyntaxError: Unexpected token (\n```\n但是这在 Chrome 里会报错，js 语法错误\n\n**这是由于浏览器认为这是一个函数声明\n解决办法：让浏览器去解析这个函数表达式**\n如给函数取反\n```\n! function(){\n  var a = 1;\n}.call() \n// 我们不在乎这个匿名函数的返回值，所以加个 ! 取反没关系\n```\n类似的还有\n```\n+function(){}()\n-function(){}()\n~function(){}()\nvoid function(){}()\nnew function(){}()\n// function(){}() === function(){}.call()\n//用 .call() 更清楚\n```\n如果实在不想改变函数返回值，也可以用圆括号\n```\n(function(){}).call() \n(function(){}.call())\n```\n但是方法会有不好的情况：如果括号前面有东西\n```\na\n(function(){}).call() \n//等价于\na().call() \n//这不是我们想要的\n//同理\na\n(function(){}.call())\n//等价于\na()\n```\n所以不推荐\n\n你也可以用一个随机变量名函数而不用匿名函数，永远都不会变量污染的那种变量（这种方法好吗？）\n```\nfunction ada231231284u3lkda(){\n  var a = 1;\n}.call()\n```\n\n**当然最推荐的还是用取反 ！，这就好像是个警示：我要开始用 IIFE 了**\n\n---\n**IIFE 达到了局部变量的效果，外面访问不到立即执行函数里面的变量（避免变量污染）**\n\n**但有时候我们需要访问 IIFE 里面的内容，怎么办？**\n最简单的方法是直接用全局变量 window\n```\n! function(){\n  var a = window.a = {\n    n: 1\n  }\n}.call() \n// 另一个立即执行函数通过 window.a 访问\n! function(){\n  var b = window.a\n  console.log(a)\n}.call() // {n: 1}\n```\n**我们还可以在 IIFE 里面使用闭包来隐藏 a**\n```\n! function(){\n  var a = {\n    n: 1\n  }\n  // 声明一个匿名函数保存于 window.nAdd1 \n  window.nAdd1 = function(){\n    a.n += 1\n    // return 新的 a.n\n    return a.n\n  }\n}.call() \n// 匿名函数可以操作函数外面的变量 a ，这就是闭包\n// 另一个立即执行函数通过 window 访问\n! function(){\n  var b = window.nAdd1()\n  console.log(newN)\n}.call() // 2\n```\n**IIFE 使得 a 成为局部变量而无法被外部访问\n闭包使得匿名函数可以操作 a\nwindow.nAdd1 保存了匿名函数的地址\n任何地方都可以使用 window.nAdd1\n=> 任何地方都可以使用 window.nAdd1 操作 a，但是不能直接访问 a\n这就是 window 和闭包联合作用的效果**\n# 闭包\n将上面代码整合在一起，就是闭包的常见形式\n```\nfunction fn(){\n  var a = {\n    n: 1\n  }\n  function fn2(){\n    a.n += 1\n    return a.n\n  }\n  return fn2\n}\nvar fn1 = fn()\nfn1() // 2\n// 上面代码其实就是\n(function(){\n  var a = {\n    n: 1\n  }\n  return function(){\n    a.n += 1\n    return a.n\n  }\n}.call()) // IIFE\n.call()// 2\n```\n**现在我们明白了为什么闭包一般在 IIFE 里出现**\n IIFE 提供局部变量的环境，才有闭包的用武之地\n**return 的作用**\n上面代码中的 return 和 window 的作用一样，是为了让外部能够访问函数作用域内部的函数，当然 return a.n 的作用也是如此\n\n**而闭包的作用，至此应该理解了**\n\n---\n本文仅作为个人学习使用\n\n相关参考：\n[Immediately-Invoked Function Expression (IIFE)](http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife)\n[「每日一题」什么是立即执行函数？有什么作用？](https://zhuanlan.zhihu.com/p/22465092)\n[「每日一题」JS 中的闭包是什么？](https://zhuanlan.zhihu.com/p/22486908)\n[JS标准参考教程——IIFE](https://wangdoc.com/javascript/types/function.html#%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88iife%EF%BC%89)\n[ES6入门——let#块级作用域](http://es6.ruanyifeng.com/#docs/let#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F)","slug":"一次性理解立即执行函数和闭包","published":1,"updated":"2019-01-22T13:34:13.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvl000dhw99qgbqw0zf","content":"<h1 id=\"Immediately-Invoked-Function-Expression（IIFE）：立即调用函数表达式\"><a href=\"#Immediately-Invoked-Function-Expression（IIFE）：立即调用函数表达式\" class=\"headerlink\" title=\"Immediately-Invoked Function Expression（IIFE）：立即调用函数表达式\"></a>Immediately-Invoked Function Expression（IIFE）：立即调用函数表达式</h1><p><strong>使用全局变量可能会造成一些不必要的麻烦<br>因此我们要使用局部变量</strong></p>\n<p>在 java 语言中我们可以用 {  } 将代码包裹起来，使它们成为局部变量<br>但是这在 ES5 中不行，因为 var 有变量提升<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 上面代码等同于</span><br><span class=\"line\">var a </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  a = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>ES6 里面引入了 let 的概念，于是有了块级作用域</strong><br>解决了这个问题，IIFE 似乎就变得不那么必要了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  let a = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a </span><br><span class=\"line\">// Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p>但是了解 IIFE 可以让我们初学者更好得理解函数表达式、变量提升等的概念，以及了解前端语言的发展进程，知道前人一步步将原本不那么美好的 js 变得规范化的过程，学习他们的智慧。</p>\n<p><strong>ES5 里面，没有块级作用域，只有函数（函数作用域）可提供局部变量环境</strong><br>于是我们声明一个 function xxx，然后 xxx.call()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function xxx()&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>但是这个时候 xxx 也是全局变量（全局函数）<br>所以我们不能给这个函数名字，即需要使用<strong>匿名函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function()&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;.call()</span><br><span class=\"line\">// Uncaught SyntaxError: Unexpected token (</span><br></pre></td></tr></table></figure></p>\n<p>但是这在 Chrome 里会报错，js 语法错误</p>\n<p><strong>这是由于浏览器认为这是一个函数声明<br>解决办法：让浏览器去解析这个函数表达式</strong><br>如给函数取反<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;.call() </span><br><span class=\"line\">// 我们不在乎这个匿名函数的返回值，所以加个 ! 取反没关系</span><br></pre></td></tr></table></figure></p>\n<p>类似的还有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+function()&#123;&#125;()</span><br><span class=\"line\">-function()&#123;&#125;()</span><br><span class=\"line\">~function()&#123;&#125;()</span><br><span class=\"line\">void function()&#123;&#125;()</span><br><span class=\"line\">new function()&#123;&#125;()</span><br><span class=\"line\">// function()&#123;&#125;() === function()&#123;&#125;.call()</span><br><span class=\"line\">//用 .call() 更清楚</span><br></pre></td></tr></table></figure></p>\n<p>如果实在不想改变函数返回值，也可以用圆括号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;&#125;).call() </span><br><span class=\"line\">(function()&#123;&#125;.call())</span><br></pre></td></tr></table></figure></p>\n<p>但是方法会有不好的情况：如果括号前面有东西<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">(function()&#123;&#125;).call() </span><br><span class=\"line\">//等价于</span><br><span class=\"line\">a().call() </span><br><span class=\"line\">//这不是我们想要的</span><br><span class=\"line\">//同理</span><br><span class=\"line\">a</span><br><span class=\"line\">(function()&#123;&#125;.call())</span><br><span class=\"line\">//等价于</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure></p>\n<p>所以不推荐</p>\n<p>你也可以用一个随机变量名函数而不用匿名函数，永远都不会变量污染的那种变量（这种方法好吗？）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ada231231284u3lkda()&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p><strong>当然最推荐的还是用取反 ！，这就好像是个警示：我要开始用 IIFE 了</strong></p>\n<hr>\n<p><strong>IIFE 达到了局部变量的效果，外面访问不到立即执行函数里面的变量（避免变量污染）</strong></p>\n<p><strong>但有时候我们需要访问 IIFE 里面的内容，怎么办？</strong><br>最简单的方法是直接用全局变量 window<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var a = window.a = &#123;</span><br><span class=\"line\">    n: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;.call() </span><br><span class=\"line\">// 另一个立即执行函数通过 window.a 访问</span><br><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var b = window.a</span><br><span class=\"line\">  console.log(a)</span><br><span class=\"line\">&#125;.call() // &#123;n: 1&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>我们还可以在 IIFE 里面使用闭包来隐藏 a</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var a = &#123;</span><br><span class=\"line\">    n: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 声明一个匿名函数保存于 window.nAdd1 </span><br><span class=\"line\">  window.nAdd1 = function()&#123;</span><br><span class=\"line\">    a.n += 1</span><br><span class=\"line\">    // return 新的 a.n</span><br><span class=\"line\">    return a.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;.call() </span><br><span class=\"line\">// 匿名函数可以操作函数外面的变量 a ，这就是闭包</span><br><span class=\"line\">// 另一个立即执行函数通过 window 访问</span><br><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var b = window.nAdd1()</span><br><span class=\"line\">  console.log(newN)</span><br><span class=\"line\">&#125;.call() // 2</span><br></pre></td></tr></table></figure></p>\n<p><strong>IIFE 使得 a 成为局部变量而无法被外部访问<br>闭包使得匿名函数可以操作 a<br>window.nAdd1 保存了匿名函数的地址<br>任何地方都可以使用 window.nAdd1<br>=&gt; 任何地方都可以使用 window.nAdd1 操作 a，但是不能直接访问 a<br>这就是 window 和闭包联合作用的效果</strong></p>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><p>将上面代码整合在一起，就是闭包的常见形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">  var a = &#123;</span><br><span class=\"line\">    n: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function fn2()&#123;</span><br><span class=\"line\">    a.n += 1</span><br><span class=\"line\">    return a.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return fn2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var fn1 = fn()</span><br><span class=\"line\">fn1() // 2</span><br><span class=\"line\">// 上面代码其实就是</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">  var a = &#123;</span><br><span class=\"line\">    n: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return function()&#123;</span><br><span class=\"line\">    a.n += 1</span><br><span class=\"line\">    return a.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;.call()) // IIFE</span><br><span class=\"line\">.call()// 2</span><br></pre></td></tr></table></figure></p>\n<p><strong>现在我们明白了为什么闭包一般在 IIFE 里出现</strong><br> IIFE 提供局部变量的环境，才有闭包的用武之地<br><strong>return 的作用</strong><br>上面代码中的 return 和 window 的作用一样，是为了让外部能够访问函数作用域内部的函数，当然 return a.n 的作用也是如此</p>\n<p><strong>而闭包的作用，至此应该理解了</strong></p>\n<hr>\n<p>本文仅作为个人学习使用</p>\n<p>相关参考：<br><a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife\" target=\"_blank\" rel=\"noopener\">Immediately-Invoked Function Expression (IIFE)</a><br><a href=\"https://zhuanlan.zhihu.com/p/22465092\" target=\"_blank\" rel=\"noopener\">「每日一题」什么是立即执行函数？有什么作用？</a><br><a href=\"https://zhuanlan.zhihu.com/p/22486908\" target=\"_blank\" rel=\"noopener\">「每日一题」JS 中的闭包是什么？</a><br><a href=\"https://wangdoc.com/javascript/types/function.html#%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88iife%EF%BC%89\" target=\"_blank\" rel=\"noopener\">JS标准参考教程——IIFE</a><br><a href=\"http://es6.ruanyifeng.com/#docs/let#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F\" target=\"_blank\" rel=\"noopener\">ES6入门——let#块级作用域</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Immediately-Invoked-Function-Expression（IIFE）：立即调用函数表达式\"><a href=\"#Immediately-Invoked-Function-Expression（IIFE）：立即调用函数表达式\" class=\"headerlink\" title=\"Immediately-Invoked Function Expression（IIFE）：立即调用函数表达式\"></a>Immediately-Invoked Function Expression（IIFE）：立即调用函数表达式</h1><p><strong>使用全局变量可能会造成一些不必要的麻烦<br>因此我们要使用局部变量</strong></p>\n<p>在 java 语言中我们可以用 {  } 将代码包裹起来，使它们成为局部变量<br>但是这在 ES5 中不行，因为 var 有变量提升<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 上面代码等同于</span><br><span class=\"line\">var a </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  a = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>ES6 里面引入了 let 的概念，于是有了块级作用域</strong><br>解决了这个问题，IIFE 似乎就变得不那么必要了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  let a = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a </span><br><span class=\"line\">// Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p>但是了解 IIFE 可以让我们初学者更好得理解函数表达式、变量提升等的概念，以及了解前端语言的发展进程，知道前人一步步将原本不那么美好的 js 变得规范化的过程，学习他们的智慧。</p>\n<p><strong>ES5 里面，没有块级作用域，只有函数（函数作用域）可提供局部变量环境</strong><br>于是我们声明一个 function xxx，然后 xxx.call()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function xxx()&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>但是这个时候 xxx 也是全局变量（全局函数）<br>所以我们不能给这个函数名字，即需要使用<strong>匿名函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function()&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;.call()</span><br><span class=\"line\">// Uncaught SyntaxError: Unexpected token (</span><br></pre></td></tr></table></figure></p>\n<p>但是这在 Chrome 里会报错，js 语法错误</p>\n<p><strong>这是由于浏览器认为这是一个函数声明<br>解决办法：让浏览器去解析这个函数表达式</strong><br>如给函数取反<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;.call() </span><br><span class=\"line\">// 我们不在乎这个匿名函数的返回值，所以加个 ! 取反没关系</span><br></pre></td></tr></table></figure></p>\n<p>类似的还有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+function()&#123;&#125;()</span><br><span class=\"line\">-function()&#123;&#125;()</span><br><span class=\"line\">~function()&#123;&#125;()</span><br><span class=\"line\">void function()&#123;&#125;()</span><br><span class=\"line\">new function()&#123;&#125;()</span><br><span class=\"line\">// function()&#123;&#125;() === function()&#123;&#125;.call()</span><br><span class=\"line\">//用 .call() 更清楚</span><br></pre></td></tr></table></figure></p>\n<p>如果实在不想改变函数返回值，也可以用圆括号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;&#125;).call() </span><br><span class=\"line\">(function()&#123;&#125;.call())</span><br></pre></td></tr></table></figure></p>\n<p>但是方法会有不好的情况：如果括号前面有东西<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">(function()&#123;&#125;).call() </span><br><span class=\"line\">//等价于</span><br><span class=\"line\">a().call() </span><br><span class=\"line\">//这不是我们想要的</span><br><span class=\"line\">//同理</span><br><span class=\"line\">a</span><br><span class=\"line\">(function()&#123;&#125;.call())</span><br><span class=\"line\">//等价于</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure></p>\n<p>所以不推荐</p>\n<p>你也可以用一个随机变量名函数而不用匿名函数，永远都不会变量污染的那种变量（这种方法好吗？）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ada231231284u3lkda()&#123;</span><br><span class=\"line\">  var a = 1;</span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p><strong>当然最推荐的还是用取反 ！，这就好像是个警示：我要开始用 IIFE 了</strong></p>\n<hr>\n<p><strong>IIFE 达到了局部变量的效果，外面访问不到立即执行函数里面的变量（避免变量污染）</strong></p>\n<p><strong>但有时候我们需要访问 IIFE 里面的内容，怎么办？</strong><br>最简单的方法是直接用全局变量 window<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var a = window.a = &#123;</span><br><span class=\"line\">    n: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;.call() </span><br><span class=\"line\">// 另一个立即执行函数通过 window.a 访问</span><br><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var b = window.a</span><br><span class=\"line\">  console.log(a)</span><br><span class=\"line\">&#125;.call() // &#123;n: 1&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>我们还可以在 IIFE 里面使用闭包来隐藏 a</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var a = &#123;</span><br><span class=\"line\">    n: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 声明一个匿名函数保存于 window.nAdd1 </span><br><span class=\"line\">  window.nAdd1 = function()&#123;</span><br><span class=\"line\">    a.n += 1</span><br><span class=\"line\">    // return 新的 a.n</span><br><span class=\"line\">    return a.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;.call() </span><br><span class=\"line\">// 匿名函数可以操作函数外面的变量 a ，这就是闭包</span><br><span class=\"line\">// 另一个立即执行函数通过 window 访问</span><br><span class=\"line\">! function()&#123;</span><br><span class=\"line\">  var b = window.nAdd1()</span><br><span class=\"line\">  console.log(newN)</span><br><span class=\"line\">&#125;.call() // 2</span><br></pre></td></tr></table></figure></p>\n<p><strong>IIFE 使得 a 成为局部变量而无法被外部访问<br>闭包使得匿名函数可以操作 a<br>window.nAdd1 保存了匿名函数的地址<br>任何地方都可以使用 window.nAdd1<br>=&gt; 任何地方都可以使用 window.nAdd1 操作 a，但是不能直接访问 a<br>这就是 window 和闭包联合作用的效果</strong></p>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><p>将上面代码整合在一起，就是闭包的常见形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">  var a = &#123;</span><br><span class=\"line\">    n: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function fn2()&#123;</span><br><span class=\"line\">    a.n += 1</span><br><span class=\"line\">    return a.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return fn2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var fn1 = fn()</span><br><span class=\"line\">fn1() // 2</span><br><span class=\"line\">// 上面代码其实就是</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">  var a = &#123;</span><br><span class=\"line\">    n: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return function()&#123;</span><br><span class=\"line\">    a.n += 1</span><br><span class=\"line\">    return a.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;.call()) // IIFE</span><br><span class=\"line\">.call()// 2</span><br></pre></td></tr></table></figure></p>\n<p><strong>现在我们明白了为什么闭包一般在 IIFE 里出现</strong><br> IIFE 提供局部变量的环境，才有闭包的用武之地<br><strong>return 的作用</strong><br>上面代码中的 return 和 window 的作用一样，是为了让外部能够访问函数作用域内部的函数，当然 return a.n 的作用也是如此</p>\n<p><strong>而闭包的作用，至此应该理解了</strong></p>\n<hr>\n<p>本文仅作为个人学习使用</p>\n<p>相关参考：<br><a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife\" target=\"_blank\" rel=\"noopener\">Immediately-Invoked Function Expression (IIFE)</a><br><a href=\"https://zhuanlan.zhihu.com/p/22465092\" target=\"_blank\" rel=\"noopener\">「每日一题」什么是立即执行函数？有什么作用？</a><br><a href=\"https://zhuanlan.zhihu.com/p/22486908\" target=\"_blank\" rel=\"noopener\">「每日一题」JS 中的闭包是什么？</a><br><a href=\"https://wangdoc.com/javascript/types/function.html#%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88iife%EF%BC%89\" target=\"_blank\" rel=\"noopener\">JS标准参考教程——IIFE</a><br><a href=\"http://es6.ruanyifeng.com/#docs/let#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F\" target=\"_blank\" rel=\"noopener\">ES6入门——let#块级作用域</a></p>\n"},{"title":"从「从输入URL到页面加载」谈及Web性能优化","date":"2018-12-29T06:09:32.000Z","_content":"# 如何理解 Web 性能优化\n事实上就是用户觉得页面加载很快，用户从输入URL（网址）到页面在浏览器上加载出来的时间很短；与之相对的有如服务器性能优化（如网页占的 CPU 少），一定要区分开来。\n对于用户众多的网站，节约下的加载时间或能带来可观的收入，这便是前端 Web 性能优化的意义。\n# 从输入 URL 到页面加载发生了什么\n一道所有前端耳熟能详的经典面试题，也确实是需要前端去深入研究的东西。下面我会简单介绍其过程，并罗列相关的 Web 优化方案。\n## 0. 缓存\n当我们在浏览器上输入网址，浏览器首先会查看是否有缓存，如果之前已经访问过该网站，则会有缓存，那浏览器就不必再向服务器发请求了，用户则能够很快得看到内容。Web 性能优化有极大一部分都是优化缓存，缓存事实上又分为数据库缓存、代理服务器缓存、还有我们熟悉的 CDN 缓存，以及浏览器缓存等，部分内容后文介绍。\n## 1. DNS 查询\nDNS 查询就像电话簿，你在浏览器地址栏输入网址，通过 DNS 查询得到域名的真实 IP。\n\n![](https://upload-images.jianshu.io/upload_images/7094266-d21c9b5e4b39ad6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nDNS查询完成之前，浏览器无法从服务器下载任何数据。\n\n### 优化方案：减少 DNS 查询\n#### 1.1 DNS 缓存\nISP、局域网、操作系统、浏览器等都会有相应的DNS缓存机制。\n#### 1.2 减少页面的唯一域名\n因为每次 DNS 查询就是查找唯一域名的过程，那么域名越少，DNS 查询就越少，应该尽量将资源放在同一域名。当然这样做又有其他问题，下文详解。\n## 2. TCP 连接\n经典的三次握手和四次挥手，不展开赘述。\n简单讲讲优化方案：TCP 连接复用（TCP Connection Reuse），在 HTTP 请求头中的 Connection 上加 keep-alive；HTTP/2.0 多路复用等。\n## 3. HTTP 请求及响应\n直接讲优化策略\n#### 3.1 避免不必要的重定向\n>最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加/但未添加。比如，访问http://astrology.yahoo.com/astrology将被301重定向到 http://astrology.yahoo.com/astrology/（注意末尾的 /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。\n#### 3.2 Cookie\n##### 3.2.1减少 Cookie 大小\n每次请求都会带上对应的 Cookie，减少 Cookie 大小可以降低其对响应速度的影响：\n- 去除不必要的 Cookie；\n- 尽量压缩 Cookie 大小；\n- 注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；\n- 设置合适的过期时间。\n\n##### 3.2.2 静态资源使用无 Cookie 域名\n静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。\n#### 3.3 添加 Expires 或 Cache-Control 响应头\nHTTP/1.1 增加的 Cache-Control，它比 Expires 等好在其设定时间是相对的，避免了用户本地设置时间落后所造成的无法良好缓存的问题等。\n- 静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；\n- 动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。\n\n#### 3.4 配置 Etag\n通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。\n#### 3.5 使用 Gzip\n使用 Gzip 就是将 HTML、CSS、JS、XML、JSON 等资源进行 Gzip 高效压缩，减少资源体积那么下载就会更快。\nGzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，比 Deflate 更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持 Gzip 解码。\n从HTTP/1.1开始，客户端就有了支持压缩的 Accept-Encoding HTTP 请求头。\n```\nAccept-Encoding: gzip, deflate\n```\n服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过 Content-Encoding 响应头来通知客户端。\n```\nContent-Encoding: gzip\n```\n需要注意的是，已经压缩过的内容如图片和PDF不要使用 Gzip，另外还有文件内容本身就很小，这些资源再使用 Gzip 反而会增加资源下载时间，浪费 CPU 资源，而且还可能增加文件体积。\n### 值得一提\nHTTP 请求的另一个优化方案是增加同时请求的数量，浏览器会同时发送多个请求，但是同一域名最多同时发送 4~8 个（不同浏览器不同）请求，那么当资源过多时，可以采用增加域名的方法增加并发量。当然这一方法又与上述 DNS 查询的优化方案矛盾，真正使用的时候就需要权衡。\n另外，既然一次只能发的请求有限，就应该将重要的需要优先展示的资源先请求：\n#### 3.6 延迟加载（懒加载）\n页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：\n- 非首屏使用的数据、样式、脚本、图片等；\n- 用户交互时才会显示的内容。\n\n遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。\n>将首屏以外的HTML放在不渲染的元素中，如隐藏的&lt;textarea&gt;，或者type属性为非执行脚本的 &lt;script&gt; 标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。\n#### 3.7 预加载\n预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。\n## 4. 浏览器解析渲染页面\n响应完成后，浏览器下载完资源，就开始解析资源生成页面了。对于前端来说，这部分内容是完全需要我们去掌控的，我们也来简单介绍一下对应的优化内容，部分内容如懒加载等上面已经提及就不再重复。\n#### 4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;\n>这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“[怪异模式(兼容模式)](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode)”的渲染模式。“`&lt;!DOCTYPE html&gt;`\" 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。\n\n不写或写错文档类型声明，会浪费浏览器渲染页面的时间或引起错误排版。\n#### 4.2 CSS 放在 &lt;head&gt; 中\n把样式表放在 &lt;head&gt; 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。\n这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。\n如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。\n#### 4.2 把脚本放在页面底部\n浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源，并且，没有 js 并不邮箱呈现在用户目前的内容的观感。因此，最好将脚本放在底部，以提高页面加载速度。\n一些特殊场景无法将脚本放到页面底部的，可以考虑&lt;script&gt;的以下属性：\n- defer 属性；\n- HTML5 新增的async属性。\n\n#### 4.3 使用外部 JavaScript 和 CSS\n外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。\n当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。\n#### 4.4 合并和压缩 JS/CSS 等文件\n通过该方法减少页面所需资源，减少请求数量，加快响应时间。现在 webpack 打包工具都已经默认实现了。\n#### 4.5 减少 DOM 操作和使用高效的事件处理\n- 缓存已经访问过的元素；\n- 使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；\n- 操作 className，而不是多次读写 style；\n- 避免使用 JavaScript 修复布局；\n- 减少绑定事件监听的节点，如通过事件委托（当然现在浏览器功能强大，影响不大）；\n- 尽早处理事件，在 DOMContentLoaded 即可进行，不用等到 load 以后。\n\n#### 4.6 图片优化\n如何将图片变得又小又好看是一个工程师实力的体现，这里不过多赘述，大家可以查看我后文提供的资源。\n#### 4.7 使用 CND\n>内容分发网络（Content delivery network 或 Content distribution network）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n\n动态 CDN，使用离你最近的服务器；CDN 没有 Cookie，使用 CDN 可以减少 Cookie；CND 会自动合并脚本文件等，减少请求数量；当然，使用 CND 同时也增加了一个域名，增大了同时请求数量。\n# 总结\n![](https://upload-images.jianshu.io/upload_images/7094266-2696c8f1d212f5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n该文大量参考了雅虎 35 军规，增加了一些自己的理解并舍弃了一些已经过时的内容。细节内容比较少，主要是笼统地将 Web 性能优化的思路做了梳理，很多内容都值得我们去深入研究。当然其中部分内容顺序还是不佳，因为很多内容事实上是贯穿在整个过程当中的，正如 Web 性能优化是个整体，需要权衡所有冲突。希望本文可以给你一些在面试官问道你时的思路。\n深入阅读 [从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！](https://zhuanlan.zhihu.com/p/34453198)\n\n本文参考：\n[前端性能优化之雅虎35条军规](https://juejin.im/post/5b73ef38f265da281e048e51)\n[前端经典面试题: 从输入URL到页面加载发生了什么？](https://segmentfault.com/a/1190000006879700)\nMDN\n维基百科\n","source":"_posts/从「从输入URL到页面加载」谈及Web性能优化.md","raw":"---\ntitle: 从「从输入URL到页面加载」谈及Web性能优化\ndate: 2018-12-29 14:09:32\ntags:\n---\n# 如何理解 Web 性能优化\n事实上就是用户觉得页面加载很快，用户从输入URL（网址）到页面在浏览器上加载出来的时间很短；与之相对的有如服务器性能优化（如网页占的 CPU 少），一定要区分开来。\n对于用户众多的网站，节约下的加载时间或能带来可观的收入，这便是前端 Web 性能优化的意义。\n# 从输入 URL 到页面加载发生了什么\n一道所有前端耳熟能详的经典面试题，也确实是需要前端去深入研究的东西。下面我会简单介绍其过程，并罗列相关的 Web 优化方案。\n## 0. 缓存\n当我们在浏览器上输入网址，浏览器首先会查看是否有缓存，如果之前已经访问过该网站，则会有缓存，那浏览器就不必再向服务器发请求了，用户则能够很快得看到内容。Web 性能优化有极大一部分都是优化缓存，缓存事实上又分为数据库缓存、代理服务器缓存、还有我们熟悉的 CDN 缓存，以及浏览器缓存等，部分内容后文介绍。\n## 1. DNS 查询\nDNS 查询就像电话簿，你在浏览器地址栏输入网址，通过 DNS 查询得到域名的真实 IP。\n\n![](https://upload-images.jianshu.io/upload_images/7094266-d21c9b5e4b39ad6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nDNS查询完成之前，浏览器无法从服务器下载任何数据。\n\n### 优化方案：减少 DNS 查询\n#### 1.1 DNS 缓存\nISP、局域网、操作系统、浏览器等都会有相应的DNS缓存机制。\n#### 1.2 减少页面的唯一域名\n因为每次 DNS 查询就是查找唯一域名的过程，那么域名越少，DNS 查询就越少，应该尽量将资源放在同一域名。当然这样做又有其他问题，下文详解。\n## 2. TCP 连接\n经典的三次握手和四次挥手，不展开赘述。\n简单讲讲优化方案：TCP 连接复用（TCP Connection Reuse），在 HTTP 请求头中的 Connection 上加 keep-alive；HTTP/2.0 多路复用等。\n## 3. HTTP 请求及响应\n直接讲优化策略\n#### 3.1 避免不必要的重定向\n>最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加/但未添加。比如，访问http://astrology.yahoo.com/astrology将被301重定向到 http://astrology.yahoo.com/astrology/（注意末尾的 /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。\n#### 3.2 Cookie\n##### 3.2.1减少 Cookie 大小\n每次请求都会带上对应的 Cookie，减少 Cookie 大小可以降低其对响应速度的影响：\n- 去除不必要的 Cookie；\n- 尽量压缩 Cookie 大小；\n- 注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；\n- 设置合适的过期时间。\n\n##### 3.2.2 静态资源使用无 Cookie 域名\n静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。\n#### 3.3 添加 Expires 或 Cache-Control 响应头\nHTTP/1.1 增加的 Cache-Control，它比 Expires 等好在其设定时间是相对的，避免了用户本地设置时间落后所造成的无法良好缓存的问题等。\n- 静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；\n- 动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。\n\n#### 3.4 配置 Etag\n通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。\n#### 3.5 使用 Gzip\n使用 Gzip 就是将 HTML、CSS、JS、XML、JSON 等资源进行 Gzip 高效压缩，减少资源体积那么下载就会更快。\nGzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，比 Deflate 更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持 Gzip 解码。\n从HTTP/1.1开始，客户端就有了支持压缩的 Accept-Encoding HTTP 请求头。\n```\nAccept-Encoding: gzip, deflate\n```\n服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过 Content-Encoding 响应头来通知客户端。\n```\nContent-Encoding: gzip\n```\n需要注意的是，已经压缩过的内容如图片和PDF不要使用 Gzip，另外还有文件内容本身就很小，这些资源再使用 Gzip 反而会增加资源下载时间，浪费 CPU 资源，而且还可能增加文件体积。\n### 值得一提\nHTTP 请求的另一个优化方案是增加同时请求的数量，浏览器会同时发送多个请求，但是同一域名最多同时发送 4~8 个（不同浏览器不同）请求，那么当资源过多时，可以采用增加域名的方法增加并发量。当然这一方法又与上述 DNS 查询的优化方案矛盾，真正使用的时候就需要权衡。\n另外，既然一次只能发的请求有限，就应该将重要的需要优先展示的资源先请求：\n#### 3.6 延迟加载（懒加载）\n页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：\n- 非首屏使用的数据、样式、脚本、图片等；\n- 用户交互时才会显示的内容。\n\n遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。\n>将首屏以外的HTML放在不渲染的元素中，如隐藏的&lt;textarea&gt;，或者type属性为非执行脚本的 &lt;script&gt; 标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。\n#### 3.7 预加载\n预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。\n## 4. 浏览器解析渲染页面\n响应完成后，浏览器下载完资源，就开始解析资源生成页面了。对于前端来说，这部分内容是完全需要我们去掌控的，我们也来简单介绍一下对应的优化内容，部分内容如懒加载等上面已经提及就不再重复。\n#### 4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;\n>这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“[怪异模式(兼容模式)](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode)”的渲染模式。“`&lt;!DOCTYPE html&gt;`\" 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。\n\n不写或写错文档类型声明，会浪费浏览器渲染页面的时间或引起错误排版。\n#### 4.2 CSS 放在 &lt;head&gt; 中\n把样式表放在 &lt;head&gt; 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。\n这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。\n如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。\n#### 4.2 把脚本放在页面底部\n浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源，并且，没有 js 并不邮箱呈现在用户目前的内容的观感。因此，最好将脚本放在底部，以提高页面加载速度。\n一些特殊场景无法将脚本放到页面底部的，可以考虑&lt;script&gt;的以下属性：\n- defer 属性；\n- HTML5 新增的async属性。\n\n#### 4.3 使用外部 JavaScript 和 CSS\n外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。\n当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。\n#### 4.4 合并和压缩 JS/CSS 等文件\n通过该方法减少页面所需资源，减少请求数量，加快响应时间。现在 webpack 打包工具都已经默认实现了。\n#### 4.5 减少 DOM 操作和使用高效的事件处理\n- 缓存已经访问过的元素；\n- 使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；\n- 操作 className，而不是多次读写 style；\n- 避免使用 JavaScript 修复布局；\n- 减少绑定事件监听的节点，如通过事件委托（当然现在浏览器功能强大，影响不大）；\n- 尽早处理事件，在 DOMContentLoaded 即可进行，不用等到 load 以后。\n\n#### 4.6 图片优化\n如何将图片变得又小又好看是一个工程师实力的体现，这里不过多赘述，大家可以查看我后文提供的资源。\n#### 4.7 使用 CND\n>内容分发网络（Content delivery network 或 Content distribution network）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n\n动态 CDN，使用离你最近的服务器；CDN 没有 Cookie，使用 CDN 可以减少 Cookie；CND 会自动合并脚本文件等，减少请求数量；当然，使用 CND 同时也增加了一个域名，增大了同时请求数量。\n# 总结\n![](https://upload-images.jianshu.io/upload_images/7094266-2696c8f1d212f5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n该文大量参考了雅虎 35 军规，增加了一些自己的理解并舍弃了一些已经过时的内容。细节内容比较少，主要是笼统地将 Web 性能优化的思路做了梳理，很多内容都值得我们去深入研究。当然其中部分内容顺序还是不佳，因为很多内容事实上是贯穿在整个过程当中的，正如 Web 性能优化是个整体，需要权衡所有冲突。希望本文可以给你一些在面试官问道你时的思路。\n深入阅读 [从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！](https://zhuanlan.zhihu.com/p/34453198)\n\n本文参考：\n[前端性能优化之雅虎35条军规](https://juejin.im/post/5b73ef38f265da281e048e51)\n[前端经典面试题: 从输入URL到页面加载发生了什么？](https://segmentfault.com/a/1190000006879700)\nMDN\n维基百科\n","slug":"从「从输入URL到页面加载」谈及Web性能优化","published":1,"updated":"2019-01-22T15:02:13.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvm000ehw99m3iyl77l","content":"<h1 id=\"如何理解-Web-性能优化\"><a href=\"#如何理解-Web-性能优化\" class=\"headerlink\" title=\"如何理解 Web 性能优化\"></a>如何理解 Web 性能优化</h1><p>事实上就是用户觉得页面加载很快，用户从输入URL（网址）到页面在浏览器上加载出来的时间很短；与之相对的有如服务器性能优化（如网页占的 CPU 少），一定要区分开来。<br>对于用户众多的网站，节约下的加载时间或能带来可观的收入，这便是前端 Web 性能优化的意义。</p>\n<h1 id=\"从输入-URL-到页面加载发生了什么\"><a href=\"#从输入-URL-到页面加载发生了什么\" class=\"headerlink\" title=\"从输入 URL 到页面加载发生了什么\"></a>从输入 URL 到页面加载发生了什么</h1><p>一道所有前端耳熟能详的经典面试题，也确实是需要前端去深入研究的东西。下面我会简单介绍其过程，并罗列相关的 Web 优化方案。</p>\n<h2 id=\"0-缓存\"><a href=\"#0-缓存\" class=\"headerlink\" title=\"0. 缓存\"></a>0. 缓存</h2><p>当我们在浏览器上输入网址，浏览器首先会查看是否有缓存，如果之前已经访问过该网站，则会有缓存，那浏览器就不必再向服务器发请求了，用户则能够很快得看到内容。Web 性能优化有极大一部分都是优化缓存，缓存事实上又分为数据库缓存、代理服务器缓存、还有我们熟悉的 CDN 缓存，以及浏览器缓存等，部分内容后文介绍。</p>\n<h2 id=\"1-DNS-查询\"><a href=\"#1-DNS-查询\" class=\"headerlink\" title=\"1. DNS 查询\"></a>1. DNS 查询</h2><p>DNS 查询就像电话簿，你在浏览器地址栏输入网址，通过 DNS 查询得到域名的真实 IP。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d21c9b5e4b39ad6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>DNS查询完成之前，浏览器无法从服务器下载任何数据。</p>\n<h3 id=\"优化方案：减少-DNS-查询\"><a href=\"#优化方案：减少-DNS-查询\" class=\"headerlink\" title=\"优化方案：减少 DNS 查询\"></a>优化方案：减少 DNS 查询</h3><h4 id=\"1-1-DNS-缓存\"><a href=\"#1-1-DNS-缓存\" class=\"headerlink\" title=\"1.1 DNS 缓存\"></a>1.1 DNS 缓存</h4><p>ISP、局域网、操作系统、浏览器等都会有相应的DNS缓存机制。</p>\n<h4 id=\"1-2-减少页面的唯一域名\"><a href=\"#1-2-减少页面的唯一域名\" class=\"headerlink\" title=\"1.2 减少页面的唯一域名\"></a>1.2 减少页面的唯一域名</h4><p>因为每次 DNS 查询就是查找唯一域名的过程，那么域名越少，DNS 查询就越少，应该尽量将资源放在同一域名。当然这样做又有其他问题，下文详解。</p>\n<h2 id=\"2-TCP-连接\"><a href=\"#2-TCP-连接\" class=\"headerlink\" title=\"2. TCP 连接\"></a>2. TCP 连接</h2><p>经典的三次握手和四次挥手，不展开赘述。<br>简单讲讲优化方案：TCP 连接复用（TCP Connection Reuse），在 HTTP 请求头中的 Connection 上加 keep-alive；HTTP/2.0 多路复用等。</p>\n<h2 id=\"3-HTTP-请求及响应\"><a href=\"#3-HTTP-请求及响应\" class=\"headerlink\" title=\"3. HTTP 请求及响应\"></a>3. HTTP 请求及响应</h2><p>直接讲优化策略</p>\n<h4 id=\"3-1-避免不必要的重定向\"><a href=\"#3-1-避免不必要的重定向\" class=\"headerlink\" title=\"3.1 避免不必要的重定向\"></a>3.1 避免不必要的重定向</h4><blockquote>\n<p>最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加/但未添加。比如，访问<a href=\"http://astrology.yahoo.com/astrology将被301重定向到\" target=\"_blank\" rel=\"noopener\">http://astrology.yahoo.com/astrology将被301重定向到</a> <a href=\"http://astrology.yahoo.com/astrology/（注意末尾的\" target=\"_blank\" rel=\"noopener\">http://astrology.yahoo.com/astrology/（注意末尾的</a> /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。</p>\n</blockquote>\n<h4 id=\"3-2-Cookie\"><a href=\"#3-2-Cookie\" class=\"headerlink\" title=\"3.2 Cookie\"></a>3.2 Cookie</h4><h5 id=\"3-2-1减少-Cookie-大小\"><a href=\"#3-2-1减少-Cookie-大小\" class=\"headerlink\" title=\"3.2.1减少 Cookie 大小\"></a>3.2.1减少 Cookie 大小</h5><p>每次请求都会带上对应的 Cookie，减少 Cookie 大小可以降低其对响应速度的影响：</p>\n<ul>\n<li>去除不必要的 Cookie；</li>\n<li>尽量压缩 Cookie 大小；</li>\n<li>注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；</li>\n<li>设置合适的过期时间。</li>\n</ul>\n<h5 id=\"3-2-2-静态资源使用无-Cookie-域名\"><a href=\"#3-2-2-静态资源使用无-Cookie-域名\" class=\"headerlink\" title=\"3.2.2 静态资源使用无 Cookie 域名\"></a>3.2.2 静态资源使用无 Cookie 域名</h5><p>静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。</p>\n<h4 id=\"3-3-添加-Expires-或-Cache-Control-响应头\"><a href=\"#3-3-添加-Expires-或-Cache-Control-响应头\" class=\"headerlink\" title=\"3.3 添加 Expires 或 Cache-Control 响应头\"></a>3.3 添加 Expires 或 Cache-Control 响应头</h4><p>HTTP/1.1 增加的 Cache-Control，它比 Expires 等好在其设定时间是相对的，避免了用户本地设置时间落后所造成的无法良好缓存的问题等。</p>\n<ul>\n<li>静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；</li>\n<li>动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。</li>\n</ul>\n<h4 id=\"3-4-配置-Etag\"><a href=\"#3-4-配置-Etag\" class=\"headerlink\" title=\"3.4 配置 Etag\"></a>3.4 配置 Etag</h4><p>通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。</p>\n<h4 id=\"3-5-使用-Gzip\"><a href=\"#3-5-使用-Gzip\" class=\"headerlink\" title=\"3.5 使用 Gzip\"></a>3.5 使用 Gzip</h4><p>使用 Gzip 就是将 HTML、CSS、JS、XML、JSON 等资源进行 Gzip 高效压缩，减少资源体积那么下载就会更快。<br>Gzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，比 Deflate 更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持 Gzip 解码。<br>从HTTP/1.1开始，客户端就有了支持压缩的 Accept-Encoding HTTP 请求头。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure></p>\n<p>服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过 Content-Encoding 响应头来通知客户端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Encoding: gzip</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，已经压缩过的内容如图片和PDF不要使用 Gzip，另外还有文件内容本身就很小，这些资源再使用 Gzip 反而会增加资源下载时间，浪费 CPU 资源，而且还可能增加文件体积。</p>\n<h3 id=\"值得一提\"><a href=\"#值得一提\" class=\"headerlink\" title=\"值得一提\"></a>值得一提</h3><p>HTTP 请求的另一个优化方案是增加同时请求的数量，浏览器会同时发送多个请求，但是同一域名最多同时发送 4~8 个（不同浏览器不同）请求，那么当资源过多时，可以采用增加域名的方法增加并发量。当然这一方法又与上述 DNS 查询的优化方案矛盾，真正使用的时候就需要权衡。<br>另外，既然一次只能发的请求有限，就应该将重要的需要优先展示的资源先请求：</p>\n<h4 id=\"3-6-延迟加载（懒加载）\"><a href=\"#3-6-延迟加载（懒加载）\" class=\"headerlink\" title=\"3.6 延迟加载（懒加载）\"></a>3.6 延迟加载（懒加载）</h4><p>页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：</p>\n<ul>\n<li>非首屏使用的数据、样式、脚本、图片等；</li>\n<li>用户交互时才会显示的内容。</li>\n</ul>\n<p>遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。</p>\n<blockquote>\n<p>将首屏以外的HTML放在不渲染的元素中，如隐藏的&lt;textarea&gt;，或者type属性为非执行脚本的 &lt;script&gt; 标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。</p>\n</blockquote>\n<h4 id=\"3-7-预加载\"><a href=\"#3-7-预加载\" class=\"headerlink\" title=\"3.7 预加载\"></a>3.7 预加载</h4><p>预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</p>\n<h2 id=\"4-浏览器解析渲染页面\"><a href=\"#4-浏览器解析渲染页面\" class=\"headerlink\" title=\"4. 浏览器解析渲染页面\"></a>4. 浏览器解析渲染页面</h2><p>响应完成后，浏览器下载完资源，就开始解析资源生成页面了。对于前端来说，这部分内容是完全需要我们去掌控的，我们也来简单介绍一下对应的优化内容，部分内容如懒加载等上面已经提及就不再重复。</p>\n<h4 id=\"4-1-写对文档类型声明-lt-DOCTYPE-html-gt\"><a href=\"#4-1-写对文档类型声明-lt-DOCTYPE-html-gt\" class=\"headerlink\" title=\"4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;\"></a>4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;</h4><blockquote>\n<p>这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode\" target=\"_blank\" rel=\"noopener\">怪异模式(兼容模式)</a>”的渲染模式。“<code>&amp;lt;!DOCTYPE html&amp;gt;</code>“ 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。</p>\n</blockquote>\n<p>不写或写错文档类型声明，会浪费浏览器渲染页面的时间或引起错误排版。</p>\n<h4 id=\"4-2-CSS-放在-lt-head-gt-中\"><a href=\"#4-2-CSS-放在-lt-head-gt-中\" class=\"headerlink\" title=\"4.2 CSS 放在 &lt;head&gt; 中\"></a>4.2 CSS 放在 &lt;head&gt; 中</h4><p>把样式表放在 &lt;head&gt; 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。<br>这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。<br>如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。</p>\n<h4 id=\"4-2-把脚本放在页面底部\"><a href=\"#4-2-把脚本放在页面底部\" class=\"headerlink\" title=\"4.2 把脚本放在页面底部\"></a>4.2 把脚本放在页面底部</h4><p>浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源，并且，没有 js 并不邮箱呈现在用户目前的内容的观感。因此，最好将脚本放在底部，以提高页面加载速度。<br>一些特殊场景无法将脚本放到页面底部的，可以考虑&lt;script&gt;的以下属性：</p>\n<ul>\n<li>defer 属性；</li>\n<li>HTML5 新增的async属性。</li>\n</ul>\n<h4 id=\"4-3-使用外部-JavaScript-和-CSS\"><a href=\"#4-3-使用外部-JavaScript-和-CSS\" class=\"headerlink\" title=\"4.3 使用外部 JavaScript 和 CSS\"></a>4.3 使用外部 JavaScript 和 CSS</h4><p>外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。<br>当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。</p>\n<h4 id=\"4-4-合并和压缩-JS-CSS-等文件\"><a href=\"#4-4-合并和压缩-JS-CSS-等文件\" class=\"headerlink\" title=\"4.4 合并和压缩 JS/CSS 等文件\"></a>4.4 合并和压缩 JS/CSS 等文件</h4><p>通过该方法减少页面所需资源，减少请求数量，加快响应时间。现在 webpack 打包工具都已经默认实现了。</p>\n<h4 id=\"4-5-减少-DOM-操作和使用高效的事件处理\"><a href=\"#4-5-减少-DOM-操作和使用高效的事件处理\" class=\"headerlink\" title=\"4.5 减少 DOM 操作和使用高效的事件处理\"></a>4.5 减少 DOM 操作和使用高效的事件处理</h4><ul>\n<li>缓存已经访问过的元素；</li>\n<li>使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；</li>\n<li>操作 className，而不是多次读写 style；</li>\n<li>避免使用 JavaScript 修复布局；</li>\n<li>减少绑定事件监听的节点，如通过事件委托（当然现在浏览器功能强大，影响不大）；</li>\n<li>尽早处理事件，在 DOMContentLoaded 即可进行，不用等到 load 以后。</li>\n</ul>\n<h4 id=\"4-6-图片优化\"><a href=\"#4-6-图片优化\" class=\"headerlink\" title=\"4.6 图片优化\"></a>4.6 图片优化</h4><p>如何将图片变得又小又好看是一个工程师实力的体现，这里不过多赘述，大家可以查看我后文提供的资源。</p>\n<h4 id=\"4-7-使用-CND\"><a href=\"#4-7-使用-CND\" class=\"headerlink\" title=\"4.7 使用 CND\"></a>4.7 使用 CND</h4><blockquote>\n<p>内容分发网络（Content delivery network 或 Content distribution network）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n</blockquote>\n<p>动态 CDN，使用离你最近的服务器；CDN 没有 Cookie，使用 CDN 可以减少 Cookie；CND 会自动合并脚本文件等，减少请求数量；当然，使用 CND 同时也增加了一个域名，增大了同时请求数量。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-2696c8f1d212f5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>该文大量参考了雅虎 35 军规，增加了一些自己的理解并舍弃了一些已经过时的内容。细节内容比较少，主要是笼统地将 Web 性能优化的思路做了梳理，很多内容都值得我们去深入研究。当然其中部分内容顺序还是不佳，因为很多内容事实上是贯穿在整个过程当中的，正如 Web 性能优化是个整体，需要权衡所有冲突。希望本文可以给你一些在面试官问道你时的思路。<br>深入阅读 <a href=\"https://zhuanlan.zhihu.com/p/34453198\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！</a></p>\n<p>本文参考：<br><a href=\"https://juejin.im/post/5b73ef38f265da281e048e51\" target=\"_blank\" rel=\"noopener\">前端性能优化之雅虎35条军规</a><br><a href=\"https://segmentfault.com/a/1190000006879700\" target=\"_blank\" rel=\"noopener\">前端经典面试题: 从输入URL到页面加载发生了什么？</a><br>MDN<br>维基百科</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何理解-Web-性能优化\"><a href=\"#如何理解-Web-性能优化\" class=\"headerlink\" title=\"如何理解 Web 性能优化\"></a>如何理解 Web 性能优化</h1><p>事实上就是用户觉得页面加载很快，用户从输入URL（网址）到页面在浏览器上加载出来的时间很短；与之相对的有如服务器性能优化（如网页占的 CPU 少），一定要区分开来。<br>对于用户众多的网站，节约下的加载时间或能带来可观的收入，这便是前端 Web 性能优化的意义。</p>\n<h1 id=\"从输入-URL-到页面加载发生了什么\"><a href=\"#从输入-URL-到页面加载发生了什么\" class=\"headerlink\" title=\"从输入 URL 到页面加载发生了什么\"></a>从输入 URL 到页面加载发生了什么</h1><p>一道所有前端耳熟能详的经典面试题，也确实是需要前端去深入研究的东西。下面我会简单介绍其过程，并罗列相关的 Web 优化方案。</p>\n<h2 id=\"0-缓存\"><a href=\"#0-缓存\" class=\"headerlink\" title=\"0. 缓存\"></a>0. 缓存</h2><p>当我们在浏览器上输入网址，浏览器首先会查看是否有缓存，如果之前已经访问过该网站，则会有缓存，那浏览器就不必再向服务器发请求了，用户则能够很快得看到内容。Web 性能优化有极大一部分都是优化缓存，缓存事实上又分为数据库缓存、代理服务器缓存、还有我们熟悉的 CDN 缓存，以及浏览器缓存等，部分内容后文介绍。</p>\n<h2 id=\"1-DNS-查询\"><a href=\"#1-DNS-查询\" class=\"headerlink\" title=\"1. DNS 查询\"></a>1. DNS 查询</h2><p>DNS 查询就像电话簿，你在浏览器地址栏输入网址，通过 DNS 查询得到域名的真实 IP。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-d21c9b5e4b39ad6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>DNS查询完成之前，浏览器无法从服务器下载任何数据。</p>\n<h3 id=\"优化方案：减少-DNS-查询\"><a href=\"#优化方案：减少-DNS-查询\" class=\"headerlink\" title=\"优化方案：减少 DNS 查询\"></a>优化方案：减少 DNS 查询</h3><h4 id=\"1-1-DNS-缓存\"><a href=\"#1-1-DNS-缓存\" class=\"headerlink\" title=\"1.1 DNS 缓存\"></a>1.1 DNS 缓存</h4><p>ISP、局域网、操作系统、浏览器等都会有相应的DNS缓存机制。</p>\n<h4 id=\"1-2-减少页面的唯一域名\"><a href=\"#1-2-减少页面的唯一域名\" class=\"headerlink\" title=\"1.2 减少页面的唯一域名\"></a>1.2 减少页面的唯一域名</h4><p>因为每次 DNS 查询就是查找唯一域名的过程，那么域名越少，DNS 查询就越少，应该尽量将资源放在同一域名。当然这样做又有其他问题，下文详解。</p>\n<h2 id=\"2-TCP-连接\"><a href=\"#2-TCP-连接\" class=\"headerlink\" title=\"2. TCP 连接\"></a>2. TCP 连接</h2><p>经典的三次握手和四次挥手，不展开赘述。<br>简单讲讲优化方案：TCP 连接复用（TCP Connection Reuse），在 HTTP 请求头中的 Connection 上加 keep-alive；HTTP/2.0 多路复用等。</p>\n<h2 id=\"3-HTTP-请求及响应\"><a href=\"#3-HTTP-请求及响应\" class=\"headerlink\" title=\"3. HTTP 请求及响应\"></a>3. HTTP 请求及响应</h2><p>直接讲优化策略</p>\n<h4 id=\"3-1-避免不必要的重定向\"><a href=\"#3-1-避免不必要的重定向\" class=\"headerlink\" title=\"3.1 避免不必要的重定向\"></a>3.1 避免不必要的重定向</h4><blockquote>\n<p>最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加/但未添加。比如，访问<a href=\"http://astrology.yahoo.com/astrology将被301重定向到\" target=\"_blank\" rel=\"noopener\">http://astrology.yahoo.com/astrology将被301重定向到</a> <a href=\"http://astrology.yahoo.com/astrology/（注意末尾的\" target=\"_blank\" rel=\"noopener\">http://astrology.yahoo.com/astrology/（注意末尾的</a> /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。</p>\n</blockquote>\n<h4 id=\"3-2-Cookie\"><a href=\"#3-2-Cookie\" class=\"headerlink\" title=\"3.2 Cookie\"></a>3.2 Cookie</h4><h5 id=\"3-2-1减少-Cookie-大小\"><a href=\"#3-2-1减少-Cookie-大小\" class=\"headerlink\" title=\"3.2.1减少 Cookie 大小\"></a>3.2.1减少 Cookie 大小</h5><p>每次请求都会带上对应的 Cookie，减少 Cookie 大小可以降低其对响应速度的影响：</p>\n<ul>\n<li>去除不必要的 Cookie；</li>\n<li>尽量压缩 Cookie 大小；</li>\n<li>注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；</li>\n<li>设置合适的过期时间。</li>\n</ul>\n<h5 id=\"3-2-2-静态资源使用无-Cookie-域名\"><a href=\"#3-2-2-静态资源使用无-Cookie-域名\" class=\"headerlink\" title=\"3.2.2 静态资源使用无 Cookie 域名\"></a>3.2.2 静态资源使用无 Cookie 域名</h5><p>静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。</p>\n<h4 id=\"3-3-添加-Expires-或-Cache-Control-响应头\"><a href=\"#3-3-添加-Expires-或-Cache-Control-响应头\" class=\"headerlink\" title=\"3.3 添加 Expires 或 Cache-Control 响应头\"></a>3.3 添加 Expires 或 Cache-Control 响应头</h4><p>HTTP/1.1 增加的 Cache-Control，它比 Expires 等好在其设定时间是相对的，避免了用户本地设置时间落后所造成的无法良好缓存的问题等。</p>\n<ul>\n<li>静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；</li>\n<li>动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。</li>\n</ul>\n<h4 id=\"3-4-配置-Etag\"><a href=\"#3-4-配置-Etag\" class=\"headerlink\" title=\"3.4 配置 Etag\"></a>3.4 配置 Etag</h4><p>通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。</p>\n<h4 id=\"3-5-使用-Gzip\"><a href=\"#3-5-使用-Gzip\" class=\"headerlink\" title=\"3.5 使用 Gzip\"></a>3.5 使用 Gzip</h4><p>使用 Gzip 就是将 HTML、CSS、JS、XML、JSON 等资源进行 Gzip 高效压缩，减少资源体积那么下载就会更快。<br>Gzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，比 Deflate 更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持 Gzip 解码。<br>从HTTP/1.1开始，客户端就有了支持压缩的 Accept-Encoding HTTP 请求头。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure></p>\n<p>服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过 Content-Encoding 响应头来通知客户端。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Encoding: gzip</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，已经压缩过的内容如图片和PDF不要使用 Gzip，另外还有文件内容本身就很小，这些资源再使用 Gzip 反而会增加资源下载时间，浪费 CPU 资源，而且还可能增加文件体积。</p>\n<h3 id=\"值得一提\"><a href=\"#值得一提\" class=\"headerlink\" title=\"值得一提\"></a>值得一提</h3><p>HTTP 请求的另一个优化方案是增加同时请求的数量，浏览器会同时发送多个请求，但是同一域名最多同时发送 4~8 个（不同浏览器不同）请求，那么当资源过多时，可以采用增加域名的方法增加并发量。当然这一方法又与上述 DNS 查询的优化方案矛盾，真正使用的时候就需要权衡。<br>另外，既然一次只能发的请求有限，就应该将重要的需要优先展示的资源先请求：</p>\n<h4 id=\"3-6-延迟加载（懒加载）\"><a href=\"#3-6-延迟加载（懒加载）\" class=\"headerlink\" title=\"3.6 延迟加载（懒加载）\"></a>3.6 延迟加载（懒加载）</h4><p>页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：</p>\n<ul>\n<li>非首屏使用的数据、样式、脚本、图片等；</li>\n<li>用户交互时才会显示的内容。</li>\n</ul>\n<p>遵循「渐进增强」理念开发的网站：JavaScript用于增强用用户体验，但没有（不支持） JavaScript也能正常工作，完全可以延迟加载JavaScript。</p>\n<blockquote>\n<p>将首屏以外的HTML放在不渲染的元素中，如隐藏的&lt;textarea&gt;，或者type属性为非执行脚本的 &lt;script&gt; 标签中，减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。</p>\n</blockquote>\n<h4 id=\"3-7-预加载\"><a href=\"#3-7-预加载\" class=\"headerlink\" title=\"3.7 预加载\"></a>3.7 预加载</h4><p>预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</p>\n<h2 id=\"4-浏览器解析渲染页面\"><a href=\"#4-浏览器解析渲染页面\" class=\"headerlink\" title=\"4. 浏览器解析渲染页面\"></a>4. 浏览器解析渲染页面</h2><p>响应完成后，浏览器下载完资源，就开始解析资源生成页面了。对于前端来说，这部分内容是完全需要我们去掌控的，我们也来简单介绍一下对应的优化内容，部分内容如懒加载等上面已经提及就不再重复。</p>\n<h4 id=\"4-1-写对文档类型声明-lt-DOCTYPE-html-gt\"><a href=\"#4-1-写对文档类型声明-lt-DOCTYPE-html-gt\" class=\"headerlink\" title=\"4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;\"></a>4.1 写对文档类型声明 &lt;!DOCTYPE html&gt;</h4><blockquote>\n<p>这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode\" target=\"_blank\" rel=\"noopener\">怪异模式(兼容模式)</a>”的渲染模式。“<code>&amp;lt;!DOCTYPE html&amp;gt;</code>“ 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。</p>\n</blockquote>\n<p>不写或写错文档类型声明，会浪费浏览器渲染页面的时间或引起错误排版。</p>\n<h4 id=\"4-2-CSS-放在-lt-head-gt-中\"><a href=\"#4-2-CSS-放在-lt-head-gt-中\" class=\"headerlink\" title=\"4.2 CSS 放在 &lt;head&gt; 中\"></a>4.2 CSS 放在 &lt;head&gt; 中</h4><p>把样式表放在 &lt;head&gt; 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。<br>这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。<br>如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。把样式表放到文档的HEAD部分能让页面看起来加载地更快。</p>\n<h4 id=\"4-2-把脚本放在页面底部\"><a href=\"#4-2-把脚本放在页面底部\" class=\"headerlink\" title=\"4.2 把脚本放在页面底部\"></a>4.2 把脚本放在页面底部</h4><p>浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源，并且，没有 js 并不邮箱呈现在用户目前的内容的观感。因此，最好将脚本放在底部，以提高页面加载速度。<br>一些特殊场景无法将脚本放到页面底部的，可以考虑&lt;script&gt;的以下属性：</p>\n<ul>\n<li>defer 属性；</li>\n<li>HTML5 新增的async属性。</li>\n</ul>\n<h4 id=\"4-3-使用外部-JavaScript-和-CSS\"><a href=\"#4-3-使用外部-JavaScript-和-CSS\" class=\"headerlink\" title=\"4.3 使用外部 JavaScript 和 CSS\"></a>4.3 使用外部 JavaScript 和 CSS</h4><p>外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。<br>当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少HTTP请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。</p>\n<h4 id=\"4-4-合并和压缩-JS-CSS-等文件\"><a href=\"#4-4-合并和压缩-JS-CSS-等文件\" class=\"headerlink\" title=\"4.4 合并和压缩 JS/CSS 等文件\"></a>4.4 合并和压缩 JS/CSS 等文件</h4><p>通过该方法减少页面所需资源，减少请求数量，加快响应时间。现在 webpack 打包工具都已经默认实现了。</p>\n<h4 id=\"4-5-减少-DOM-操作和使用高效的事件处理\"><a href=\"#4-5-减少-DOM-操作和使用高效的事件处理\" class=\"headerlink\" title=\"4.5 减少 DOM 操作和使用高效的事件处理\"></a>4.5 减少 DOM 操作和使用高效的事件处理</h4><ul>\n<li>缓存已经访问过的元素；</li>\n<li>使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；</li>\n<li>操作 className，而不是多次读写 style；</li>\n<li>避免使用 JavaScript 修复布局；</li>\n<li>减少绑定事件监听的节点，如通过事件委托（当然现在浏览器功能强大，影响不大）；</li>\n<li>尽早处理事件，在 DOMContentLoaded 即可进行，不用等到 load 以后。</li>\n</ul>\n<h4 id=\"4-6-图片优化\"><a href=\"#4-6-图片优化\" class=\"headerlink\" title=\"4.6 图片优化\"></a>4.6 图片优化</h4><p>如何将图片变得又小又好看是一个工程师实力的体现，这里不过多赘述，大家可以查看我后文提供的资源。</p>\n<h4 id=\"4-7-使用-CND\"><a href=\"#4-7-使用-CND\" class=\"headerlink\" title=\"4.7 使用 CND\"></a>4.7 使用 CND</h4><blockquote>\n<p>内容分发网络（Content delivery network 或 Content distribution network）是指一种透过互联网互相连接的计算机网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n</blockquote>\n<p>动态 CDN，使用离你最近的服务器；CDN 没有 Cookie，使用 CDN 可以减少 Cookie；CND 会自动合并脚本文件等，减少请求数量；当然，使用 CND 同时也增加了一个域名，增大了同时请求数量。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-2696c8f1d212f5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>该文大量参考了雅虎 35 军规，增加了一些自己的理解并舍弃了一些已经过时的内容。细节内容比较少，主要是笼统地将 Web 性能优化的思路做了梳理，很多内容都值得我们去深入研究。当然其中部分内容顺序还是不佳，因为很多内容事实上是贯穿在整个过程当中的，正如 Web 性能优化是个整体，需要权衡所有冲突。希望本文可以给你一些在面试官问道你时的思路。<br>深入阅读 <a href=\"https://zhuanlan.zhihu.com/p/34453198\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！</a></p>\n<p>本文参考：<br><a href=\"https://juejin.im/post/5b73ef38f265da281e048e51\" target=\"_blank\" rel=\"noopener\">前端性能优化之雅虎35条军规</a><br><a href=\"https://segmentfault.com/a/1190000006879700\" target=\"_blank\" rel=\"noopener\">前端经典面试题: 从输入URL到页面加载发生了什么？</a><br>MDN<br>维基百科</p>\n"},{"title":"优先级 和 CSS 预处理","date":"2018-12-20T14:30:16.000Z","_content":"## 前言扯淡\n前两天电话面试，被问道了一些 CSS 的基础问题，虽然答上来了，但是不够全面，而且给自己最大的感受是自己对一些概念十分模棱两可，最直观的体现是有时候知道这个概念，却不知道他叫什么。自以为懂，最为致命。\n需求是最好的学习API的方式，面试找工作是最好的学习沉淀的过程。快俩个月没写博客了，终于今天在回顾时有一点点小的感悟，打算记录下来，主要是给自己看。废话不多说，开始正文。\n## 首先是 [优先级](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity)\n链接是文档，优先级主要是指CSS属性的优先级。\n>浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。\n\n简单来说，当你给一个元素声明（或该元素继承而来）多个相同属性时（前提），浏览器选择哪一个作为该元素的应用。\n```\n<div>\n  <h1 id=\"title\" class=\"title\" style=\"color: yellow;\">优先级</h1>\n</div>\n<!--优先级显示为 pink-->\n```\n```\n*{\n  color: red;\n}\n\nh1{\n  color: green;\n}\n\n.title{\n  color: blue;\n}\n\n#title{\n  color: black;\n}\n\nh1{\n  color: pink !important;\n}\n```\n#### 优先级如何确定：\n选择器优先级，下面三种优先级递增：（不细看文档都不知道这些平时在用的选择器的所有名称）\n1. **ID选择器**（例如, #title）\n2. **类选择器**（class selectors） (例如,.title)，**属性选择器**（attributes selectors）（例如, [type=\"radio\"]），**伪类**（pseudo-classes）（例如, :hover）\n3. **类型选择器**（type selectors）（例如, h1）和 **伪元素**（pseudo-elements）（例如, ::before）\n\n**通配选择符**（universal selector）(\\*), **关系选择符**（combinators） (+, >, ~, ' ')  和 **否定伪类**（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。\n给元素添加的**内联样式**  (例如, style=\"color: yellow;\") 总会覆盖外部样式表的任何样式 ，因此可看作是具有最高的优先级。\n**!important** 是例外，此声明将覆盖任何其他声明，技术上!important与优先级无关，但它与它直接相关。\n#### 如何利用优先级\n1. 选择器越具体，优先级越高。\n2. 相同优先级情况下，后面的样式覆盖前面的。\n3. !important 最特殊，有他的声明最优先，但应该避免使用。\n\n上面内容均来自 MDN，也就是我给的链接，还有很多如`无视DOM树中的距离`等没有记录。大家还是直接看MDN为宜。这些真的是简单的基础内容，但确实有很多细节，如果能够因为无意看到我的文章去看MDN文档而收获一些东西，便是此文的意义了。\n扩展阅读 [真正理解\"CSS选择器的优先级\"](https://github.com/jincdream/jincdream.github.io/issues/14)\n## CSS预处理（预编译）\n当面试关问我知不知道CSS预处理的时候，我一时并没有将其与平常再用的 LESS、SCSS 等预编译器对上。也就是我文章开头提到的，有时我们以为熟知的东西，事实上我们那么陌生。\n\n---\n(以下内容来自 [再谈 CSS 预处理器](http://efe.baidu.com/blog/revisiting-css-preprocessors/))\nCSS 预处理器是什么？一般来说，它们基于 CSS 扩展了一套属于自己的 DSL，来解决我们书写 CSS 时难以解决的问题：\n- 语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；\n- 没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。\n\n所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。\n\n---\n这篇文章不打算继续将 LESS、SASS 等的嵌套、变量等语法规则。一来这些内容非一篇文章讲得清（我懒），再者看官方文档是最好的入门方式，同时像上面百度EFE的文档比我写肯定高到不知道哪里去了。\n那么我为什么会将 CSS 预处理和 优先级 放在同一篇文章写呢。也是面试官连续问的这俩个问题（真的很基础了，对我这种转行前端新人十分照顾），再者其实两者有一些联系，CSS 预编译也是在变相解决 优先级 的问题，因为我们需要完美利用优先级，所以我们在写 CSS 时往往选择器需要十分详细，如下\n```\ndiv{}\ndiv>ul{}\ndiv>ul>li{}\ndiv>ul>li>a{}\n```\n本着 Dry 宗旨，CSS 预编译的嵌套规则就是为了解决优先级啊。\n\n---\n本文仅供个人学习使用","source":"_posts/优先级-和-CSS-预处理.md","raw":"---\ntitle: 优先级 和 CSS 预处理\ndate: 2018-12-20 22:30:16\ntags:\n---\n## 前言扯淡\n前两天电话面试，被问道了一些 CSS 的基础问题，虽然答上来了，但是不够全面，而且给自己最大的感受是自己对一些概念十分模棱两可，最直观的体现是有时候知道这个概念，却不知道他叫什么。自以为懂，最为致命。\n需求是最好的学习API的方式，面试找工作是最好的学习沉淀的过程。快俩个月没写博客了，终于今天在回顾时有一点点小的感悟，打算记录下来，主要是给自己看。废话不多说，开始正文。\n## 首先是 [优先级](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity)\n链接是文档，优先级主要是指CSS属性的优先级。\n>浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。\n\n简单来说，当你给一个元素声明（或该元素继承而来）多个相同属性时（前提），浏览器选择哪一个作为该元素的应用。\n```\n<div>\n  <h1 id=\"title\" class=\"title\" style=\"color: yellow;\">优先级</h1>\n</div>\n<!--优先级显示为 pink-->\n```\n```\n*{\n  color: red;\n}\n\nh1{\n  color: green;\n}\n\n.title{\n  color: blue;\n}\n\n#title{\n  color: black;\n}\n\nh1{\n  color: pink !important;\n}\n```\n#### 优先级如何确定：\n选择器优先级，下面三种优先级递增：（不细看文档都不知道这些平时在用的选择器的所有名称）\n1. **ID选择器**（例如, #title）\n2. **类选择器**（class selectors） (例如,.title)，**属性选择器**（attributes selectors）（例如, [type=\"radio\"]），**伪类**（pseudo-classes）（例如, :hover）\n3. **类型选择器**（type selectors）（例如, h1）和 **伪元素**（pseudo-elements）（例如, ::before）\n\n**通配选择符**（universal selector）(\\*), **关系选择符**（combinators） (+, >, ~, ' ')  和 **否定伪类**（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。\n给元素添加的**内联样式**  (例如, style=\"color: yellow;\") 总会覆盖外部样式表的任何样式 ，因此可看作是具有最高的优先级。\n**!important** 是例外，此声明将覆盖任何其他声明，技术上!important与优先级无关，但它与它直接相关。\n#### 如何利用优先级\n1. 选择器越具体，优先级越高。\n2. 相同优先级情况下，后面的样式覆盖前面的。\n3. !important 最特殊，有他的声明最优先，但应该避免使用。\n\n上面内容均来自 MDN，也就是我给的链接，还有很多如`无视DOM树中的距离`等没有记录。大家还是直接看MDN为宜。这些真的是简单的基础内容，但确实有很多细节，如果能够因为无意看到我的文章去看MDN文档而收获一些东西，便是此文的意义了。\n扩展阅读 [真正理解\"CSS选择器的优先级\"](https://github.com/jincdream/jincdream.github.io/issues/14)\n## CSS预处理（预编译）\n当面试关问我知不知道CSS预处理的时候，我一时并没有将其与平常再用的 LESS、SCSS 等预编译器对上。也就是我文章开头提到的，有时我们以为熟知的东西，事实上我们那么陌生。\n\n---\n(以下内容来自 [再谈 CSS 预处理器](http://efe.baidu.com/blog/revisiting-css-preprocessors/))\nCSS 预处理器是什么？一般来说，它们基于 CSS 扩展了一套属于自己的 DSL，来解决我们书写 CSS 时难以解决的问题：\n- 语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；\n- 没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。\n\n所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。\n\n---\n这篇文章不打算继续将 LESS、SASS 等的嵌套、变量等语法规则。一来这些内容非一篇文章讲得清（我懒），再者看官方文档是最好的入门方式，同时像上面百度EFE的文档比我写肯定高到不知道哪里去了。\n那么我为什么会将 CSS 预处理和 优先级 放在同一篇文章写呢。也是面试官连续问的这俩个问题（真的很基础了，对我这种转行前端新人十分照顾），再者其实两者有一些联系，CSS 预编译也是在变相解决 优先级 的问题，因为我们需要完美利用优先级，所以我们在写 CSS 时往往选择器需要十分详细，如下\n```\ndiv{}\ndiv>ul{}\ndiv>ul>li{}\ndiv>ul>li>a{}\n```\n本着 Dry 宗旨，CSS 预编译的嵌套规则就是为了解决优先级啊。\n\n---\n本文仅供个人学习使用","slug":"优先级-和-CSS-预处理","published":1,"updated":"2019-01-18T14:32:19.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvm000fhw99lka3lspo","content":"<h2 id=\"前言扯淡\"><a href=\"#前言扯淡\" class=\"headerlink\" title=\"前言扯淡\"></a>前言扯淡</h2><p>前两天电话面试，被问道了一些 CSS 的基础问题，虽然答上来了，但是不够全面，而且给自己最大的感受是自己对一些概念十分模棱两可，最直观的体现是有时候知道这个概念，却不知道他叫什么。自以为懂，最为致命。<br>需求是最好的学习API的方式，面试找工作是最好的学习沉淀的过程。快俩个月没写博客了，终于今天在回顾时有一点点小的感悟，打算记录下来，主要是给自己看。废话不多说，开始正文。</p>\n<h2 id=\"首先是-优先级\"><a href=\"#首先是-优先级\" class=\"headerlink\" title=\"首先是 优先级\"></a>首先是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\" target=\"_blank\" rel=\"noopener\">优先级</a></h2><p>链接是文档，优先级主要是指CSS属性的优先级。</p>\n<blockquote>\n<p>浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。</p>\n</blockquote>\n<p>简单来说，当你给一个元素声明（或该元素继承而来）多个相同属性时（前提），浏览器选择哪一个作为该元素的应用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1 id=&quot;title&quot; class=&quot;title&quot; style=&quot;color: yellow;&quot;&gt;优先级&lt;/h1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!--优先级显示为 pink--&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1&#123;</span><br><span class=\"line\">  color: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.title&#123;</span><br><span class=\"line\">  color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#title&#123;</span><br><span class=\"line\">  color: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1&#123;</span><br><span class=\"line\">  color: pink !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"优先级如何确定：\"><a href=\"#优先级如何确定：\" class=\"headerlink\" title=\"优先级如何确定：\"></a>优先级如何确定：</h4><p>选择器优先级，下面三种优先级递增：（不细看文档都不知道这些平时在用的选择器的所有名称）</p>\n<ol>\n<li><strong>ID选择器</strong>（例如, #title）</li>\n<li><strong>类选择器</strong>（class selectors） (例如,.title)，<strong>属性选择器</strong>（attributes selectors）（例如, [type=”radio”]），<strong>伪类</strong>（pseudo-classes）（例如, :hover）</li>\n<li><strong>类型选择器</strong>（type selectors）（例如, h1）和 <strong>伪元素</strong>（pseudo-elements）（例如, ::before）</li>\n</ol>\n<p><strong>通配选择符</strong>（universal selector）(*), <strong>关系选择符</strong>（combinators） (+, &gt;, ~, ‘ ‘)  和 <strong>否定伪类</strong>（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。<br>给元素添加的<strong>内联样式</strong>  (例如, style=”color: yellow;”) 总会覆盖外部样式表的任何样式 ，因此可看作是具有最高的优先级。<br><strong>!important</strong> 是例外，此声明将覆盖任何其他声明，技术上!important与优先级无关，但它与它直接相关。</p>\n<h4 id=\"如何利用优先级\"><a href=\"#如何利用优先级\" class=\"headerlink\" title=\"如何利用优先级\"></a>如何利用优先级</h4><ol>\n<li>选择器越具体，优先级越高。</li>\n<li>相同优先级情况下，后面的样式覆盖前面的。</li>\n<li>!important 最特殊，有他的声明最优先，但应该避免使用。</li>\n</ol>\n<p>上面内容均来自 MDN，也就是我给的链接，还有很多如<code>无视DOM树中的距离</code>等没有记录。大家还是直接看MDN为宜。这些真的是简单的基础内容，但确实有很多细节，如果能够因为无意看到我的文章去看MDN文档而收获一些东西，便是此文的意义了。<br>扩展阅读 <a href=\"https://github.com/jincdream/jincdream.github.io/issues/14\" target=\"_blank\" rel=\"noopener\">真正理解”CSS选择器的优先级”</a></p>\n<h2 id=\"CSS预处理（预编译）\"><a href=\"#CSS预处理（预编译）\" class=\"headerlink\" title=\"CSS预处理（预编译）\"></a>CSS预处理（预编译）</h2><p>当面试关问我知不知道CSS预处理的时候，我一时并没有将其与平常再用的 LESS、SCSS 等预编译器对上。也就是我文章开头提到的，有时我们以为熟知的东西，事实上我们那么陌生。</p>\n<hr>\n<p>(以下内容来自 <a href=\"http://efe.baidu.com/blog/revisiting-css-preprocessors/\" target=\"_blank\" rel=\"noopener\">再谈 CSS 预处理器</a>)<br>CSS 预处理器是什么？一般来说，它们基于 CSS 扩展了一套属于自己的 DSL，来解决我们书写 CSS 时难以解决的问题：</p>\n<ul>\n<li>语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；</li>\n<li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li>\n</ul>\n<p>所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。</p>\n<hr>\n<p>这篇文章不打算继续将 LESS、SASS 等的嵌套、变量等语法规则。一来这些内容非一篇文章讲得清（我懒），再者看官方文档是最好的入门方式，同时像上面百度EFE的文档比我写肯定高到不知道哪里去了。<br>那么我为什么会将 CSS 预处理和 优先级 放在同一篇文章写呢。也是面试官连续问的这俩个问题（真的很基础了，对我这种转行前端新人十分照顾），再者其实两者有一些联系，CSS 预编译也是在变相解决 优先级 的问题，因为我们需要完美利用优先级，所以我们在写 CSS 时往往选择器需要十分详细，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;&#125;</span><br><span class=\"line\">div&gt;ul&#123;&#125;</span><br><span class=\"line\">div&gt;ul&gt;li&#123;&#125;</span><br><span class=\"line\">div&gt;ul&gt;li&gt;a&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本着 Dry 宗旨，CSS 预编译的嵌套规则就是为了解决优先级啊。</p>\n<hr>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言扯淡\"><a href=\"#前言扯淡\" class=\"headerlink\" title=\"前言扯淡\"></a>前言扯淡</h2><p>前两天电话面试，被问道了一些 CSS 的基础问题，虽然答上来了，但是不够全面，而且给自己最大的感受是自己对一些概念十分模棱两可，最直观的体现是有时候知道这个概念，却不知道他叫什么。自以为懂，最为致命。<br>需求是最好的学习API的方式，面试找工作是最好的学习沉淀的过程。快俩个月没写博客了，终于今天在回顾时有一点点小的感悟，打算记录下来，主要是给自己看。废话不多说，开始正文。</p>\n<h2 id=\"首先是-优先级\"><a href=\"#首先是-优先级\" class=\"headerlink\" title=\"首先是 优先级\"></a>首先是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\" target=\"_blank\" rel=\"noopener\">优先级</a></h2><p>链接是文档，优先级主要是指CSS属性的优先级。</p>\n<blockquote>\n<p>浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。</p>\n</blockquote>\n<p>简单来说，当你给一个元素声明（或该元素继承而来）多个相同属性时（前提），浏览器选择哪一个作为该元素的应用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1 id=&quot;title&quot; class=&quot;title&quot; style=&quot;color: yellow;&quot;&gt;优先级&lt;/h1&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!--优先级显示为 pink--&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1&#123;</span><br><span class=\"line\">  color: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.title&#123;</span><br><span class=\"line\">  color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#title&#123;</span><br><span class=\"line\">  color: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1&#123;</span><br><span class=\"line\">  color: pink !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"优先级如何确定：\"><a href=\"#优先级如何确定：\" class=\"headerlink\" title=\"优先级如何确定：\"></a>优先级如何确定：</h4><p>选择器优先级，下面三种优先级递增：（不细看文档都不知道这些平时在用的选择器的所有名称）</p>\n<ol>\n<li><strong>ID选择器</strong>（例如, #title）</li>\n<li><strong>类选择器</strong>（class selectors） (例如,.title)，<strong>属性选择器</strong>（attributes selectors）（例如, [type=”radio”]），<strong>伪类</strong>（pseudo-classes）（例如, :hover）</li>\n<li><strong>类型选择器</strong>（type selectors）（例如, h1）和 <strong>伪元素</strong>（pseudo-elements）（例如, ::before）</li>\n</ol>\n<p><strong>通配选择符</strong>（universal selector）(*), <strong>关系选择符</strong>（combinators） (+, &gt;, ~, ‘ ‘)  和 <strong>否定伪类</strong>（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。<br>给元素添加的<strong>内联样式</strong>  (例如, style=”color: yellow;”) 总会覆盖外部样式表的任何样式 ，因此可看作是具有最高的优先级。<br><strong>!important</strong> 是例外，此声明将覆盖任何其他声明，技术上!important与优先级无关，但它与它直接相关。</p>\n<h4 id=\"如何利用优先级\"><a href=\"#如何利用优先级\" class=\"headerlink\" title=\"如何利用优先级\"></a>如何利用优先级</h4><ol>\n<li>选择器越具体，优先级越高。</li>\n<li>相同优先级情况下，后面的样式覆盖前面的。</li>\n<li>!important 最特殊，有他的声明最优先，但应该避免使用。</li>\n</ol>\n<p>上面内容均来自 MDN，也就是我给的链接，还有很多如<code>无视DOM树中的距离</code>等没有记录。大家还是直接看MDN为宜。这些真的是简单的基础内容，但确实有很多细节，如果能够因为无意看到我的文章去看MDN文档而收获一些东西，便是此文的意义了。<br>扩展阅读 <a href=\"https://github.com/jincdream/jincdream.github.io/issues/14\" target=\"_blank\" rel=\"noopener\">真正理解”CSS选择器的优先级”</a></p>\n<h2 id=\"CSS预处理（预编译）\"><a href=\"#CSS预处理（预编译）\" class=\"headerlink\" title=\"CSS预处理（预编译）\"></a>CSS预处理（预编译）</h2><p>当面试关问我知不知道CSS预处理的时候，我一时并没有将其与平常再用的 LESS、SCSS 等预编译器对上。也就是我文章开头提到的，有时我们以为熟知的东西，事实上我们那么陌生。</p>\n<hr>\n<p>(以下内容来自 <a href=\"http://efe.baidu.com/blog/revisiting-css-preprocessors/\" target=\"_blank\" rel=\"noopener\">再谈 CSS 预处理器</a>)<br>CSS 预处理器是什么？一般来说，它们基于 CSS 扩展了一套属于自己的 DSL，来解决我们书写 CSS 时难以解决的问题：</p>\n<ul>\n<li>语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；</li>\n<li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。</li>\n</ul>\n<p>所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。</p>\n<hr>\n<p>这篇文章不打算继续将 LESS、SASS 等的嵌套、变量等语法规则。一来这些内容非一篇文章讲得清（我懒），再者看官方文档是最好的入门方式，同时像上面百度EFE的文档比我写肯定高到不知道哪里去了。<br>那么我为什么会将 CSS 预处理和 优先级 放在同一篇文章写呢。也是面试官连续问的这俩个问题（真的很基础了，对我这种转行前端新人十分照顾），再者其实两者有一些联系，CSS 预编译也是在变相解决 优先级 的问题，因为我们需要完美利用优先级，所以我们在写 CSS 时往往选择器需要十分详细，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;&#125;</span><br><span class=\"line\">div&gt;ul&#123;&#125;</span><br><span class=\"line\">div&gt;ul&gt;li&#123;&#125;</span><br><span class=\"line\">div&gt;ul&gt;li&gt;a&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本着 Dry 宗旨，CSS 预编译的嵌套规则就是为了解决优先级啊。</p>\n<hr>\n<p>本文仅供个人学习使用</p>\n"},{"title":"Web 服务器","date":"2018-08-11T09:21:53.000Z","_content":"[从输入URL到页面加载发生了什么](https://segmentfault.com/a/1190000006879700)\n## 什么是Web服务器\nWeb 服务器就是一个软件，这个软件监听某个端口。当一个 HTTP 请求到达这个端口后这个软件会接收到，根据请求的 url 和参数发送响应数据，这些数据可以是：1. 本机文件； 2. 通过可执行程序从数据库获取数据后组装的页面\n\n**让我们用 node 搭建一个简单的服务器**\n\n[代码相关HTTP文档](https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_request_end_data_encoding_callback) 遇到相应API再看，不用一个个看，看不完的\n新建一个名为 server1.js的代码\n```\n//通过 require('http') 来让服务器支持HTTP协议\nvar http = require('http')\n//创建服务器请求和响应的函数\nvar server = http.createServer(function(request, response){\n  //设置一个2秒的计时器\n  setTimeout(function(){\n    //.setHeader设置文件类型编码等\n    response.setHeader('Content-Type','text/html; charset=utf-8')\n    //.writeHead返回状态码\n    response.writeHead(404, 'Not Found')\n    response.write('<html><head><meta charset=\"gbk\" /></head>')\n    response.write('<body>')\n    response.write('<h1>你好</h1>')\n    response.write('</body>')\n    response.write('</html>')\n    //事件'关闭'\n    response.end()\n  },2000);\n})\nconsole.log('open http://localhost:8080')\n//listen(端口)产生HTTP服务器监听链接\nserver.listen(8080)\n```\n用命令行打开server1.js所在目录，node 开启服务器![](https://upload-images.jianshu.io/upload_images/7094266-59e81063d440a373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用浏览器打开http://localhost:8080，2秒后就返回页面拉![](https://upload-images.jianshu.io/upload_images/7094266-7bf0b304614ce83f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n至此，你已经用node.js完成了一个简单的服务器搭建，并用浏览器以http://localhost:8080向你的服务器发起请求并成功得到响应了\n### 静态服务器\n页面不会变化，展示静态页面![image](http://upload-images.jianshu.io/upload_images/7094266-19e00ec3472ba838.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**同样用node尝试一个简单的静态服务器**\n```\nvar http = require('http')\n//用来读取内容\nvar fs = require('fs')\n\nvar server = http.createServer(function(req, res){\n  try{\n    //.readFileSync 用于同步读取文件:当前目录下的 hi 文件 下的 目标\n    var fileContent = fs.readFileSync(__dirname + '/hi' + req.url)\n    res.write(fileContent)\n  }catch(e){\n    res.writeHead(404, 'not found')\n  }\n  res.end()\n})\n\nserver.listen(8080)\nconsole.log('visit http://localhost:8080' )\n```\n我在 hi 文件下新建了一个html文件![](https://upload-images.jianshu.io/upload_images/7094266-f1c53aa1769fd9ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n命令行![](https://upload-images.jianshu.io/upload_images/7094266-9dcba127af327a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这次输入的就是http://localhost:8080/index.html![](https://upload-images.jianshu.io/upload_images/7094266-986cc0ea222a9586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)成功拉\n\n### 动态服务器\n有个动态软件，可执行动态页面![image](http://upload-images.jianshu.io/upload_images/7094266-47d1ffd2b592f7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这一部分涉及的知识就多了，无法用简单的小示例完整展现，后续应该会有相关博客\n\n### 以上例子均为 url 同源\n当浏览器向服务器发送请求时，会遇到**不同源**的情况：（有关浏览器同源的详细概念可以参考[阮一峰博客](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)）\n不同源两种情况下的规避方法：\n1.服务器同意请求：\nJSONP：需要后端支持（附上我学习JSONP的相关[博客](https://www.jianshu.com/p/2a2fe02917e7)）\nCORS(Cross-Origin Resource Sharing)：跨域资源共享（AJAX相关[博客](https://www.jianshu.com/p/4591a66c50f5)）\n2.服务器不同意请求：\n利用服务器中转：自己搭建一个服务器，由于服务器访问服务器没有同源要求，可直接访问，自己服务器作为中转，把自己服务器变为情况1，即可通过访问自己服务器再访问到其他服务器相关内容\n这方面的知识同样可以参考\n[饥人谷博客-跨域](http://book.jirengu.com/fe/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/Javascript/%E8%B7%A8%E5%9F%9F.html)\n---\n本文仅供个人学习使用\n\n相关参考及资源链接已在文中标注","source":"_posts/Web-服务器.md","raw":"---\ntitle: Web 服务器\ndate: 2018-08-11 17:21:53\ntags:\n---\n[从输入URL到页面加载发生了什么](https://segmentfault.com/a/1190000006879700)\n## 什么是Web服务器\nWeb 服务器就是一个软件，这个软件监听某个端口。当一个 HTTP 请求到达这个端口后这个软件会接收到，根据请求的 url 和参数发送响应数据，这些数据可以是：1. 本机文件； 2. 通过可执行程序从数据库获取数据后组装的页面\n\n**让我们用 node 搭建一个简单的服务器**\n\n[代码相关HTTP文档](https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_request_end_data_encoding_callback) 遇到相应API再看，不用一个个看，看不完的\n新建一个名为 server1.js的代码\n```\n//通过 require('http') 来让服务器支持HTTP协议\nvar http = require('http')\n//创建服务器请求和响应的函数\nvar server = http.createServer(function(request, response){\n  //设置一个2秒的计时器\n  setTimeout(function(){\n    //.setHeader设置文件类型编码等\n    response.setHeader('Content-Type','text/html; charset=utf-8')\n    //.writeHead返回状态码\n    response.writeHead(404, 'Not Found')\n    response.write('<html><head><meta charset=\"gbk\" /></head>')\n    response.write('<body>')\n    response.write('<h1>你好</h1>')\n    response.write('</body>')\n    response.write('</html>')\n    //事件'关闭'\n    response.end()\n  },2000);\n})\nconsole.log('open http://localhost:8080')\n//listen(端口)产生HTTP服务器监听链接\nserver.listen(8080)\n```\n用命令行打开server1.js所在目录，node 开启服务器![](https://upload-images.jianshu.io/upload_images/7094266-59e81063d440a373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n用浏览器打开http://localhost:8080，2秒后就返回页面拉![](https://upload-images.jianshu.io/upload_images/7094266-7bf0b304614ce83f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n至此，你已经用node.js完成了一个简单的服务器搭建，并用浏览器以http://localhost:8080向你的服务器发起请求并成功得到响应了\n### 静态服务器\n页面不会变化，展示静态页面![image](http://upload-images.jianshu.io/upload_images/7094266-19e00ec3472ba838.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**同样用node尝试一个简单的静态服务器**\n```\nvar http = require('http')\n//用来读取内容\nvar fs = require('fs')\n\nvar server = http.createServer(function(req, res){\n  try{\n    //.readFileSync 用于同步读取文件:当前目录下的 hi 文件 下的 目标\n    var fileContent = fs.readFileSync(__dirname + '/hi' + req.url)\n    res.write(fileContent)\n  }catch(e){\n    res.writeHead(404, 'not found')\n  }\n  res.end()\n})\n\nserver.listen(8080)\nconsole.log('visit http://localhost:8080' )\n```\n我在 hi 文件下新建了一个html文件![](https://upload-images.jianshu.io/upload_images/7094266-f1c53aa1769fd9ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n命令行![](https://upload-images.jianshu.io/upload_images/7094266-9dcba127af327a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这次输入的就是http://localhost:8080/index.html![](https://upload-images.jianshu.io/upload_images/7094266-986cc0ea222a9586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)成功拉\n\n### 动态服务器\n有个动态软件，可执行动态页面![image](http://upload-images.jianshu.io/upload_images/7094266-47d1ffd2b592f7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这一部分涉及的知识就多了，无法用简单的小示例完整展现，后续应该会有相关博客\n\n### 以上例子均为 url 同源\n当浏览器向服务器发送请求时，会遇到**不同源**的情况：（有关浏览器同源的详细概念可以参考[阮一峰博客](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)）\n不同源两种情况下的规避方法：\n1.服务器同意请求：\nJSONP：需要后端支持（附上我学习JSONP的相关[博客](https://www.jianshu.com/p/2a2fe02917e7)）\nCORS(Cross-Origin Resource Sharing)：跨域资源共享（AJAX相关[博客](https://www.jianshu.com/p/4591a66c50f5)）\n2.服务器不同意请求：\n利用服务器中转：自己搭建一个服务器，由于服务器访问服务器没有同源要求，可直接访问，自己服务器作为中转，把自己服务器变为情况1，即可通过访问自己服务器再访问到其他服务器相关内容\n这方面的知识同样可以参考\n[饥人谷博客-跨域](http://book.jirengu.com/fe/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/Javascript/%E8%B7%A8%E5%9F%9F.html)\n---\n本文仅供个人学习使用\n\n相关参考及资源链接已在文中标注","slug":"Web-服务器","published":1,"updated":"2019-01-22T14:31:14.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvn000ghw99sko9j9kf","content":"<p><a href=\"https://segmentfault.com/a/1190000006879700\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载发生了什么</a></p>\n<h2 id=\"什么是Web服务器\"><a href=\"#什么是Web服务器\" class=\"headerlink\" title=\"什么是Web服务器\"></a>什么是Web服务器</h2><p>Web 服务器就是一个软件，这个软件监听某个端口。当一个 HTTP 请求到达这个端口后这个软件会接收到，根据请求的 url 和参数发送响应数据，这些数据可以是：1. 本机文件； 2. 通过可执行程序从数据库获取数据后组装的页面</p>\n<p><strong>让我们用 node 搭建一个简单的服务器</strong></p>\n<p><a href=\"https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_request_end_data_encoding_callback\" target=\"_blank\" rel=\"noopener\">代码相关HTTP文档</a> 遇到相应API再看，不用一个个看，看不完的<br>新建一个名为 server1.js的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过 require(&apos;http&apos;) 来让服务器支持HTTP协议</span><br><span class=\"line\">var http = require(&apos;http&apos;)</span><br><span class=\"line\">//创建服务器请求和响应的函数</span><br><span class=\"line\">var server = http.createServer(function(request, response)&#123;</span><br><span class=\"line\">  //设置一个2秒的计时器</span><br><span class=\"line\">  setTimeout(function()&#123;</span><br><span class=\"line\">    //.setHeader设置文件类型编码等</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;,&apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    //.writeHead返回状态码</span><br><span class=\"line\">    response.writeHead(404, &apos;Not Found&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;gbk&quot; /&gt;&lt;/head&gt;&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;body&gt;&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;h1&gt;你好&lt;/h1&gt;&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;/body&gt;&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;/html&gt;&apos;)</span><br><span class=\"line\">    //事件&apos;关闭&apos;</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;,2000);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(&apos;open http://localhost:8080&apos;)</span><br><span class=\"line\">//listen(端口)产生HTTP服务器监听链接</span><br><span class=\"line\">server.listen(8080)</span><br></pre></td></tr></table></figure></p>\n<p>用命令行打开server1.js所在目录，node 开启服务器<img src=\"https://upload-images.jianshu.io/upload_images/7094266-59e81063d440a373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>用浏览器打开<a href=\"http://localhost:8080，2秒后就返回页面拉![](https://upload-images.jianshu.io/upload_images/7094266-7bf0b304614ce83f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\" target=\"_blank\" rel=\"noopener\">http://localhost:8080，2秒后就返回页面拉![](https://upload-images.jianshu.io/upload_images/7094266-7bf0b304614ce83f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>至此，你已经用node.js完成了一个简单的服务器搭建，并用浏览器以<a href=\"http://localhost:8080向你的服务器发起请求并成功得到响应了\" target=\"_blank\" rel=\"noopener\">http://localhost:8080向你的服务器发起请求并成功得到响应了</a></p>\n<h3 id=\"静态服务器\"><a href=\"#静态服务器\" class=\"headerlink\" title=\"静态服务器\"></a>静态服务器</h3><p>页面不会变化，展示静态页面<img src=\"http://upload-images.jianshu.io/upload_images/7094266-19e00ec3472ba838.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"><br><strong>同样用node尝试一个简单的静态服务器</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;)</span><br><span class=\"line\">//用来读取内容</span><br><span class=\"line\">var fs = require(&apos;fs&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var server = http.createServer(function(req, res)&#123;</span><br><span class=\"line\">  try&#123;</span><br><span class=\"line\">    //.readFileSync 用于同步读取文件:当前目录下的 hi 文件 下的 目标</span><br><span class=\"line\">    var fileContent = fs.readFileSync(__dirname + &apos;/hi&apos; + req.url)</span><br><span class=\"line\">    res.write(fileContent)</span><br><span class=\"line\">  &#125;catch(e)&#123;</span><br><span class=\"line\">    res.writeHead(404, &apos;not found&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.end()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8080)</span><br><span class=\"line\">console.log(&apos;visit http://localhost:8080&apos; )</span><br></pre></td></tr></table></figure></p>\n<p>我在 hi 文件下新建了一个html文件<img src=\"https://upload-images.jianshu.io/upload_images/7094266-f1c53aa1769fd9ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>命令行<img src=\"https://upload-images.jianshu.io/upload_images/7094266-9dcba127af327a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这次输入的就是<a href=\"http://localhost:8080/index.html![](https://upload-images.jianshu.io/upload_images/7094266-986cc0ea222a9586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)成功拉\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index.html![](https://upload-images.jianshu.io/upload_images/7094266-986cc0ea222a9586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)成功拉</a></p>\n<h3 id=\"动态服务器\"><a href=\"#动态服务器\" class=\"headerlink\" title=\"动态服务器\"></a>动态服务器</h3><p>有个动态软件，可执行动态页面<img src=\"http://upload-images.jianshu.io/upload_images/7094266-47d1ffd2b592f7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"><br>这一部分涉及的知识就多了，无法用简单的小示例完整展现，后续应该会有相关博客</p>\n<h3 id=\"以上例子均为-url-同源\"><a href=\"#以上例子均为-url-同源\" class=\"headerlink\" title=\"以上例子均为 url 同源\"></a>以上例子均为 url 同源</h3><p>当浏览器向服务器发送请求时，会遇到<strong>不同源</strong>的情况：（有关浏览器同源的详细概念可以参考<a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" target=\"_blank\" rel=\"noopener\">阮一峰博客</a>）<br>不同源两种情况下的规避方法：<br>1.服务器同意请求：<br>JSONP：需要后端支持（附上我学习JSONP的相关<a href=\"https://www.jianshu.com/p/2a2fe02917e7\" target=\"_blank\" rel=\"noopener\">博客</a>）<br>CORS(Cross-Origin Resource Sharing)：跨域资源共享（AJAX相关<a href=\"https://www.jianshu.com/p/4591a66c50f5\" target=\"_blank\" rel=\"noopener\">博客</a>）<br>2.服务器不同意请求：<br>利用服务器中转：自己搭建一个服务器，由于服务器访问服务器没有同源要求，可直接访问，自己服务器作为中转，把自己服务器变为情况1，即可通过访问自己服务器再访问到其他服务器相关内容<br>这方面的知识同样可以参考</p>\n<h2 id=\"饥人谷博客-跨域\"><a href=\"#饥人谷博客-跨域\" class=\"headerlink\" title=\"饥人谷博客-跨域\"></a><a href=\"http://book.jirengu.com/fe/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/Javascript/%E8%B7%A8%E5%9F%9F.html\" target=\"_blank\" rel=\"noopener\">饥人谷博客-跨域</a></h2><p>本文仅供个人学习使用</p>\n<p>相关参考及资源链接已在文中标注</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://segmentfault.com/a/1190000006879700\" target=\"_blank\" rel=\"noopener\">从输入URL到页面加载发生了什么</a></p>\n<h2 id=\"什么是Web服务器\"><a href=\"#什么是Web服务器\" class=\"headerlink\" title=\"什么是Web服务器\"></a>什么是Web服务器</h2><p>Web 服务器就是一个软件，这个软件监听某个端口。当一个 HTTP 请求到达这个端口后这个软件会接收到，根据请求的 url 和参数发送响应数据，这些数据可以是：1. 本机文件； 2. 通过可执行程序从数据库获取数据后组装的页面</p>\n<p><strong>让我们用 node 搭建一个简单的服务器</strong></p>\n<p><a href=\"https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_request_end_data_encoding_callback\" target=\"_blank\" rel=\"noopener\">代码相关HTTP文档</a> 遇到相应API再看，不用一个个看，看不完的<br>新建一个名为 server1.js的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过 require(&apos;http&apos;) 来让服务器支持HTTP协议</span><br><span class=\"line\">var http = require(&apos;http&apos;)</span><br><span class=\"line\">//创建服务器请求和响应的函数</span><br><span class=\"line\">var server = http.createServer(function(request, response)&#123;</span><br><span class=\"line\">  //设置一个2秒的计时器</span><br><span class=\"line\">  setTimeout(function()&#123;</span><br><span class=\"line\">    //.setHeader设置文件类型编码等</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;,&apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    //.writeHead返回状态码</span><br><span class=\"line\">    response.writeHead(404, &apos;Not Found&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;gbk&quot; /&gt;&lt;/head&gt;&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;body&gt;&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;h1&gt;你好&lt;/h1&gt;&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;/body&gt;&apos;)</span><br><span class=\"line\">    response.write(&apos;&lt;/html&gt;&apos;)</span><br><span class=\"line\">    //事件&apos;关闭&apos;</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;,2000);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(&apos;open http://localhost:8080&apos;)</span><br><span class=\"line\">//listen(端口)产生HTTP服务器监听链接</span><br><span class=\"line\">server.listen(8080)</span><br></pre></td></tr></table></figure></p>\n<p>用命令行打开server1.js所在目录，node 开启服务器<img src=\"https://upload-images.jianshu.io/upload_images/7094266-59e81063d440a373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>用浏览器打开<a href=\"http://localhost:8080，2秒后就返回页面拉![](https://upload-images.jianshu.io/upload_images/7094266-7bf0b304614ce83f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\" target=\"_blank\" rel=\"noopener\">http://localhost:8080，2秒后就返回页面拉![](https://upload-images.jianshu.io/upload_images/7094266-7bf0b304614ce83f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>至此，你已经用node.js完成了一个简单的服务器搭建，并用浏览器以<a href=\"http://localhost:8080向你的服务器发起请求并成功得到响应了\" target=\"_blank\" rel=\"noopener\">http://localhost:8080向你的服务器发起请求并成功得到响应了</a></p>\n<h3 id=\"静态服务器\"><a href=\"#静态服务器\" class=\"headerlink\" title=\"静态服务器\"></a>静态服务器</h3><p>页面不会变化，展示静态页面<img src=\"http://upload-images.jianshu.io/upload_images/7094266-19e00ec3472ba838.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"><br><strong>同样用node尝试一个简单的静态服务器</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;)</span><br><span class=\"line\">//用来读取内容</span><br><span class=\"line\">var fs = require(&apos;fs&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var server = http.createServer(function(req, res)&#123;</span><br><span class=\"line\">  try&#123;</span><br><span class=\"line\">    //.readFileSync 用于同步读取文件:当前目录下的 hi 文件 下的 目标</span><br><span class=\"line\">    var fileContent = fs.readFileSync(__dirname + &apos;/hi&apos; + req.url)</span><br><span class=\"line\">    res.write(fileContent)</span><br><span class=\"line\">  &#125;catch(e)&#123;</span><br><span class=\"line\">    res.writeHead(404, &apos;not found&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.end()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8080)</span><br><span class=\"line\">console.log(&apos;visit http://localhost:8080&apos; )</span><br></pre></td></tr></table></figure></p>\n<p>我在 hi 文件下新建了一个html文件<img src=\"https://upload-images.jianshu.io/upload_images/7094266-f1c53aa1769fd9ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>命令行<img src=\"https://upload-images.jianshu.io/upload_images/7094266-9dcba127af327a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这次输入的就是<a href=\"http://localhost:8080/index.html![](https://upload-images.jianshu.io/upload_images/7094266-986cc0ea222a9586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)成功拉\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index.html![](https://upload-images.jianshu.io/upload_images/7094266-986cc0ea222a9586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)成功拉</a></p>\n<h3 id=\"动态服务器\"><a href=\"#动态服务器\" class=\"headerlink\" title=\"动态服务器\"></a>动态服务器</h3><p>有个动态软件，可执行动态页面<img src=\"http://upload-images.jianshu.io/upload_images/7094266-47d1ffd2b592f7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"><br>这一部分涉及的知识就多了，无法用简单的小示例完整展现，后续应该会有相关博客</p>\n<h3 id=\"以上例子均为-url-同源\"><a href=\"#以上例子均为-url-同源\" class=\"headerlink\" title=\"以上例子均为 url 同源\"></a>以上例子均为 url 同源</h3><p>当浏览器向服务器发送请求时，会遇到<strong>不同源</strong>的情况：（有关浏览器同源的详细概念可以参考<a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" target=\"_blank\" rel=\"noopener\">阮一峰博客</a>）<br>不同源两种情况下的规避方法：<br>1.服务器同意请求：<br>JSONP：需要后端支持（附上我学习JSONP的相关<a href=\"https://www.jianshu.com/p/2a2fe02917e7\" target=\"_blank\" rel=\"noopener\">博客</a>）<br>CORS(Cross-Origin Resource Sharing)：跨域资源共享（AJAX相关<a href=\"https://www.jianshu.com/p/4591a66c50f5\" target=\"_blank\" rel=\"noopener\">博客</a>）<br>2.服务器不同意请求：<br>利用服务器中转：自己搭建一个服务器，由于服务器访问服务器没有同源要求，可直接访问，自己服务器作为中转，把自己服务器变为情况1，即可通过访问自己服务器再访问到其他服务器相关内容<br>这方面的知识同样可以参考</p>\n<h2 id=\"饥人谷博客-跨域\"><a href=\"#饥人谷博客-跨域\" class=\"headerlink\" title=\"饥人谷博客-跨域\"></a><a href=\"http://book.jirengu.com/fe/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/Javascript/%E8%B7%A8%E5%9F%9F.html\" target=\"_blank\" rel=\"noopener\">饥人谷博客-跨域</a></h2><p>本文仅供个人学习使用</p>\n<p>相关参考及资源链接已在文中标注</p>\n"},{"title":"一些命令行入门学习的知识和细节","date":"2018-06-03T14:26:58.000Z","_content":"# 命令行？\n\n命令行：只有命令，方便\n\nwindows：图形界面\n\n一个程序员应该学会命令行\n\n## 下面是一些简单的知识\n\n命令行里“目录”（对应windows里的“文件夹”）\n\n命令行一些符号\n\n**~**：用户目录\n\n**/** ：整个硬盘\n\n**. **：当前目录\n\n**.. **：副目录\n\n**& **：提示符号，可以改变\n\n**clear** ：清屏\n\n* * *\n\n输入**ls -l **（查看路径）回车得到如下\n\n![](https://upload-images.jianshu.io/upload_images/7094266-bb2e7ac4f4e616ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中：\n\n**d** ：**directory**表示  目录(文件夹)\n\n**r** ：**read**表示  可读\n\n**w**：**write**表示  可写\n\n**x** ：表示 可执行\n\n**- **：表示 不可以\n\n第一组 **rwx** 表示管理员权限，第二组 **rwx** 表示 用户所在组的权限，第三组 **rwx** 是访问权限\n\n**Administer** 表示用户；**197121** 表示用户所在组\n\n* * *\n\n可以用 **touch + 文件名** 创建文件\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c9580aa61009e522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**echo** 和 **touch **均可用来创建文件\n\n区别是 **echo** 可以向创建的文件里追加内容** touch** 只用来创建文件且可以改变文件更新时间\n\n## **命令行快捷键**\n\n↑ ↓ 上一命令 / 下一命令\n\n!! 上一命令占位符\n\n**Tab** 自动补全路径\n\n**Alt+.** 上一命令的最后一个参数\n\n**&&** 前面的执行成功了，再执行后面的\n\n**||** 前面的执行失败了，就执行后面的\n\n**;** 前面执行完了，不管成功失败，就执行后面的\n\n**>** 重定向\n\n**|** 管道\n\n## **如何使用其他命令行**\n\n常用命令网上很多，谷歌一下就有，那么一些不常用的命令如何知道有哪些用法和其含义\n\n命令行中查看选项手册**man**：**manual**\n\nwindows中用**--help**\n\n手册内容太长不想看（用此）[tldr](https://github.com/tldr-pages/tldr#tldr)：**too long didn't read**\n\n还可以用这个网页，命令行[释义](https://explainshell.com/)\n\n点开界面如下\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-0bc203c06c932a7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在搜索框输入要查询的命令\n\n如 **ls**\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-a733fcf7a6a0a3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**list directory contents** 列出目录内容\n\n有些命令可以有参数，如** ls** 有**-l -a**等 \n\n![](https://upload-images.jianshu.io/upload_images/7094266-156ca27401e98309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n是不是很方便？再试试其他的，比如 **mv**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-e5d1b5db9555a3de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**move (rename) files **移动（重命名）文件\n\n以及 **cat**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-356bafdb4d657c15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**concatenate files and print on the standard output **连接文件并打印到标准输出设备上\n\n必要时可以参考教程[cat 菜鸟教程](http://www.runoob.com/linux/linux-comm-cat.html)\n\n* * *\n本文主要用于个人学习使用，如有侵权请联系我删除。","source":"_posts/一些命令行入门学习的知识和细节.md","raw":"---\ntitle: 一些命令行入门学习的知识和细节\ndate: 2018-06-03 22:26:58\ntags:\n---\n# 命令行？\n\n命令行：只有命令，方便\n\nwindows：图形界面\n\n一个程序员应该学会命令行\n\n## 下面是一些简单的知识\n\n命令行里“目录”（对应windows里的“文件夹”）\n\n命令行一些符号\n\n**~**：用户目录\n\n**/** ：整个硬盘\n\n**. **：当前目录\n\n**.. **：副目录\n\n**& **：提示符号，可以改变\n\n**clear** ：清屏\n\n* * *\n\n输入**ls -l **（查看路径）回车得到如下\n\n![](https://upload-images.jianshu.io/upload_images/7094266-bb2e7ac4f4e616ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中：\n\n**d** ：**directory**表示  目录(文件夹)\n\n**r** ：**read**表示  可读\n\n**w**：**write**表示  可写\n\n**x** ：表示 可执行\n\n**- **：表示 不可以\n\n第一组 **rwx** 表示管理员权限，第二组 **rwx** 表示 用户所在组的权限，第三组 **rwx** 是访问权限\n\n**Administer** 表示用户；**197121** 表示用户所在组\n\n* * *\n\n可以用 **touch + 文件名** 创建文件\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c9580aa61009e522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**echo** 和 **touch **均可用来创建文件\n\n区别是 **echo** 可以向创建的文件里追加内容** touch** 只用来创建文件且可以改变文件更新时间\n\n## **命令行快捷键**\n\n↑ ↓ 上一命令 / 下一命令\n\n!! 上一命令占位符\n\n**Tab** 自动补全路径\n\n**Alt+.** 上一命令的最后一个参数\n\n**&&** 前面的执行成功了，再执行后面的\n\n**||** 前面的执行失败了，就执行后面的\n\n**;** 前面执行完了，不管成功失败，就执行后面的\n\n**>** 重定向\n\n**|** 管道\n\n## **如何使用其他命令行**\n\n常用命令网上很多，谷歌一下就有，那么一些不常用的命令如何知道有哪些用法和其含义\n\n命令行中查看选项手册**man**：**manual**\n\nwindows中用**--help**\n\n手册内容太长不想看（用此）[tldr](https://github.com/tldr-pages/tldr#tldr)：**too long didn't read**\n\n还可以用这个网页，命令行[释义](https://explainshell.com/)\n\n点开界面如下\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-0bc203c06c932a7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在搜索框输入要查询的命令\n\n如 **ls**\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-a733fcf7a6a0a3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**list directory contents** 列出目录内容\n\n有些命令可以有参数，如** ls** 有**-l -a**等 \n\n![](https://upload-images.jianshu.io/upload_images/7094266-156ca27401e98309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n是不是很方便？再试试其他的，比如 **mv**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-e5d1b5db9555a3de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**move (rename) files **移动（重命名）文件\n\n以及 **cat**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-356bafdb4d657c15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**concatenate files and print on the standard output **连接文件并打印到标准输出设备上\n\n必要时可以参考教程[cat 菜鸟教程](http://www.runoob.com/linux/linux-comm-cat.html)\n\n* * *\n本文主要用于个人学习使用，如有侵权请联系我删除。","slug":"一些命令行入门学习的知识和细节","published":1,"updated":"2019-01-22T14:03:35.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvo000hhw99zf6dcr9f","content":"<h1 id=\"命令行？\"><a href=\"#命令行？\" class=\"headerlink\" title=\"命令行？\"></a>命令行？</h1><p>命令行：只有命令，方便</p>\n<p>windows：图形界面</p>\n<p>一个程序员应该学会命令行</p>\n<h2 id=\"下面是一些简单的知识\"><a href=\"#下面是一些简单的知识\" class=\"headerlink\" title=\"下面是一些简单的知识\"></a>下面是一些简单的知识</h2><p>命令行里“目录”（对应windows里的“文件夹”）</p>\n<p>命令行一些符号</p>\n<p><strong>~</strong>：用户目录</p>\n<p><strong>/</strong> ：整个硬盘</p>\n<p><strong>. </strong>：当前目录</p>\n<p><strong>.. </strong>：副目录</p>\n<p><strong>&amp; </strong>：提示符号，可以改变</p>\n<p><strong>clear</strong> ：清屏</p>\n<hr>\n<p>输入<strong>ls -l </strong>（查看路径）回车得到如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-bb2e7ac4f4e616ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>其中：</p>\n<p><strong>d</strong> ：<strong>directory</strong>表示  目录(文件夹)</p>\n<p><strong>r</strong> ：<strong>read</strong>表示  可读</p>\n<p><strong>w</strong>：<strong>write</strong>表示  可写</p>\n<p><strong>x</strong> ：表示 可执行</p>\n<p><strong>- </strong>：表示 不可以</p>\n<p>第一组 <strong>rwx</strong> 表示管理员权限，第二组 <strong>rwx</strong> 表示 用户所在组的权限，第三组 <strong>rwx</strong> 是访问权限</p>\n<p><strong>Administer</strong> 表示用户；<strong>197121</strong> 表示用户所在组</p>\n<hr>\n<p>可以用 <strong>touch + 文件名</strong> 创建文件</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c9580aa61009e522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>echo</strong> 和 <strong>touch </strong>均可用来创建文件</p>\n<p>区别是 <strong>echo</strong> 可以向创建的文件里追加内容<strong> touch</strong> 只用来创建文件且可以改变文件更新时间</p>\n<h2 id=\"命令行快捷键\"><a href=\"#命令行快捷键\" class=\"headerlink\" title=\"命令行快捷键\"></a><strong>命令行快捷键</strong></h2><p>↑ ↓ 上一命令 / 下一命令</p>\n<p>!! 上一命令占位符</p>\n<p><strong>Tab</strong> 自动补全路径</p>\n<p><strong>Alt+.</strong> 上一命令的最后一个参数</p>\n<p><strong>&amp;&amp;</strong> 前面的执行成功了，再执行后面的</p>\n<p><strong>||</strong> 前面的执行失败了，就执行后面的</p>\n<p><strong>;</strong> 前面执行完了，不管成功失败，就执行后面的</p>\n<p><strong>&gt;</strong> 重定向</p>\n<p><strong>|</strong> 管道</p>\n<h2 id=\"如何使用其他命令行\"><a href=\"#如何使用其他命令行\" class=\"headerlink\" title=\"如何使用其他命令行\"></a><strong>如何使用其他命令行</strong></h2><p>常用命令网上很多，谷歌一下就有，那么一些不常用的命令如何知道有哪些用法和其含义</p>\n<p>命令行中查看选项手册<strong>man</strong>：<strong>manual</strong></p>\n<p>windows中用<strong>–help</strong></p>\n<p>手册内容太长不想看（用此）<a href=\"https://github.com/tldr-pages/tldr#tldr\" target=\"_blank\" rel=\"noopener\">tldr</a>：<strong>too long didn’t read</strong></p>\n<p>还可以用这个网页，命令行<a href=\"https://explainshell.com/\" target=\"_blank\" rel=\"noopener\">释义</a></p>\n<p>点开界面如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0bc203c06c932a7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>在搜索框输入要查询的命令</p>\n<p>如 <strong>ls</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a733fcf7a6a0a3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>list directory contents</strong> 列出目录内容</p>\n<p>有些命令可以有参数，如<strong> ls</strong> 有<strong>-l -a</strong>等 </p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-156ca27401e98309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>是不是很方便？再试试其他的，比如 <strong>mv</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-e5d1b5db9555a3de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>move (rename) files </strong>移动（重命名）文件</p>\n<p>以及 <strong>cat</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-356bafdb4d657c15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>concatenate files and print on the standard output </strong>连接文件并打印到标准输出设备上</p>\n<p>必要时可以参考教程<a href=\"http://www.runoob.com/linux/linux-comm-cat.html\" target=\"_blank\" rel=\"noopener\">cat 菜鸟教程</a></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"命令行？\"><a href=\"#命令行？\" class=\"headerlink\" title=\"命令行？\"></a>命令行？</h1><p>命令行：只有命令，方便</p>\n<p>windows：图形界面</p>\n<p>一个程序员应该学会命令行</p>\n<h2 id=\"下面是一些简单的知识\"><a href=\"#下面是一些简单的知识\" class=\"headerlink\" title=\"下面是一些简单的知识\"></a>下面是一些简单的知识</h2><p>命令行里“目录”（对应windows里的“文件夹”）</p>\n<p>命令行一些符号</p>\n<p><strong>~</strong>：用户目录</p>\n<p><strong>/</strong> ：整个硬盘</p>\n<p><strong>. </strong>：当前目录</p>\n<p><strong>.. </strong>：副目录</p>\n<p><strong>&amp; </strong>：提示符号，可以改变</p>\n<p><strong>clear</strong> ：清屏</p>\n<hr>\n<p>输入<strong>ls -l </strong>（查看路径）回车得到如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-bb2e7ac4f4e616ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>其中：</p>\n<p><strong>d</strong> ：<strong>directory</strong>表示  目录(文件夹)</p>\n<p><strong>r</strong> ：<strong>read</strong>表示  可读</p>\n<p><strong>w</strong>：<strong>write</strong>表示  可写</p>\n<p><strong>x</strong> ：表示 可执行</p>\n<p><strong>- </strong>：表示 不可以</p>\n<p>第一组 <strong>rwx</strong> 表示管理员权限，第二组 <strong>rwx</strong> 表示 用户所在组的权限，第三组 <strong>rwx</strong> 是访问权限</p>\n<p><strong>Administer</strong> 表示用户；<strong>197121</strong> 表示用户所在组</p>\n<hr>\n<p>可以用 <strong>touch + 文件名</strong> 创建文件</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c9580aa61009e522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>echo</strong> 和 <strong>touch </strong>均可用来创建文件</p>\n<p>区别是 <strong>echo</strong> 可以向创建的文件里追加内容<strong> touch</strong> 只用来创建文件且可以改变文件更新时间</p>\n<h2 id=\"命令行快捷键\"><a href=\"#命令行快捷键\" class=\"headerlink\" title=\"命令行快捷键\"></a><strong>命令行快捷键</strong></h2><p>↑ ↓ 上一命令 / 下一命令</p>\n<p>!! 上一命令占位符</p>\n<p><strong>Tab</strong> 自动补全路径</p>\n<p><strong>Alt+.</strong> 上一命令的最后一个参数</p>\n<p><strong>&amp;&amp;</strong> 前面的执行成功了，再执行后面的</p>\n<p><strong>||</strong> 前面的执行失败了，就执行后面的</p>\n<p><strong>;</strong> 前面执行完了，不管成功失败，就执行后面的</p>\n<p><strong>&gt;</strong> 重定向</p>\n<p><strong>|</strong> 管道</p>\n<h2 id=\"如何使用其他命令行\"><a href=\"#如何使用其他命令行\" class=\"headerlink\" title=\"如何使用其他命令行\"></a><strong>如何使用其他命令行</strong></h2><p>常用命令网上很多，谷歌一下就有，那么一些不常用的命令如何知道有哪些用法和其含义</p>\n<p>命令行中查看选项手册<strong>man</strong>：<strong>manual</strong></p>\n<p>windows中用<strong>–help</strong></p>\n<p>手册内容太长不想看（用此）<a href=\"https://github.com/tldr-pages/tldr#tldr\" target=\"_blank\" rel=\"noopener\">tldr</a>：<strong>too long didn’t read</strong></p>\n<p>还可以用这个网页，命令行<a href=\"https://explainshell.com/\" target=\"_blank\" rel=\"noopener\">释义</a></p>\n<p>点开界面如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0bc203c06c932a7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>在搜索框输入要查询的命令</p>\n<p>如 <strong>ls</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a733fcf7a6a0a3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>list directory contents</strong> 列出目录内容</p>\n<p>有些命令可以有参数，如<strong> ls</strong> 有<strong>-l -a</strong>等 </p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-156ca27401e98309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>是不是很方便？再试试其他的，比如 <strong>mv</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-e5d1b5db9555a3de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>move (rename) files </strong>移动（重命名）文件</p>\n<p>以及 <strong>cat</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-356bafdb4d657c15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>concatenate files and print on the standard output </strong>连接文件并打印到标准输出设备上</p>\n<p>必要时可以参考教程<a href=\"http://www.runoob.com/linux/linux-comm-cat.html\" target=\"_blank\" rel=\"noopener\">cat 菜鸟教程</a></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n"},{"title":"实现一个AJAX","date":"2018-08-12T04:28:53.000Z","_content":"[AJAX是什么鬼](https://www.jianshu.com/p/4591a66c50f5) 续篇\n# 今天我们给AJAX封装一下\n\n之前写了篇有关用原生JS写jQuery的[博客](https://www.jianshu.com/p/7e663286cb35)\n下面是相关主要代码\n```\nwindow.jQuery = function (nodeOrSelector) {\n    let nodes = {}\n    nodes.addClass = function () {}\n    nodes.html = function () {}\n    return nodes\n}\n```\n事实上就是用函数给代码封装一下并设定相关参数\n```\nwindow.jQuery.ajax = function (url, method, body, succseeFn, failFn) {\n    let request = new XMLHttpRequest()\n    //初始化请求\n    request.open(method, url)\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            if (request.status >= 200 && request.status < 300) {\n                succseeFn.call(undefined, request.responseText)\n            } else if (request.status >= 400) {\n                failFn.call(undefined, request)\n            }\n        }\n    }\n    request.send(body)\n}\n```\n```\nwindow.$ = window.jQuery\n```\n可以使用$.ajax了\n```\nmyButton.addEventListener('click', (e) => {\n    $.ajax(\n        '/ada',\n        'post',\n        'a=1&b=2',\n        (responseText) => {\n            console.log('s')\n        },\n        (request) => {\n            console.log('f')\n        })\n})\n```\n**但是这个$.ajax依然有问题**\n1.给定的参数顺序太死\n如果我不传其中一个参数，就需要给这个参数所在位置占位，如若method是'get'，就不返回body，那就需要用undefined等占位\n```\n'/ada',\n'post',\n//null，undefined或'' 占位\n'',\n(responseText) => {\n      console.log('s')\n},\n(request) => {\n      console.log('f')\n})\n```\n2.无法直观解释参数意思。\n比如上面代码，如果你没看过前面内容或者原生JS代码，你都不知道这些参数分别表达的是什么意思。\n\n**解决方法：给参数命名呗**\n```\nwindow.jQuery.ajax = function (options) {\n    //给参数一个选项\n    let method = options.method\n    let url = options.url\n    let body = options.body\n    let succseeFn = options.succseeFn\n    let failFn = options.failFn\n\n    let request = new XMLHttpRequest()\n    //初始化请求\n    request.open(method, url)\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            if (request.status >= 200 && request.status < 300) {\n                succseeFn.call(undefined, request.responseText)\n            } else if (request.status >= 400) {\n                failFn.call(undefined, request)\n            }\n        }\n    }\n    request.send(body)\n}\n\nmyButton.addEventListener('click', (e) => {\n    //以对象的形式传参数\n    $.ajax({\n        url: '/ada',\n        method: 'post',\n        body: 'a=1&b=2',\n        succseeFn: (responseText) => {\n            console.log('s')\n        },\n        failFn: (request) => {\n            console.log('f')\n        }\n    })\n})\n```\n**加一个 setRequestHeader：设置请求第二部分**\n```\nheaders: {\n    'content-type':'application/x-www-form-urlencoded'\n}\n```\n$.ajax 部分遍历一下 headers\n```\nlet headers = options.headers\n//下面代码放在 requset.open() 后\nfor (let key in headers) {\n    let value = headers[key]\n    request.setRequestHeader(key, value)\n}\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-5f2a6c8a84d872fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**如何向 $.ajax 传两个参数：如 jQuery.ajax( url [, options ] )**\n```\nlet url\nif(arguments.length === 1){\n    url = options.url\n}else if(arguments.length === 2){\n    url = arguments[0]\n    options = arguments[1]\n}\n```\n现在我们的$.ajax 已经和jQuery的一样了\n\n---\n**优化一下代码，先不管两个参数那个**\n\n**1.ES6的 [解构赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)**\n```\n//这6行代码太丑了\nlet url= options\nlet method = options.method\nlet body = options.body\nlet succseeFn = options.succseeFn\nlet failFn = options.failFn\nlet headers = options.headers\n//用ES6解构赋值,上面代码等价于\nlet = {url,method,body,headers,successFn,failFn} = options \n```\n可以不要 options 了\n```\nwindow.jQuery.ajax = function ({url,method,body,headers,succseeFn,failFn}){}\n```\n**2.Promise，相关知识可以[参考](http://es6.ruanyifeng.com/#docs/promise)**\n之前我们给参数命名了，我是知道了这个参数代表什么。\n但是每个人的命名都会不一样，比如 jQuery 的 ajax 对响应成功的命名就是 success 而我的是 successFn。\n这对于不熟悉对应文档的人来说，使用十分不便。\n针对这个问题，就有了 Promise\nPromise的形式\n```\nwindow.Promise = function(fn){\n    //...\n    return {\n        then:function(){}\n    }\n}\n```\n用Promise函数：resolve,reject 替换 successFn 和 failFn，这个两个参数是ES6规定的，这样就不会有上述问题了\nreturn new Promise(function(resolve,reject){})\n```\nwindow.jQuery.ajax = function ({url,method,body,headers}) {\n    //之前代码返回值是 undefined，我们return一个Promise\n    return new Promise(function(resolve,reject){\n        let request = new XMLHttpRequest()\n    //初始化请求\n    request.open(method, url)\n    for (let key in headers) {\n        let value = headers[key]\n        request.setRequestHeader(key, value)\n    }\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            if (request.status >= 200 && request.status < 300) {\n                // successFn 就由 resove 代替了\n                resolve.call(undefined, request.responseText)\n            } else if (request.status >= 400) {\n                // failFn 就由 reject 代替了\n                reject.call(undefined, request)\n            }\n        }\n    }\n    request.send(body)\n    })\n}\n\nwindow.$ = window.jQuery\n\nmyButton.addEventListener('click', (e) => {\n    //以对象的形式传参数\n    $.ajax({\n        url: '/ada',\n        method: 'post',\n        headers: {\n            'content-type': 'application/x-www-form-urlencoded',\n            'ada': '18'\n        }\n    }).then(\n        //成功后执行的代码\n        (responseText)=>{console.log(responseText)},\n        //失败后执行的代码\n        (request)=>{console.log(request)}\n      )\n})\n```\nthen 后再 then\n```\n.then(\n    //成功后执行的代码\n    (responseText)=>{console.log(responseText);return '处理成功'}, \n    //失败后执行的代码\n    (request)=>{console.log(request);return '处理失败'}\n    ).then(\n    //上一次成功后的return\n    (responseText)=>{console.log(responseText)},\n    //上一次失败后的return\n    (request)=>{console.log(request)}\n)\n```\n可以看下结果![](https://upload-images.jianshu.io/upload_images/7094266-46960dc591ffab15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n完整代码请看 [github](https://github.com/Adashuai5/node-demo/tree/master/jQuery.AJAX)\n\n\n---\n#小记\n**AJAX 的所有功能**\n客户端的JS发起请求（浏览器上的）\n服务端的JS发送响应（Node.js上的）\n**1.JS 可以设置任意请求 header**\n第一部分 request.open(method, url)\n第二部分 request.setRequstHeader('content-type','application/x-www-form-urlencoded')\n第四部分 request.send(body)\n**2.JS 可以获取任意响应 header**\n第一部分 request.status / request.statusText\n第二部分 request.getResponseHeader() / request.getAllResponseHeaders()\n第四部分 request.responseText\n图解![](https://upload-images.jianshu.io/upload_images/7094266-82d62fca23713ea1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**有关回调 (callback:打电话回来)：**\n```\nsuccseeFn.call(undefined, request.responseText)\n//这种形式就是回调\nsuccseeFn: () => {}\n```\n**promise 的 .then() 和 .then().then() 理解**\n```\n.then(\n  fn1,fn2\n).then(\n  fn3,fn4\n  )\n\n```\n.then( , ) 逗号左边为成功执行，右边为失败执行 \n我们可以称第一个： **.then( fn1 , fn2 )**为第一负责人；第二个： **.then( fn3 , fn4 )**为第二负责人\n第一负责人成功则执行 fn1 ，失败则执行 fn2；第一负责人处理完成处理则第二负责人执行 fn3 ，处理不好（如代码有问题）则执行 fn4\n---\n本文仅供个人学习使用","source":"_posts/实现一个AJAX.md","raw":"---\ntitle: 实现一个AJAX\ndate: 2018-08-12 12:28:53\ntags:\n---\n[AJAX是什么鬼](https://www.jianshu.com/p/4591a66c50f5) 续篇\n# 今天我们给AJAX封装一下\n\n之前写了篇有关用原生JS写jQuery的[博客](https://www.jianshu.com/p/7e663286cb35)\n下面是相关主要代码\n```\nwindow.jQuery = function (nodeOrSelector) {\n    let nodes = {}\n    nodes.addClass = function () {}\n    nodes.html = function () {}\n    return nodes\n}\n```\n事实上就是用函数给代码封装一下并设定相关参数\n```\nwindow.jQuery.ajax = function (url, method, body, succseeFn, failFn) {\n    let request = new XMLHttpRequest()\n    //初始化请求\n    request.open(method, url)\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            if (request.status >= 200 && request.status < 300) {\n                succseeFn.call(undefined, request.responseText)\n            } else if (request.status >= 400) {\n                failFn.call(undefined, request)\n            }\n        }\n    }\n    request.send(body)\n}\n```\n```\nwindow.$ = window.jQuery\n```\n可以使用$.ajax了\n```\nmyButton.addEventListener('click', (e) => {\n    $.ajax(\n        '/ada',\n        'post',\n        'a=1&b=2',\n        (responseText) => {\n            console.log('s')\n        },\n        (request) => {\n            console.log('f')\n        })\n})\n```\n**但是这个$.ajax依然有问题**\n1.给定的参数顺序太死\n如果我不传其中一个参数，就需要给这个参数所在位置占位，如若method是'get'，就不返回body，那就需要用undefined等占位\n```\n'/ada',\n'post',\n//null，undefined或'' 占位\n'',\n(responseText) => {\n      console.log('s')\n},\n(request) => {\n      console.log('f')\n})\n```\n2.无法直观解释参数意思。\n比如上面代码，如果你没看过前面内容或者原生JS代码，你都不知道这些参数分别表达的是什么意思。\n\n**解决方法：给参数命名呗**\n```\nwindow.jQuery.ajax = function (options) {\n    //给参数一个选项\n    let method = options.method\n    let url = options.url\n    let body = options.body\n    let succseeFn = options.succseeFn\n    let failFn = options.failFn\n\n    let request = new XMLHttpRequest()\n    //初始化请求\n    request.open(method, url)\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            if (request.status >= 200 && request.status < 300) {\n                succseeFn.call(undefined, request.responseText)\n            } else if (request.status >= 400) {\n                failFn.call(undefined, request)\n            }\n        }\n    }\n    request.send(body)\n}\n\nmyButton.addEventListener('click', (e) => {\n    //以对象的形式传参数\n    $.ajax({\n        url: '/ada',\n        method: 'post',\n        body: 'a=1&b=2',\n        succseeFn: (responseText) => {\n            console.log('s')\n        },\n        failFn: (request) => {\n            console.log('f')\n        }\n    })\n})\n```\n**加一个 setRequestHeader：设置请求第二部分**\n```\nheaders: {\n    'content-type':'application/x-www-form-urlencoded'\n}\n```\n$.ajax 部分遍历一下 headers\n```\nlet headers = options.headers\n//下面代码放在 requset.open() 后\nfor (let key in headers) {\n    let value = headers[key]\n    request.setRequestHeader(key, value)\n}\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-5f2a6c8a84d872fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**如何向 $.ajax 传两个参数：如 jQuery.ajax( url [, options ] )**\n```\nlet url\nif(arguments.length === 1){\n    url = options.url\n}else if(arguments.length === 2){\n    url = arguments[0]\n    options = arguments[1]\n}\n```\n现在我们的$.ajax 已经和jQuery的一样了\n\n---\n**优化一下代码，先不管两个参数那个**\n\n**1.ES6的 [解构赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)**\n```\n//这6行代码太丑了\nlet url= options\nlet method = options.method\nlet body = options.body\nlet succseeFn = options.succseeFn\nlet failFn = options.failFn\nlet headers = options.headers\n//用ES6解构赋值,上面代码等价于\nlet = {url,method,body,headers,successFn,failFn} = options \n```\n可以不要 options 了\n```\nwindow.jQuery.ajax = function ({url,method,body,headers,succseeFn,failFn}){}\n```\n**2.Promise，相关知识可以[参考](http://es6.ruanyifeng.com/#docs/promise)**\n之前我们给参数命名了，我是知道了这个参数代表什么。\n但是每个人的命名都会不一样，比如 jQuery 的 ajax 对响应成功的命名就是 success 而我的是 successFn。\n这对于不熟悉对应文档的人来说，使用十分不便。\n针对这个问题，就有了 Promise\nPromise的形式\n```\nwindow.Promise = function(fn){\n    //...\n    return {\n        then:function(){}\n    }\n}\n```\n用Promise函数：resolve,reject 替换 successFn 和 failFn，这个两个参数是ES6规定的，这样就不会有上述问题了\nreturn new Promise(function(resolve,reject){})\n```\nwindow.jQuery.ajax = function ({url,method,body,headers}) {\n    //之前代码返回值是 undefined，我们return一个Promise\n    return new Promise(function(resolve,reject){\n        let request = new XMLHttpRequest()\n    //初始化请求\n    request.open(method, url)\n    for (let key in headers) {\n        let value = headers[key]\n        request.setRequestHeader(key, value)\n    }\n    request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n            if (request.status >= 200 && request.status < 300) {\n                // successFn 就由 resove 代替了\n                resolve.call(undefined, request.responseText)\n            } else if (request.status >= 400) {\n                // failFn 就由 reject 代替了\n                reject.call(undefined, request)\n            }\n        }\n    }\n    request.send(body)\n    })\n}\n\nwindow.$ = window.jQuery\n\nmyButton.addEventListener('click', (e) => {\n    //以对象的形式传参数\n    $.ajax({\n        url: '/ada',\n        method: 'post',\n        headers: {\n            'content-type': 'application/x-www-form-urlencoded',\n            'ada': '18'\n        }\n    }).then(\n        //成功后执行的代码\n        (responseText)=>{console.log(responseText)},\n        //失败后执行的代码\n        (request)=>{console.log(request)}\n      )\n})\n```\nthen 后再 then\n```\n.then(\n    //成功后执行的代码\n    (responseText)=>{console.log(responseText);return '处理成功'}, \n    //失败后执行的代码\n    (request)=>{console.log(request);return '处理失败'}\n    ).then(\n    //上一次成功后的return\n    (responseText)=>{console.log(responseText)},\n    //上一次失败后的return\n    (request)=>{console.log(request)}\n)\n```\n可以看下结果![](https://upload-images.jianshu.io/upload_images/7094266-46960dc591ffab15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n完整代码请看 [github](https://github.com/Adashuai5/node-demo/tree/master/jQuery.AJAX)\n\n\n---\n#小记\n**AJAX 的所有功能**\n客户端的JS发起请求（浏览器上的）\n服务端的JS发送响应（Node.js上的）\n**1.JS 可以设置任意请求 header**\n第一部分 request.open(method, url)\n第二部分 request.setRequstHeader('content-type','application/x-www-form-urlencoded')\n第四部分 request.send(body)\n**2.JS 可以获取任意响应 header**\n第一部分 request.status / request.statusText\n第二部分 request.getResponseHeader() / request.getAllResponseHeaders()\n第四部分 request.responseText\n图解![](https://upload-images.jianshu.io/upload_images/7094266-82d62fca23713ea1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**有关回调 (callback:打电话回来)：**\n```\nsuccseeFn.call(undefined, request.responseText)\n//这种形式就是回调\nsuccseeFn: () => {}\n```\n**promise 的 .then() 和 .then().then() 理解**\n```\n.then(\n  fn1,fn2\n).then(\n  fn3,fn4\n  )\n\n```\n.then( , ) 逗号左边为成功执行，右边为失败执行 \n我们可以称第一个： **.then( fn1 , fn2 )**为第一负责人；第二个： **.then( fn3 , fn4 )**为第二负责人\n第一负责人成功则执行 fn1 ，失败则执行 fn2；第一负责人处理完成处理则第二负责人执行 fn3 ，处理不好（如代码有问题）则执行 fn4\n---\n本文仅供个人学习使用","slug":"实现一个AJAX","published":1,"updated":"2019-01-22T13:43:40.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvo000ihw997x72fq32","content":"<p><a href=\"https://www.jianshu.com/p/4591a66c50f5\" target=\"_blank\" rel=\"noopener\">AJAX是什么鬼</a> 续篇</p>\n<h1 id=\"今天我们给AJAX封装一下\"><a href=\"#今天我们给AJAX封装一下\" class=\"headerlink\" title=\"今天我们给AJAX封装一下\"></a>今天我们给AJAX封装一下</h1><p>之前写了篇有关用原生JS写jQuery的<a href=\"https://www.jianshu.com/p/7e663286cb35\" target=\"_blank\" rel=\"noopener\">博客</a><br>下面是相关主要代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = function (nodeOrSelector) &#123;</span><br><span class=\"line\">    let nodes = &#123;&#125;</span><br><span class=\"line\">    nodes.addClass = function () &#123;&#125;</span><br><span class=\"line\">    nodes.html = function () &#123;&#125;</span><br><span class=\"line\">    return nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>事实上就是用函数给代码封装一下并设定相关参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery.ajax = function (url, method, body, succseeFn, failFn) &#123;</span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    //初始化请求</span><br><span class=\"line\">    request.open(method, url)</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                succseeFn.call(undefined, request.responseText)</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                failFn.call(undefined, request)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.send(body)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.$ = window.jQuery</span><br></pre></td></tr></table></figure>\n<p>可以使用$.ajax了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    $.ajax(</span><br><span class=\"line\">        &apos;/ada&apos;,</span><br><span class=\"line\">        &apos;post&apos;,</span><br><span class=\"line\">        &apos;a=1&amp;b=2&apos;,</span><br><span class=\"line\">        (responseText) =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;s&apos;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        (request) =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;f&apos;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>但是这个$.ajax依然有问题</strong><br>1.给定的参数顺序太死<br>如果我不传其中一个参数，就需要给这个参数所在位置占位，如若method是’get’，就不返回body，那就需要用undefined等占位<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;/ada&apos;,</span><br><span class=\"line\">&apos;post&apos;,</span><br><span class=\"line\">//null，undefined或&apos;&apos; 占位</span><br><span class=\"line\">&apos;&apos;,</span><br><span class=\"line\">(responseText) =&gt; &#123;</span><br><span class=\"line\">      console.log(&apos;s&apos;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">(request) =&gt; &#123;</span><br><span class=\"line\">      console.log(&apos;f&apos;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>2.无法直观解释参数意思。<br>比如上面代码，如果你没看过前面内容或者原生JS代码，你都不知道这些参数分别表达的是什么意思。</p>\n<p><strong>解决方法：给参数命名呗</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery.ajax = function (options) &#123;</span><br><span class=\"line\">    //给参数一个选项</span><br><span class=\"line\">    let method = options.method</span><br><span class=\"line\">    let url = options.url</span><br><span class=\"line\">    let body = options.body</span><br><span class=\"line\">    let succseeFn = options.succseeFn</span><br><span class=\"line\">    let failFn = options.failFn</span><br><span class=\"line\"></span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    //初始化请求</span><br><span class=\"line\">    request.open(method, url)</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                succseeFn.call(undefined, request.responseText)</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                failFn.call(undefined, request)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.send(body)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    //以对象的形式传参数</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: &apos;/ada&apos;,</span><br><span class=\"line\">        method: &apos;post&apos;,</span><br><span class=\"line\">        body: &apos;a=1&amp;b=2&apos;,</span><br><span class=\"line\">        succseeFn: (responseText) =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;s&apos;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        failFn: (request) =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;f&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>加一个 setRequestHeader：设置请求第二部分</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">headers: &#123;</span><br><span class=\"line\">    &apos;content-type&apos;:&apos;application/x-www-form-urlencoded&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>$.ajax 部分遍历一下 headers<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let headers = options.headers</span><br><span class=\"line\">//下面代码放在 requset.open() 后</span><br><span class=\"line\">for (let key in headers) &#123;</span><br><span class=\"line\">    let value = headers[key]</span><br><span class=\"line\">    request.setRequestHeader(key, value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5f2a6c8a84d872fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>如何向 $.ajax 传两个参数：如 jQuery.ajax( url [, options ] )</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url</span><br><span class=\"line\">if(arguments.length === 1)&#123;</span><br><span class=\"line\">    url = options.url</span><br><span class=\"line\">&#125;else if(arguments.length === 2)&#123;</span><br><span class=\"line\">    url = arguments[0]</span><br><span class=\"line\">    options = arguments[1]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们的$.ajax 已经和jQuery的一样了</p>\n<hr>\n<p><strong>优化一下代码，先不管两个参数那个</strong></p>\n<p><strong>1.ES6的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">解构赋值</a></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这6行代码太丑了</span><br><span class=\"line\">let url= options</span><br><span class=\"line\">let method = options.method</span><br><span class=\"line\">let body = options.body</span><br><span class=\"line\">let succseeFn = options.succseeFn</span><br><span class=\"line\">let failFn = options.failFn</span><br><span class=\"line\">let headers = options.headers</span><br><span class=\"line\">//用ES6解构赋值,上面代码等价于</span><br><span class=\"line\">let = &#123;url,method,body,headers,successFn,failFn&#125; = options</span><br></pre></td></tr></table></figure></p>\n<p>可以不要 options 了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery.ajax = function (&#123;url,method,body,headers,succseeFn,failFn&#125;)&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.Promise，相关知识可以<a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">参考</a></strong><br>之前我们给参数命名了，我是知道了这个参数代表什么。<br>但是每个人的命名都会不一样，比如 jQuery 的 ajax 对响应成功的命名就是 success 而我的是 successFn。<br>这对于不熟悉对应文档的人来说，使用十分不便。<br>针对这个问题，就有了 Promise<br>Promise的形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.Promise = function(fn)&#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        then:function()&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用Promise函数：resolve,reject 替换 successFn 和 failFn，这个两个参数是ES6规定的，这样就不会有上述问题了<br>return new Promise(function(resolve,reject){})<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery.ajax = function (&#123;url,method,body,headers&#125;) &#123;</span><br><span class=\"line\">    //之前代码返回值是 undefined，我们return一个Promise</span><br><span class=\"line\">    return new Promise(function(resolve,reject)&#123;</span><br><span class=\"line\">        let request = new XMLHttpRequest()</span><br><span class=\"line\">    //初始化请求</span><br><span class=\"line\">    request.open(method, url)</span><br><span class=\"line\">    for (let key in headers) &#123;</span><br><span class=\"line\">        let value = headers[key]</span><br><span class=\"line\">        request.setRequestHeader(key, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                // successFn 就由 resove 代替了</span><br><span class=\"line\">                resolve.call(undefined, request.responseText)</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                // failFn 就由 reject 代替了</span><br><span class=\"line\">                reject.call(undefined, request)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.send(body)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">window.$ = window.jQuery</span><br><span class=\"line\"></span><br><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    //以对象的形式传参数</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: &apos;/ada&apos;,</span><br><span class=\"line\">        method: &apos;post&apos;,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">            &apos;content-type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class=\"line\">            &apos;ada&apos;: &apos;18&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).then(</span><br><span class=\"line\">        //成功后执行的代码</span><br><span class=\"line\">        (responseText)=&gt;&#123;console.log(responseText)&#125;,</span><br><span class=\"line\">        //失败后执行的代码</span><br><span class=\"line\">        (request)=&gt;&#123;console.log(request)&#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>then 后再 then<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.then(</span><br><span class=\"line\">    //成功后执行的代码</span><br><span class=\"line\">    (responseText)=&gt;&#123;console.log(responseText);return &apos;处理成功&apos;&#125;, </span><br><span class=\"line\">    //失败后执行的代码</span><br><span class=\"line\">    (request)=&gt;&#123;console.log(request);return &apos;处理失败&apos;&#125;</span><br><span class=\"line\">    ).then(</span><br><span class=\"line\">    //上一次成功后的return</span><br><span class=\"line\">    (responseText)=&gt;&#123;console.log(responseText)&#125;,</span><br><span class=\"line\">    //上一次失败后的return</span><br><span class=\"line\">    (request)=&gt;&#123;console.log(request)&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>可以看下结果<img src=\"https://upload-images.jianshu.io/upload_images/7094266-46960dc591ffab15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>完整代码请看 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/jQuery.AJAX\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<hr>\n<p>#小记<br><strong>AJAX 的所有功能</strong><br>客户端的JS发起请求（浏览器上的）<br>服务端的JS发送响应（Node.js上的）<br><strong>1.JS 可以设置任意请求 header</strong><br>第一部分 request.open(method, url)<br>第二部分 request.setRequstHeader(‘content-type’,’application/x-www-form-urlencoded’)<br>第四部分 request.send(body)<br><strong>2.JS 可以获取任意响应 header</strong><br>第一部分 request.status / request.statusText<br>第二部分 request.getResponseHeader() / request.getAllResponseHeaders()<br>第四部分 request.responseText<br>图解<img src=\"https://upload-images.jianshu.io/upload_images/7094266-82d62fca23713ea1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>有关回调 (callback:打电话回来)：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">succseeFn.call(undefined, request.responseText)</span><br><span class=\"line\">//这种形式就是回调</span><br><span class=\"line\">succseeFn: () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>promise 的 .then() 和 .then().then() 理解</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.then(</span><br><span class=\"line\">  fn1,fn2</span><br><span class=\"line\">).then(</span><br><span class=\"line\">  fn3,fn4</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure></p>\n<p>.then( , ) 逗号左边为成功执行，右边为失败执行<br>我们可以称第一个： <strong>.then( fn1 , fn2 )</strong>为第一负责人；第二个： <strong>.then( fn3 , fn4 )</strong>为第二负责人</p>\n<h2 id=\"第一负责人成功则执行-fn1-，失败则执行-fn2；第一负责人处理完成处理则第二负责人执行-fn3-，处理不好（如代码有问题）则执行-fn4\"><a href=\"#第一负责人成功则执行-fn1-，失败则执行-fn2；第一负责人处理完成处理则第二负责人执行-fn3-，处理不好（如代码有问题）则执行-fn4\" class=\"headerlink\" title=\"第一负责人成功则执行 fn1 ，失败则执行 fn2；第一负责人处理完成处理则第二负责人执行 fn3 ，处理不好（如代码有问题）则执行 fn4\"></a>第一负责人成功则执行 fn1 ，失败则执行 fn2；第一负责人处理完成处理则第二负责人执行 fn3 ，处理不好（如代码有问题）则执行 fn4</h2><p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.jianshu.com/p/4591a66c50f5\" target=\"_blank\" rel=\"noopener\">AJAX是什么鬼</a> 续篇</p>\n<h1 id=\"今天我们给AJAX封装一下\"><a href=\"#今天我们给AJAX封装一下\" class=\"headerlink\" title=\"今天我们给AJAX封装一下\"></a>今天我们给AJAX封装一下</h1><p>之前写了篇有关用原生JS写jQuery的<a href=\"https://www.jianshu.com/p/7e663286cb35\" target=\"_blank\" rel=\"noopener\">博客</a><br>下面是相关主要代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = function (nodeOrSelector) &#123;</span><br><span class=\"line\">    let nodes = &#123;&#125;</span><br><span class=\"line\">    nodes.addClass = function () &#123;&#125;</span><br><span class=\"line\">    nodes.html = function () &#123;&#125;</span><br><span class=\"line\">    return nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>事实上就是用函数给代码封装一下并设定相关参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery.ajax = function (url, method, body, succseeFn, failFn) &#123;</span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    //初始化请求</span><br><span class=\"line\">    request.open(method, url)</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                succseeFn.call(undefined, request.responseText)</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                failFn.call(undefined, request)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.send(body)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.$ = window.jQuery</span><br></pre></td></tr></table></figure>\n<p>可以使用$.ajax了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    $.ajax(</span><br><span class=\"line\">        &apos;/ada&apos;,</span><br><span class=\"line\">        &apos;post&apos;,</span><br><span class=\"line\">        &apos;a=1&amp;b=2&apos;,</span><br><span class=\"line\">        (responseText) =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;s&apos;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        (request) =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;f&apos;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>但是这个$.ajax依然有问题</strong><br>1.给定的参数顺序太死<br>如果我不传其中一个参数，就需要给这个参数所在位置占位，如若method是’get’，就不返回body，那就需要用undefined等占位<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;/ada&apos;,</span><br><span class=\"line\">&apos;post&apos;,</span><br><span class=\"line\">//null，undefined或&apos;&apos; 占位</span><br><span class=\"line\">&apos;&apos;,</span><br><span class=\"line\">(responseText) =&gt; &#123;</span><br><span class=\"line\">      console.log(&apos;s&apos;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">(request) =&gt; &#123;</span><br><span class=\"line\">      console.log(&apos;f&apos;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>2.无法直观解释参数意思。<br>比如上面代码，如果你没看过前面内容或者原生JS代码，你都不知道这些参数分别表达的是什么意思。</p>\n<p><strong>解决方法：给参数命名呗</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery.ajax = function (options) &#123;</span><br><span class=\"line\">    //给参数一个选项</span><br><span class=\"line\">    let method = options.method</span><br><span class=\"line\">    let url = options.url</span><br><span class=\"line\">    let body = options.body</span><br><span class=\"line\">    let succseeFn = options.succseeFn</span><br><span class=\"line\">    let failFn = options.failFn</span><br><span class=\"line\"></span><br><span class=\"line\">    let request = new XMLHttpRequest()</span><br><span class=\"line\">    //初始化请求</span><br><span class=\"line\">    request.open(method, url)</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                succseeFn.call(undefined, request.responseText)</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                failFn.call(undefined, request)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.send(body)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    //以对象的形式传参数</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: &apos;/ada&apos;,</span><br><span class=\"line\">        method: &apos;post&apos;,</span><br><span class=\"line\">        body: &apos;a=1&amp;b=2&apos;,</span><br><span class=\"line\">        succseeFn: (responseText) =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;s&apos;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        failFn: (request) =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;f&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>加一个 setRequestHeader：设置请求第二部分</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">headers: &#123;</span><br><span class=\"line\">    &apos;content-type&apos;:&apos;application/x-www-form-urlencoded&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>$.ajax 部分遍历一下 headers<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let headers = options.headers</span><br><span class=\"line\">//下面代码放在 requset.open() 后</span><br><span class=\"line\">for (let key in headers) &#123;</span><br><span class=\"line\">    let value = headers[key]</span><br><span class=\"line\">    request.setRequestHeader(key, value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5f2a6c8a84d872fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>如何向 $.ajax 传两个参数：如 jQuery.ajax( url [, options ] )</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let url</span><br><span class=\"line\">if(arguments.length === 1)&#123;</span><br><span class=\"line\">    url = options.url</span><br><span class=\"line\">&#125;else if(arguments.length === 2)&#123;</span><br><span class=\"line\">    url = arguments[0]</span><br><span class=\"line\">    options = arguments[1]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们的$.ajax 已经和jQuery的一样了</p>\n<hr>\n<p><strong>优化一下代码，先不管两个参数那个</strong></p>\n<p><strong>1.ES6的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">解构赋值</a></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这6行代码太丑了</span><br><span class=\"line\">let url= options</span><br><span class=\"line\">let method = options.method</span><br><span class=\"line\">let body = options.body</span><br><span class=\"line\">let succseeFn = options.succseeFn</span><br><span class=\"line\">let failFn = options.failFn</span><br><span class=\"line\">let headers = options.headers</span><br><span class=\"line\">//用ES6解构赋值,上面代码等价于</span><br><span class=\"line\">let = &#123;url,method,body,headers,successFn,failFn&#125; = options</span><br></pre></td></tr></table></figure></p>\n<p>可以不要 options 了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery.ajax = function (&#123;url,method,body,headers,succseeFn,failFn&#125;)&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2.Promise，相关知识可以<a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">参考</a></strong><br>之前我们给参数命名了，我是知道了这个参数代表什么。<br>但是每个人的命名都会不一样，比如 jQuery 的 ajax 对响应成功的命名就是 success 而我的是 successFn。<br>这对于不熟悉对应文档的人来说，使用十分不便。<br>针对这个问题，就有了 Promise<br>Promise的形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.Promise = function(fn)&#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        then:function()&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用Promise函数：resolve,reject 替换 successFn 和 failFn，这个两个参数是ES6规定的，这样就不会有上述问题了<br>return new Promise(function(resolve,reject){})<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery.ajax = function (&#123;url,method,body,headers&#125;) &#123;</span><br><span class=\"line\">    //之前代码返回值是 undefined，我们return一个Promise</span><br><span class=\"line\">    return new Promise(function(resolve,reject)&#123;</span><br><span class=\"line\">        let request = new XMLHttpRequest()</span><br><span class=\"line\">    //初始化请求</span><br><span class=\"line\">    request.open(method, url)</span><br><span class=\"line\">    for (let key in headers) &#123;</span><br><span class=\"line\">        let value = headers[key]</span><br><span class=\"line\">        request.setRequestHeader(key, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.onreadystatechange = () =&gt; &#123;</span><br><span class=\"line\">        if (request.readyState === 4) &#123;</span><br><span class=\"line\">            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class=\"line\">                // successFn 就由 resove 代替了</span><br><span class=\"line\">                resolve.call(undefined, request.responseText)</span><br><span class=\"line\">            &#125; else if (request.status &gt;= 400) &#123;</span><br><span class=\"line\">                // failFn 就由 reject 代替了</span><br><span class=\"line\">                reject.call(undefined, request)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.send(body)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">window.$ = window.jQuery</span><br><span class=\"line\"></span><br><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    //以对象的形式传参数</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: &apos;/ada&apos;,</span><br><span class=\"line\">        method: &apos;post&apos;,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">            &apos;content-type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class=\"line\">            &apos;ada&apos;: &apos;18&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).then(</span><br><span class=\"line\">        //成功后执行的代码</span><br><span class=\"line\">        (responseText)=&gt;&#123;console.log(responseText)&#125;,</span><br><span class=\"line\">        //失败后执行的代码</span><br><span class=\"line\">        (request)=&gt;&#123;console.log(request)&#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>then 后再 then<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.then(</span><br><span class=\"line\">    //成功后执行的代码</span><br><span class=\"line\">    (responseText)=&gt;&#123;console.log(responseText);return &apos;处理成功&apos;&#125;, </span><br><span class=\"line\">    //失败后执行的代码</span><br><span class=\"line\">    (request)=&gt;&#123;console.log(request);return &apos;处理失败&apos;&#125;</span><br><span class=\"line\">    ).then(</span><br><span class=\"line\">    //上一次成功后的return</span><br><span class=\"line\">    (responseText)=&gt;&#123;console.log(responseText)&#125;,</span><br><span class=\"line\">    //上一次失败后的return</span><br><span class=\"line\">    (request)=&gt;&#123;console.log(request)&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>可以看下结果<img src=\"https://upload-images.jianshu.io/upload_images/7094266-46960dc591ffab15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>完整代码请看 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/jQuery.AJAX\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<hr>\n<p>#小记<br><strong>AJAX 的所有功能</strong><br>客户端的JS发起请求（浏览器上的）<br>服务端的JS发送响应（Node.js上的）<br><strong>1.JS 可以设置任意请求 header</strong><br>第一部分 request.open(method, url)<br>第二部分 request.setRequstHeader(‘content-type’,’application/x-www-form-urlencoded’)<br>第四部分 request.send(body)<br><strong>2.JS 可以获取任意响应 header</strong><br>第一部分 request.status / request.statusText<br>第二部分 request.getResponseHeader() / request.getAllResponseHeaders()<br>第四部分 request.responseText<br>图解<img src=\"https://upload-images.jianshu.io/upload_images/7094266-82d62fca23713ea1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>有关回调 (callback:打电话回来)：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">succseeFn.call(undefined, request.responseText)</span><br><span class=\"line\">//这种形式就是回调</span><br><span class=\"line\">succseeFn: () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>promise 的 .then() 和 .then().then() 理解</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.then(</span><br><span class=\"line\">  fn1,fn2</span><br><span class=\"line\">).then(</span><br><span class=\"line\">  fn3,fn4</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure></p>\n<p>.then( , ) 逗号左边为成功执行，右边为失败执行<br>我们可以称第一个： <strong>.then( fn1 , fn2 )</strong>为第一负责人；第二个： <strong>.then( fn3 , fn4 )</strong>为第二负责人</p>\n<h2 id=\"第一负责人成功则执行-fn1-，失败则执行-fn2；第一负责人处理完成处理则第二负责人执行-fn3-，处理不好（如代码有问题）则执行-fn4\"><a href=\"#第一负责人成功则执行-fn1-，失败则执行-fn2；第一负责人处理完成处理则第二负责人执行-fn3-，处理不好（如代码有问题）则执行-fn4\" class=\"headerlink\" title=\"第一负责人成功则执行 fn1 ，失败则执行 fn2；第一负责人处理完成处理则第二负责人执行 fn3 ，处理不好（如代码有问题）则执行 fn4\"></a>第一负责人成功则执行 fn1 ，失败则执行 fn2；第一负责人处理完成处理则第二负责人执行 fn3 ，处理不好（如代码有问题）则执行 fn4</h2><p>本文仅供个人学习使用</p>\n"},{"title":"实现一个 jQuery 的 API","date":"2018-07-28T16:01:59.000Z","_content":"最近开始学习 jQuery，jQuery 是 JavaScript 最受欢迎的一个库，它让原本极不方便的JS DOM API 变得十分易用，那么它是如何做到的呢？\n要理解jQuery原理，我们可以用现有的DOM知识尝试写一个类似jQuery的API\n\n\n**首先我们写一个列表，给它加上id**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-a1b5fa2c18276641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**以选项3为节点，找到其兄弟节点（代码见截图）**\n\n通过 **var allChildren = item3.parentNode.children**获取 **item3** 父节点的所以子节点，然后遍历所有子节点，选出不是 **item3** 的所有节点，这样就找到选项3的所以兄弟节点啦。可以 console.log一下\n\n（由于array是伪数组，不能用push的方法，所以我们用到 **array[array.length] = allChildren[i]**的方法）\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4e2f54c2e513b5ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后我们把这些代码**封装**一下（给个函数）\n\n封装的好处有很多：给代码一个名字方便调用；**形成局部变量可以避免覆盖JS原始变量（立即调用函数）**等\n\n给这个函数取个名字，如 getSiblings；把 item3 换成 node，这样输入任意节点都可以使用这个函数了；注意不要忘记 return\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ea2f6d7eaf37ac1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这样我们就得到了一个函数 **function getSiblings(node){}**\n\n* * *\n\n现在你已经学会如何封装一个函数，让我们尝试封装函数：**function addClass(node, classes){}**\n\n现在我们要给 item3 加 class属性\n\n首先我们声明一个 classes 对象，里面有 a、b、c 三个属性；**同时分别给它们一个布尔值，方便 add 和 remove**；遍历各个属性。\n\n可以看到，class b、c已经被添加到 item3 中了\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ab48d3fb806dae12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n同样我们来封装一下这些代码\n\n![](https://upload-images.jianshu.io/upload_images/7094266-8fa1e7aee94ca4f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n现在，只要你给一个 node 和 classes 于此函数，就可以给 该节点添加 classes所包含的正确属性\n\n# **命名空间：**\n\n**给封装的函数一个名字，方便其他人使用，同时防止与前人命名的冲突。**\n```\nvar Adadom = {}\nAdadom.getSiblings(node)\nAdadom.addClass(node, {a: false, b: true,c:true})\n```\n得到代码如下，这样做也能**避免将JS 提供的DOM覆盖**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-a8a36cf56f38cbee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 能不能把node 放在前面\n```\nnode.getSiblings() \nnode.addClass()\n```\n方法一：扩展 Node 接口\n\n直接在 Node.prototype 上加函数\n\nNode 如何取到 item3？用 this ，why？把上面写成 .call 的形式，因为 **this 是call 的第一个参数。**那么用 this 就显而易见了\n\n![](https://upload-images.jianshu.io/upload_images/7094266-50bd8de7275ed2b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是这样太乱了，总不能所有人都在Node原型上加属性吧？所以有了方法2\n\n方法二：新的接口 BetterNode\n\n示例如下\n```\nfunction Node2(node){ \n    return { \n        element: node,\n        getSiblings: function(){\n       },\n      addClass: function(){\n    }\n  }\n}\nlet node =document.getElementById('x')\nlet node2 = Node2(node)\nnode2.getSiblings()\nnode2.addClass()\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-9eb49bb5f7b83c3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这种方法叫做「无侵入」即对 Node 无侵入\n\n# 把 Node2 改成jQuery吧\n```\nfunction jQuery(node){ \n    return {\n        element: node,\n        getSiblings: function(){\n        },\n        addClass: function(){\n        }\n      }\n}\nlet node =document.getElementById('x')\nlet node2 =jQuery(node)\nnode2.getSiblings()\nnode2.addClass()\n```\n# 再给个缩写吧:alias\n\n**window.$ = jQuery**\n\n即 **var node2 = $(node)**\n\n但是为了防止记混 node2 到底有没有引入 jQuery\n\n大家通常这样写\n```\nvar $node2 = $(node)\n```\n\n至此，你已经知道 jQuery 是个什么了：它就是一个函数，是 JS 原始 DOM的扩展，便于我们更好得使用JS写代码的加强版 DOM API。\n\n完整代码见 [github](https://github.com/Adashuai5/jQuery-demo/tree/master/jQuery%20API)\n* * *\n本文主要用于个人学习使用","source":"_posts/实现一个-jQuery-的-API.md","raw":"---\ntitle: 实现一个 jQuery 的 API\ndate: 2018-07-29 00:01:59\ntags:\n---\n最近开始学习 jQuery，jQuery 是 JavaScript 最受欢迎的一个库，它让原本极不方便的JS DOM API 变得十分易用，那么它是如何做到的呢？\n要理解jQuery原理，我们可以用现有的DOM知识尝试写一个类似jQuery的API\n\n\n**首先我们写一个列表，给它加上id**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-a1b5fa2c18276641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**以选项3为节点，找到其兄弟节点（代码见截图）**\n\n通过 **var allChildren = item3.parentNode.children**获取 **item3** 父节点的所以子节点，然后遍历所有子节点，选出不是 **item3** 的所有节点，这样就找到选项3的所以兄弟节点啦。可以 console.log一下\n\n（由于array是伪数组，不能用push的方法，所以我们用到 **array[array.length] = allChildren[i]**的方法）\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4e2f54c2e513b5ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后我们把这些代码**封装**一下（给个函数）\n\n封装的好处有很多：给代码一个名字方便调用；**形成局部变量可以避免覆盖JS原始变量（立即调用函数）**等\n\n给这个函数取个名字，如 getSiblings；把 item3 换成 node，这样输入任意节点都可以使用这个函数了；注意不要忘记 return\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ea2f6d7eaf37ac1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这样我们就得到了一个函数 **function getSiblings(node){}**\n\n* * *\n\n现在你已经学会如何封装一个函数，让我们尝试封装函数：**function addClass(node, classes){}**\n\n现在我们要给 item3 加 class属性\n\n首先我们声明一个 classes 对象，里面有 a、b、c 三个属性；**同时分别给它们一个布尔值，方便 add 和 remove**；遍历各个属性。\n\n可以看到，class b、c已经被添加到 item3 中了\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ab48d3fb806dae12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n同样我们来封装一下这些代码\n\n![](https://upload-images.jianshu.io/upload_images/7094266-8fa1e7aee94ca4f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n现在，只要你给一个 node 和 classes 于此函数，就可以给 该节点添加 classes所包含的正确属性\n\n# **命名空间：**\n\n**给封装的函数一个名字，方便其他人使用，同时防止与前人命名的冲突。**\n```\nvar Adadom = {}\nAdadom.getSiblings(node)\nAdadom.addClass(node, {a: false, b: true,c:true})\n```\n得到代码如下，这样做也能**避免将JS 提供的DOM覆盖**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-a8a36cf56f38cbee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 能不能把node 放在前面\n```\nnode.getSiblings() \nnode.addClass()\n```\n方法一：扩展 Node 接口\n\n直接在 Node.prototype 上加函数\n\nNode 如何取到 item3？用 this ，why？把上面写成 .call 的形式，因为 **this 是call 的第一个参数。**那么用 this 就显而易见了\n\n![](https://upload-images.jianshu.io/upload_images/7094266-50bd8de7275ed2b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是这样太乱了，总不能所有人都在Node原型上加属性吧？所以有了方法2\n\n方法二：新的接口 BetterNode\n\n示例如下\n```\nfunction Node2(node){ \n    return { \n        element: node,\n        getSiblings: function(){\n       },\n      addClass: function(){\n    }\n  }\n}\nlet node =document.getElementById('x')\nlet node2 = Node2(node)\nnode2.getSiblings()\nnode2.addClass()\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-9eb49bb5f7b83c3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这种方法叫做「无侵入」即对 Node 无侵入\n\n# 把 Node2 改成jQuery吧\n```\nfunction jQuery(node){ \n    return {\n        element: node,\n        getSiblings: function(){\n        },\n        addClass: function(){\n        }\n      }\n}\nlet node =document.getElementById('x')\nlet node2 =jQuery(node)\nnode2.getSiblings()\nnode2.addClass()\n```\n# 再给个缩写吧:alias\n\n**window.$ = jQuery**\n\n即 **var node2 = $(node)**\n\n但是为了防止记混 node2 到底有没有引入 jQuery\n\n大家通常这样写\n```\nvar $node2 = $(node)\n```\n\n至此，你已经知道 jQuery 是个什么了：它就是一个函数，是 JS 原始 DOM的扩展，便于我们更好得使用JS写代码的加强版 DOM API。\n\n完整代码见 [github](https://github.com/Adashuai5/jQuery-demo/tree/master/jQuery%20API)\n* * *\n本文主要用于个人学习使用","slug":"实现一个-jQuery-的-API","published":1,"updated":"2019-01-22T14:22:31.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvp000jhw990jj4s5i7","content":"<p>最近开始学习 jQuery，jQuery 是 JavaScript 最受欢迎的一个库，它让原本极不方便的JS DOM API 变得十分易用，那么它是如何做到的呢？<br>要理解jQuery原理，我们可以用现有的DOM知识尝试写一个类似jQuery的API</p>\n<p><strong>首先我们写一个列表，给它加上id</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a1b5fa2c18276641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>以选项3为节点，找到其兄弟节点（代码见截图）</strong></p>\n<p>通过 <strong>var allChildren = item3.parentNode.children</strong>获取 <strong>item3</strong> 父节点的所以子节点，然后遍历所有子节点，选出不是 <strong>item3</strong> 的所有节点，这样就找到选项3的所以兄弟节点啦。可以 console.log一下</p>\n<p>（由于array是伪数组，不能用push的方法，所以我们用到 <strong>array[array.length] = allChildren[i]</strong>的方法）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4e2f54c2e513b5ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>然后我们把这些代码<strong>封装</strong>一下（给个函数）</p>\n<p>封装的好处有很多：给代码一个名字方便调用；<strong>形成局部变量可以避免覆盖JS原始变量（立即调用函数）</strong>等</p>\n<p>给这个函数取个名字，如 getSiblings；把 item3 换成 node，这样输入任意节点都可以使用这个函数了；注意不要忘记 return</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ea2f6d7eaf37ac1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这样我们就得到了一个函数 <strong>function getSiblings(node){}</strong></p>\n<hr>\n<p>现在你已经学会如何封装一个函数，让我们尝试封装函数：<strong>function addClass(node, classes){}</strong></p>\n<p>现在我们要给 item3 加 class属性</p>\n<p>首先我们声明一个 classes 对象，里面有 a、b、c 三个属性；<strong>同时分别给它们一个布尔值，方便 add 和 remove</strong>；遍历各个属性。</p>\n<p>可以看到，class b、c已经被添加到 item3 中了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ab48d3fb806dae12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>同样我们来封装一下这些代码</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-8fa1e7aee94ca4f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>现在，只要你给一个 node 和 classes 于此函数，就可以给 该节点添加 classes所包含的正确属性</p>\n<h1 id=\"命名空间：\"><a href=\"#命名空间：\" class=\"headerlink\" title=\"命名空间：\"></a><strong>命名空间：</strong></h1><p><strong>给封装的函数一个名字，方便其他人使用，同时防止与前人命名的冲突。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Adadom = &#123;&#125;</span><br><span class=\"line\">Adadom.getSiblings(node)</span><br><span class=\"line\">Adadom.addClass(node, &#123;a: false, b: true,c:true&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>得到代码如下，这样做也能<strong>避免将JS 提供的DOM覆盖</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a8a36cf56f38cbee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"能不能把node-放在前面\"><a href=\"#能不能把node-放在前面\" class=\"headerlink\" title=\"能不能把node 放在前面\"></a>能不能把node 放在前面</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.getSiblings() </span><br><span class=\"line\">node.addClass()</span><br></pre></td></tr></table></figure>\n<p>方法一：扩展 Node 接口</p>\n<p>直接在 Node.prototype 上加函数</p>\n<p>Node 如何取到 item3？用 this ，why？把上面写成 .call 的形式，因为 <strong>this 是call 的第一个参数。</strong>那么用 this 就显而易见了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-50bd8de7275ed2b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>但是这样太乱了，总不能所有人都在Node原型上加属性吧？所以有了方法2</p>\n<p>方法二：新的接口 BetterNode</p>\n<p>示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Node2(node)&#123; </span><br><span class=\"line\">    return &#123; </span><br><span class=\"line\">        element: node,</span><br><span class=\"line\">        getSiblings: function()&#123;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">      addClass: function()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let node =document.getElementById(&apos;x&apos;)</span><br><span class=\"line\">let node2 = Node2(node)</span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass()</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-9eb49bb5f7b83c3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这种方法叫做「无侵入」即对 Node 无侵入</p>\n<h1 id=\"把-Node2-改成jQuery吧\"><a href=\"#把-Node2-改成jQuery吧\" class=\"headerlink\" title=\"把 Node2 改成jQuery吧\"></a>把 Node2 改成jQuery吧</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function jQuery(node)&#123; </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        element: node,</span><br><span class=\"line\">        getSiblings: function()&#123;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addClass: function()&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let node =document.getElementById(&apos;x&apos;)</span><br><span class=\"line\">let node2 =jQuery(node)</span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass()</span><br></pre></td></tr></table></figure>\n<h1 id=\"再给个缩写吧-alias\"><a href=\"#再给个缩写吧-alias\" class=\"headerlink\" title=\"再给个缩写吧:alias\"></a>再给个缩写吧:alias</h1><p><strong>window.$ = jQuery</strong></p>\n<p>即 <strong>var node2 = $(node)</strong></p>\n<p>但是为了防止记混 node2 到底有没有引入 jQuery</p>\n<p>大家通常这样写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $node2 = $(node)</span><br></pre></td></tr></table></figure></p>\n<p>至此，你已经知道 jQuery 是个什么了：它就是一个函数，是 JS 原始 DOM的扩展，便于我们更好得使用JS写代码的加强版 DOM API。</p>\n<p>完整代码见 <a href=\"https://github.com/Adashuai5/jQuery-demo/tree/master/jQuery%20API\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<hr>\n<p>本文主要用于个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近开始学习 jQuery，jQuery 是 JavaScript 最受欢迎的一个库，它让原本极不方便的JS DOM API 变得十分易用，那么它是如何做到的呢？<br>要理解jQuery原理，我们可以用现有的DOM知识尝试写一个类似jQuery的API</p>\n<p><strong>首先我们写一个列表，给它加上id</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a1b5fa2c18276641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>以选项3为节点，找到其兄弟节点（代码见截图）</strong></p>\n<p>通过 <strong>var allChildren = item3.parentNode.children</strong>获取 <strong>item3</strong> 父节点的所以子节点，然后遍历所有子节点，选出不是 <strong>item3</strong> 的所有节点，这样就找到选项3的所以兄弟节点啦。可以 console.log一下</p>\n<p>（由于array是伪数组，不能用push的方法，所以我们用到 <strong>array[array.length] = allChildren[i]</strong>的方法）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4e2f54c2e513b5ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>然后我们把这些代码<strong>封装</strong>一下（给个函数）</p>\n<p>封装的好处有很多：给代码一个名字方便调用；<strong>形成局部变量可以避免覆盖JS原始变量（立即调用函数）</strong>等</p>\n<p>给这个函数取个名字，如 getSiblings；把 item3 换成 node，这样输入任意节点都可以使用这个函数了；注意不要忘记 return</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ea2f6d7eaf37ac1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这样我们就得到了一个函数 <strong>function getSiblings(node){}</strong></p>\n<hr>\n<p>现在你已经学会如何封装一个函数，让我们尝试封装函数：<strong>function addClass(node, classes){}</strong></p>\n<p>现在我们要给 item3 加 class属性</p>\n<p>首先我们声明一个 classes 对象，里面有 a、b、c 三个属性；<strong>同时分别给它们一个布尔值，方便 add 和 remove</strong>；遍历各个属性。</p>\n<p>可以看到，class b、c已经被添加到 item3 中了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ab48d3fb806dae12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>同样我们来封装一下这些代码</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-8fa1e7aee94ca4f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>现在，只要你给一个 node 和 classes 于此函数，就可以给 该节点添加 classes所包含的正确属性</p>\n<h1 id=\"命名空间：\"><a href=\"#命名空间：\" class=\"headerlink\" title=\"命名空间：\"></a><strong>命名空间：</strong></h1><p><strong>给封装的函数一个名字，方便其他人使用，同时防止与前人命名的冲突。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Adadom = &#123;&#125;</span><br><span class=\"line\">Adadom.getSiblings(node)</span><br><span class=\"line\">Adadom.addClass(node, &#123;a: false, b: true,c:true&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>得到代码如下，这样做也能<strong>避免将JS 提供的DOM覆盖</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a8a36cf56f38cbee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"能不能把node-放在前面\"><a href=\"#能不能把node-放在前面\" class=\"headerlink\" title=\"能不能把node 放在前面\"></a>能不能把node 放在前面</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.getSiblings() </span><br><span class=\"line\">node.addClass()</span><br></pre></td></tr></table></figure>\n<p>方法一：扩展 Node 接口</p>\n<p>直接在 Node.prototype 上加函数</p>\n<p>Node 如何取到 item3？用 this ，why？把上面写成 .call 的形式，因为 <strong>this 是call 的第一个参数。</strong>那么用 this 就显而易见了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-50bd8de7275ed2b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>但是这样太乱了，总不能所有人都在Node原型上加属性吧？所以有了方法2</p>\n<p>方法二：新的接口 BetterNode</p>\n<p>示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Node2(node)&#123; </span><br><span class=\"line\">    return &#123; </span><br><span class=\"line\">        element: node,</span><br><span class=\"line\">        getSiblings: function()&#123;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">      addClass: function()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let node =document.getElementById(&apos;x&apos;)</span><br><span class=\"line\">let node2 = Node2(node)</span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass()</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-9eb49bb5f7b83c3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这种方法叫做「无侵入」即对 Node 无侵入</p>\n<h1 id=\"把-Node2-改成jQuery吧\"><a href=\"#把-Node2-改成jQuery吧\" class=\"headerlink\" title=\"把 Node2 改成jQuery吧\"></a>把 Node2 改成jQuery吧</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function jQuery(node)&#123; </span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        element: node,</span><br><span class=\"line\">        getSiblings: function()&#123;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addClass: function()&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let node =document.getElementById(&apos;x&apos;)</span><br><span class=\"line\">let node2 =jQuery(node)</span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass()</span><br></pre></td></tr></table></figure>\n<h1 id=\"再给个缩写吧-alias\"><a href=\"#再给个缩写吧-alias\" class=\"headerlink\" title=\"再给个缩写吧:alias\"></a>再给个缩写吧:alias</h1><p><strong>window.$ = jQuery</strong></p>\n<p>即 <strong>var node2 = $(node)</strong></p>\n<p>但是为了防止记混 node2 到底有没有引入 jQuery</p>\n<p>大家通常这样写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $node2 = $(node)</span><br></pre></td></tr></table></figure></p>\n<p>至此，你已经知道 jQuery 是个什么了：它就是一个函数，是 JS 原始 DOM的扩展，便于我们更好得使用JS写代码的加强版 DOM API。</p>\n<p>完整代码见 <a href=\"https://github.com/Adashuai5/jQuery-demo/tree/master/jQuery%20API\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<hr>\n<p>本文主要用于个人学习使用</p>\n"},{"title":"有关 HTTP 协议（IP和端口）","date":"2018-06-08T06:51:05.000Z","_content":"# 网络与IP\n\nHTTP 协议的底层其实是由 TCP 协议和 IP 协议（简称 TCP/IP）构建的\n\n**TCP 传输控制协议（Transmission Control Protocol）**\n\n**1.[TCP 和 UDP 的区别是什么](https://www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5?toCommentId=73766)** \n\n简答：TCP 可靠、面向连接、相对 UDP 较慢（求速度）；UDP 不可靠，不面向连接、相对 TCP 较快（求安全）。\n\n2.[TCP 的三次握手指的是什么](https://github.com/jawil/blog/issues/14)\n\n![](https://upload-images.jianshu.io/upload_images/7094266-5c97dd6f5e872dc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n简答：每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：\n\n1\\. 客户端：我要连接你了，可以吗\n\n2\\. 服务端：嗯，我准备好了，连接我吧\n\n3\\. 客户端：那我连接你咯。\n\n然后 开始后面步骤\n\n* * *\n\n**IP 网络协议（英语：Internet Protocol）**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-03aaae9c062d73d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n路由器没有「固定的外网 IP」\n\n路由器给自己的内网 **IP（192.168.1.1）**\n\n本地** IP：127.0.0.1 **表示设备自己\n\n特殊的** IP：0.0.0.0 **不表示任何设备\n\n# 端口\n\n你想要访问一个设备（前提是你使用的是 TCP 或 UDP 协议。还记得吗，HTTP 就使用了 TCP），只指定 IP 是不够的，还**必须**指定 端口（Port）\n\n**原则：一个端口对应一个服务**\n\n要提供 HTTP 服务你最好使用 80 端口（能不能使用别的端口？可以，不过不建议你违反约定）\n\n要提供 HTTPS 服务你最好使用 443 端口（能不能使用别的端口？可以，不过不建议你违反约定）\n\n要提供 FTP 服务你最好使用 21 端口（能不能使用别的端口？可以，不过不建议你违反约定）\n\n **如何知道用何端口？**\n\n0 到 1023 号端口对应的服务 [维基百科](https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0.E5.88.B01023.E5.8F.B7.E7.AB.AF.E5.8F.A3)\n\n**一共由多少端口？**\n\n每个机器一共有 65535（2的16次方减1）个端口（这是协议规定的）。不过这些端口的使用由一些规定\n\n0 到 1023（2的10次方减1）号端口是留给系统使用的，你只有拥有了管理员权限后，才能使用这 1024 个端口。\n\n其他端口可以给普通用户使用\n\n如果一个端口正在提供服务，也就是被占用了，那么就不能再使用这个端口。除非你先停掉正在占用这个端口的服务。\n\n\n**使用 HTTP 协议访问另一个 IP 时，比如同时提供 IP 和端口号，缺一不可**\n\n**访问网站时候浏览器帮你加了默认端口号，因此你不需要加也可以访问** \n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n","source":"_posts/有关-HTTP-协议（IP和端口）.md","raw":"---\ntitle: 有关 HTTP 协议（IP和端口）\ndate: 2018-06-08 14:51:05\ntags:\n---\n# 网络与IP\n\nHTTP 协议的底层其实是由 TCP 协议和 IP 协议（简称 TCP/IP）构建的\n\n**TCP 传输控制协议（Transmission Control Protocol）**\n\n**1.[TCP 和 UDP 的区别是什么](https://www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5?toCommentId=73766)** \n\n简答：TCP 可靠、面向连接、相对 UDP 较慢（求速度）；UDP 不可靠，不面向连接、相对 TCP 较快（求安全）。\n\n2.[TCP 的三次握手指的是什么](https://github.com/jawil/blog/issues/14)\n\n![](https://upload-images.jianshu.io/upload_images/7094266-5c97dd6f5e872dc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n简答：每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：\n\n1\\. 客户端：我要连接你了，可以吗\n\n2\\. 服务端：嗯，我准备好了，连接我吧\n\n3\\. 客户端：那我连接你咯。\n\n然后 开始后面步骤\n\n* * *\n\n**IP 网络协议（英语：Internet Protocol）**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-03aaae9c062d73d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n路由器没有「固定的外网 IP」\n\n路由器给自己的内网 **IP（192.168.1.1）**\n\n本地** IP：127.0.0.1 **表示设备自己\n\n特殊的** IP：0.0.0.0 **不表示任何设备\n\n# 端口\n\n你想要访问一个设备（前提是你使用的是 TCP 或 UDP 协议。还记得吗，HTTP 就使用了 TCP），只指定 IP 是不够的，还**必须**指定 端口（Port）\n\n**原则：一个端口对应一个服务**\n\n要提供 HTTP 服务你最好使用 80 端口（能不能使用别的端口？可以，不过不建议你违反约定）\n\n要提供 HTTPS 服务你最好使用 443 端口（能不能使用别的端口？可以，不过不建议你违反约定）\n\n要提供 FTP 服务你最好使用 21 端口（能不能使用别的端口？可以，不过不建议你违反约定）\n\n **如何知道用何端口？**\n\n0 到 1023 号端口对应的服务 [维基百科](https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0.E5.88.B01023.E5.8F.B7.E7.AB.AF.E5.8F.A3)\n\n**一共由多少端口？**\n\n每个机器一共有 65535（2的16次方减1）个端口（这是协议规定的）。不过这些端口的使用由一些规定\n\n0 到 1023（2的10次方减1）号端口是留给系统使用的，你只有拥有了管理员权限后，才能使用这 1024 个端口。\n\n其他端口可以给普通用户使用\n\n如果一个端口正在提供服务，也就是被占用了，那么就不能再使用这个端口。除非你先停掉正在占用这个端口的服务。\n\n\n**使用 HTTP 协议访问另一个 IP 时，比如同时提供 IP 和端口号，缺一不可**\n\n**访问网站时候浏览器帮你加了默认端口号，因此你不需要加也可以访问** \n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n","slug":"有关-HTTP-协议（IP和端口）","published":1,"updated":"2019-01-22T14:13:21.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvq000khw99tp1hvt17","content":"<h1 id=\"网络与IP\"><a href=\"#网络与IP\" class=\"headerlink\" title=\"网络与IP\"></a>网络与IP</h1><p>HTTP 协议的底层其实是由 TCP 协议和 IP 协议（简称 TCP/IP）构建的</p>\n<p><strong>TCP 传输控制协议（Transmission Control Protocol）</strong></p>\n<p><strong>1.<a href=\"https://www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5?toCommentId=73766\" target=\"_blank\" rel=\"noopener\">TCP 和 UDP 的区别是什么</a></strong> </p>\n<p>简答：TCP 可靠、面向连接、相对 UDP 较慢（求速度）；UDP 不可靠，不面向连接、相对 TCP 较快（求安全）。</p>\n<p>2.<a href=\"https://github.com/jawil/blog/issues/14\" target=\"_blank\" rel=\"noopener\">TCP 的三次握手指的是什么</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5c97dd6f5e872dc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>简答：每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：</p>\n<p>1. 客户端：我要连接你了，可以吗</p>\n<p>2. 服务端：嗯，我准备好了，连接我吧</p>\n<p>3. 客户端：那我连接你咯。</p>\n<p>然后 开始后面步骤</p>\n<hr>\n<p><strong>IP 网络协议（英语：Internet Protocol）</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-03aaae9c062d73d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>路由器没有「固定的外网 IP」</p>\n<p>路由器给自己的内网 <strong>IP（192.168.1.1）</strong></p>\n<p>本地<strong> IP：127.0.0.1 </strong>表示设备自己</p>\n<p>特殊的<strong> IP：0.0.0.0 </strong>不表示任何设备</p>\n<h1 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h1><p>你想要访问一个设备（前提是你使用的是 TCP 或 UDP 协议。还记得吗，HTTP 就使用了 TCP），只指定 IP 是不够的，还<strong>必须</strong>指定 端口（Port）</p>\n<p><strong>原则：一个端口对应一个服务</strong></p>\n<p>要提供 HTTP 服务你最好使用 80 端口（能不能使用别的端口？可以，不过不建议你违反约定）</p>\n<p>要提供 HTTPS 服务你最好使用 443 端口（能不能使用别的端口？可以，不过不建议你违反约定）</p>\n<p>要提供 FTP 服务你最好使用 21 端口（能不能使用别的端口？可以，不过不建议你违反约定）</p>\n<p> <strong>如何知道用何端口？</strong></p>\n<p>0 到 1023 号端口对应的服务 <a href=\"https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0.E5.88.B01023.E5.8F.B7.E7.AB.AF.E5.8F.A3\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<p><strong>一共由多少端口？</strong></p>\n<p>每个机器一共有 65535（2的16次方减1）个端口（这是协议规定的）。不过这些端口的使用由一些规定</p>\n<p>0 到 1023（2的10次方减1）号端口是留给系统使用的，你只有拥有了管理员权限后，才能使用这 1024 个端口。</p>\n<p>其他端口可以给普通用户使用</p>\n<p>如果一个端口正在提供服务，也就是被占用了，那么就不能再使用这个端口。除非你先停掉正在占用这个端口的服务。</p>\n<p><strong>使用 HTTP 协议访问另一个 IP 时，比如同时提供 IP 和端口号，缺一不可</strong></p>\n<p><strong>访问网站时候浏览器帮你加了默认端口号，因此你不需要加也可以访问</strong> </p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"网络与IP\"><a href=\"#网络与IP\" class=\"headerlink\" title=\"网络与IP\"></a>网络与IP</h1><p>HTTP 协议的底层其实是由 TCP 协议和 IP 协议（简称 TCP/IP）构建的</p>\n<p><strong>TCP 传输控制协议（Transmission Control Protocol）</strong></p>\n<p><strong>1.<a href=\"https://www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5?toCommentId=73766\" target=\"_blank\" rel=\"noopener\">TCP 和 UDP 的区别是什么</a></strong> </p>\n<p>简答：TCP 可靠、面向连接、相对 UDP 较慢（求速度）；UDP 不可靠，不面向连接、相对 TCP 较快（求安全）。</p>\n<p>2.<a href=\"https://github.com/jawil/blog/issues/14\" target=\"_blank\" rel=\"noopener\">TCP 的三次握手指的是什么</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-5c97dd6f5e872dc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>简答：每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：</p>\n<p>1. 客户端：我要连接你了，可以吗</p>\n<p>2. 服务端：嗯，我准备好了，连接我吧</p>\n<p>3. 客户端：那我连接你咯。</p>\n<p>然后 开始后面步骤</p>\n<hr>\n<p><strong>IP 网络协议（英语：Internet Protocol）</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-03aaae9c062d73d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>路由器没有「固定的外网 IP」</p>\n<p>路由器给自己的内网 <strong>IP（192.168.1.1）</strong></p>\n<p>本地<strong> IP：127.0.0.1 </strong>表示设备自己</p>\n<p>特殊的<strong> IP：0.0.0.0 </strong>不表示任何设备</p>\n<h1 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h1><p>你想要访问一个设备（前提是你使用的是 TCP 或 UDP 协议。还记得吗，HTTP 就使用了 TCP），只指定 IP 是不够的，还<strong>必须</strong>指定 端口（Port）</p>\n<p><strong>原则：一个端口对应一个服务</strong></p>\n<p>要提供 HTTP 服务你最好使用 80 端口（能不能使用别的端口？可以，不过不建议你违反约定）</p>\n<p>要提供 HTTPS 服务你最好使用 443 端口（能不能使用别的端口？可以，不过不建议你违反约定）</p>\n<p>要提供 FTP 服务你最好使用 21 端口（能不能使用别的端口？可以，不过不建议你违反约定）</p>\n<p> <strong>如何知道用何端口？</strong></p>\n<p>0 到 1023 号端口对应的服务 <a href=\"https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0.E5.88.B01023.E5.8F.B7.E7.AB.AF.E5.8F.A3\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<p><strong>一共由多少端口？</strong></p>\n<p>每个机器一共有 65535（2的16次方减1）个端口（这是协议规定的）。不过这些端口的使用由一些规定</p>\n<p>0 到 1023（2的10次方减1）号端口是留给系统使用的，你只有拥有了管理员权限后，才能使用这 1024 个端口。</p>\n<p>其他端口可以给普通用户使用</p>\n<p>如果一个端口正在提供服务，也就是被占用了，那么就不能再使用这个端口。除非你先停掉正在占用这个端口的服务。</p>\n<p><strong>使用 HTTP 协议访问另一个 IP 时，比如同时提供 IP 和端口号，缺一不可</strong></p>\n<p><strong>访问网站时候浏览器帮你加了默认端口号，因此你不需要加也可以访问</strong> </p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n"},{"title":"正则表达式速记","date":"2018-10-28T06:15:51.000Z","_content":"# 前言\n如何学习：[30分钟入门正则表达式](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/chapter8.html)\n[工具](https://www.regexpal.com/)\n本文参（zhao）考（chao）[RegExp 对象](https://wangdoc.com/javascript/stdlib/regexp.html)，该笔记只为速查\n# 简介\n正则表达式（regular expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象，其体系参照 Perl 5 建立。\n# 创建正则表达式的方法\n1. 使用一个正则表达式字面量\n```\nvar re = /xxx/\n```\n2. 调用 RegExp 对象的构造函数\n\n```\nvar re = new RegExp('xxx')\n```\n两种方法主要区别是：第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。\n# 正则表达式的实例属性\n分为两类\n1. 修饰符（只读）\nRegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。用于忽略字符串大小写。\nRegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。用于全局匹配。\nRegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。用于设置匹配为多行模式。\n2. 其他属性\nRegExp.prototype.lastIndex：返回一个数值，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。\nRegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。\n\n# 实例方法\n## 1. RegExp.prototype.test()\ntest 方法返回布尔值，表示当前模式是否能匹配参数字符串\n```\n/a/.test('and') // true\n```\n## 2. RegExp.prototype.exec()\nexec方法，用来返回匹配结果\n如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null\n```\n/a/.exec('adbca')\n```\n如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的length属性等于组匹配的数量再加1。\n```\nString.prototype.match()：返回一个数组，成员是所有匹配的子字符串。\nString.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。\nString.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。\nString.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。\n```\n---\n# 字面量字符和元字符\n## 元字符\n1. 点字符（.)\n匹配除回车（\\r）、换行(\\n) 、行分隔符（\\u2028）和段分隔符（\\u2029）以外的所有字符。\n2. 位置字符\n```\n^ 表示字符串的开始位置\n$ 表示字符串的结束位置\n```\n3. 选择符（|）\n表示“或关系”\n4. 转义符\n匹配元字符本身可以在它们前面加反斜杠\n构造函数需要两次转义\n5. 特殊字符\n```\n\\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。\n[\\b] 匹配退格键(U+0008)，不要与\\b混淆。\n\\n 匹配换行键。\n\\r 匹配回车键。\n\\t 匹配制表符 tab（U+0009）。\n\\v 匹配垂直制表符（U+000B）。\n\\f 匹配换页符（U+000C）。\n\\0 匹配null字符（U+0000）。\n\\xhh 匹配一个以两位十六进制数（\\x00-\\xFF）表示的字符。\n\\uhhhh 匹配一个以四位十六进制数（\\u0000-\\uFFFF）表示的 Unicode 字符。\n```\n# 字符类\n字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[^xyz] 表示x、y、z之中任选一个匹配。\n1. 脱字符（^）：需在字符类第一位\n表示除了字符类之中的字符，其他字符都可以匹配。只有[^]，就表示匹配一切字符，包括换行符。相比之下，点号作为元字符（.）是不包括换行符的。\n2. 连字符（-）\n```\n[0-9.,]\n[0-9a-fA-F]\n[a-zA-Z0-9-]\n[1-31] // 不代表1到31，只代表1到3\n```\n# 预定义模式：某些常见模式的简写方式\n```\n\\d 匹配0-9之间的任一数字，相当于[0-9]。\n\\D 匹配所有0-9以外的字符，相当于[^0-9]。\n\\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。\n\\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。\n\\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \\t\\r\\n\\v\\f]。\n\\S 匹配非空格的字符，相当于[^ \\t\\r\\n\\v\\f]。\n\\b 匹配词的边界。\n\\B 匹配非词边界，即在词的内部\n```\n# 重复类\n模式的精确匹配次数，使用大括号（{}）表示。{n}表示恰好重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次。\n# 量词符：设定某个模式出现的次数\n```\n? 问号表示某个模式出现0次或1次，等同于{0, 1}。\n* 星号表示某个模式出现0次或多次，等同于{0,}。\n+ 加号表示某个模式出现1次或多次，等同于{1,}。\n```\n# 贪婪模式\n```\nvar s = 'aaa';\ns.match(/a+/) // [\"aaa\"]\n```\n贪婪模式改为非贪婪模式\n```\n*?：表示某个模式出现0次或多次，匹配时采用非贪婪模式。\n+?：表示某个模式出现1次或多次，匹配时采用非贪婪模式。\n```\n# 字符串去空格(replace)\n```\nvar str = '  #id div.class  ';\nstr.trim() // \"#id div.class\"\nstr.replace(/^\\s+|\\s+$/g, '') // \"#id div.class\"\n```\n```\n$&：匹配的子字符串。\n$`：匹配结果前面的文本。\n$’：匹配结果后面的文本。\n$n：匹配成功的第n组内容，n是从1开始的自然数。\n$$：指代美元符号$。\n```\n多多练习吧\n\n---\n本文仅供个人学习使用\n","source":"_posts/正则表达式速记.md","raw":"---\ntitle: 正则表达式速记\ndate: 2018-10-28 14:15:51\ntags:\n---\n# 前言\n如何学习：[30分钟入门正则表达式](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/chapter8.html)\n[工具](https://www.regexpal.com/)\n本文参（zhao）考（chao）[RegExp 对象](https://wangdoc.com/javascript/stdlib/regexp.html)，该笔记只为速查\n# 简介\n正则表达式（regular expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象，其体系参照 Perl 5 建立。\n# 创建正则表达式的方法\n1. 使用一个正则表达式字面量\n```\nvar re = /xxx/\n```\n2. 调用 RegExp 对象的构造函数\n\n```\nvar re = new RegExp('xxx')\n```\n两种方法主要区别是：第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。\n# 正则表达式的实例属性\n分为两类\n1. 修饰符（只读）\nRegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。用于忽略字符串大小写。\nRegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。用于全局匹配。\nRegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。用于设置匹配为多行模式。\n2. 其他属性\nRegExp.prototype.lastIndex：返回一个数值，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。\nRegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。\n\n# 实例方法\n## 1. RegExp.prototype.test()\ntest 方法返回布尔值，表示当前模式是否能匹配参数字符串\n```\n/a/.test('and') // true\n```\n## 2. RegExp.prototype.exec()\nexec方法，用来返回匹配结果\n如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null\n```\n/a/.exec('adbca')\n```\n如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的length属性等于组匹配的数量再加1。\n```\nString.prototype.match()：返回一个数组，成员是所有匹配的子字符串。\nString.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。\nString.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。\nString.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。\n```\n---\n# 字面量字符和元字符\n## 元字符\n1. 点字符（.)\n匹配除回车（\\r）、换行(\\n) 、行分隔符（\\u2028）和段分隔符（\\u2029）以外的所有字符。\n2. 位置字符\n```\n^ 表示字符串的开始位置\n$ 表示字符串的结束位置\n```\n3. 选择符（|）\n表示“或关系”\n4. 转义符\n匹配元字符本身可以在它们前面加反斜杠\n构造函数需要两次转义\n5. 特殊字符\n```\n\\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。\n[\\b] 匹配退格键(U+0008)，不要与\\b混淆。\n\\n 匹配换行键。\n\\r 匹配回车键。\n\\t 匹配制表符 tab（U+0009）。\n\\v 匹配垂直制表符（U+000B）。\n\\f 匹配换页符（U+000C）。\n\\0 匹配null字符（U+0000）。\n\\xhh 匹配一个以两位十六进制数（\\x00-\\xFF）表示的字符。\n\\uhhhh 匹配一个以四位十六进制数（\\u0000-\\uFFFF）表示的 Unicode 字符。\n```\n# 字符类\n字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[^xyz] 表示x、y、z之中任选一个匹配。\n1. 脱字符（^）：需在字符类第一位\n表示除了字符类之中的字符，其他字符都可以匹配。只有[^]，就表示匹配一切字符，包括换行符。相比之下，点号作为元字符（.）是不包括换行符的。\n2. 连字符（-）\n```\n[0-9.,]\n[0-9a-fA-F]\n[a-zA-Z0-9-]\n[1-31] // 不代表1到31，只代表1到3\n```\n# 预定义模式：某些常见模式的简写方式\n```\n\\d 匹配0-9之间的任一数字，相当于[0-9]。\n\\D 匹配所有0-9以外的字符，相当于[^0-9]。\n\\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。\n\\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。\n\\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \\t\\r\\n\\v\\f]。\n\\S 匹配非空格的字符，相当于[^ \\t\\r\\n\\v\\f]。\n\\b 匹配词的边界。\n\\B 匹配非词边界，即在词的内部\n```\n# 重复类\n模式的精确匹配次数，使用大括号（{}）表示。{n}表示恰好重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次。\n# 量词符：设定某个模式出现的次数\n```\n? 问号表示某个模式出现0次或1次，等同于{0, 1}。\n* 星号表示某个模式出现0次或多次，等同于{0,}。\n+ 加号表示某个模式出现1次或多次，等同于{1,}。\n```\n# 贪婪模式\n```\nvar s = 'aaa';\ns.match(/a+/) // [\"aaa\"]\n```\n贪婪模式改为非贪婪模式\n```\n*?：表示某个模式出现0次或多次，匹配时采用非贪婪模式。\n+?：表示某个模式出现1次或多次，匹配时采用非贪婪模式。\n```\n# 字符串去空格(replace)\n```\nvar str = '  #id div.class  ';\nstr.trim() // \"#id div.class\"\nstr.replace(/^\\s+|\\s+$/g, '') // \"#id div.class\"\n```\n```\n$&：匹配的子字符串。\n$`：匹配结果前面的文本。\n$’：匹配结果后面的文本。\n$n：匹配成功的第n组内容，n是从1开始的自然数。\n$$：指代美元符号$。\n```\n多多练习吧\n\n---\n本文仅供个人学习使用\n","slug":"正则表达式速记","published":1,"updated":"2019-01-18T14:43:30.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvr000lhw99hwr5klfi","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>如何学习：<a href=\"https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/chapter8.html\" target=\"_blank\" rel=\"noopener\">30分钟入门正则表达式</a><br><a href=\"https://www.regexpal.com/\" target=\"_blank\" rel=\"noopener\">工具</a><br>本文参（zhao）考（chao）<a href=\"https://wangdoc.com/javascript/stdlib/regexp.html\" target=\"_blank\" rel=\"noopener\">RegExp 对象</a>，该笔记只为速查</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>正则表达式（regular expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象，其体系参照 Perl 5 建立。</p>\n<h1 id=\"创建正则表达式的方法\"><a href=\"#创建正则表达式的方法\" class=\"headerlink\" title=\"创建正则表达式的方法\"></a>创建正则表达式的方法</h1><ol>\n<li><p>使用一个正则表达式字面量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = /xxx/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用 RegExp 对象的构造函数</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = new RegExp(&apos;xxx&apos;)</span><br></pre></td></tr></table></figure>\n<p>两种方法主要区别是：第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。</p>\n<h1 id=\"正则表达式的实例属性\"><a href=\"#正则表达式的实例属性\" class=\"headerlink\" title=\"正则表达式的实例属性\"></a>正则表达式的实例属性</h1><p>分为两类</p>\n<ol>\n<li>修饰符（只读）<br>RegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。用于忽略字符串大小写。<br>RegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。用于全局匹配。<br>RegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。用于设置匹配为多行模式。</li>\n<li>其他属性<br>RegExp.prototype.lastIndex：返回一个数值，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。<br>RegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。</li>\n</ol>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><h2 id=\"1-RegExp-prototype-test\"><a href=\"#1-RegExp-prototype-test\" class=\"headerlink\" title=\"1. RegExp.prototype.test()\"></a>1. RegExp.prototype.test()</h2><p>test 方法返回布尔值，表示当前模式是否能匹配参数字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a/.test(&apos;and&apos;) // true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-RegExp-prototype-exec\"><a href=\"#2-RegExp-prototype-exec\" class=\"headerlink\" title=\"2. RegExp.prototype.exec()\"></a>2. RegExp.prototype.exec()</h2><p>exec方法，用来返回匹配结果<br>如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a/.exec(&apos;adbca&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的length属性等于组匹配的数量再加1。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.prototype.match()：返回一个数组，成员是所有匹配的子字符串。</span><br><span class=\"line\">String.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。</span><br><span class=\"line\">String.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。</span><br><span class=\"line\">String.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"字面量字符和元字符\"><a href=\"#字面量字符和元字符\" class=\"headerlink\" title=\"字面量字符和元字符\"></a>字面量字符和元字符</h1><h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><ol>\n<li>点字符（.)<br>匹配除回车（\\r）、换行(\\n) 、行分隔符（\\u2028）和段分隔符（\\u2029）以外的所有字符。</li>\n<li><p>位置字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^ 表示字符串的开始位置</span><br><span class=\"line\">$ 表示字符串的结束位置</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择符（|）<br>表示“或关系”</p>\n</li>\n<li>转义符<br>匹配元字符本身可以在它们前面加反斜杠<br>构造函数需要两次转义</li>\n<li>特殊字符<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。</span><br><span class=\"line\">[\\b] 匹配退格键(U+0008)，不要与\\b混淆。</span><br><span class=\"line\">\\n 匹配换行键。</span><br><span class=\"line\">\\r 匹配回车键。</span><br><span class=\"line\">\\t 匹配制表符 tab（U+0009）。</span><br><span class=\"line\">\\v 匹配垂直制表符（U+000B）。</span><br><span class=\"line\">\\f 匹配换页符（U+000C）。</span><br><span class=\"line\">\\0 匹配null字符（U+0000）。</span><br><span class=\"line\">\\xhh 匹配一个以两位十六进制数（\\x00-\\xFF）表示的字符。</span><br><span class=\"line\">\\uhhhh 匹配一个以四位十六进制数（\\u0000-\\uFFFF）表示的 Unicode 字符。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h1><p>字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[^xyz] 表示x、y、z之中任选一个匹配。</p>\n<ol>\n<li>脱字符（^）：需在字符类第一位<br>表示除了字符类之中的字符，其他字符都可以匹配。只有[^]，就表示匹配一切字符，包括换行符。相比之下，点号作为元字符（.）是不包括换行符的。</li>\n<li>连字符（-）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0-9.,]</span><br><span class=\"line\">[0-9a-fA-F]</span><br><span class=\"line\">[a-zA-Z0-9-]</span><br><span class=\"line\">[1-31] // 不代表1到31，只代表1到3</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"预定义模式：某些常见模式的简写方式\"><a href=\"#预定义模式：某些常见模式的简写方式\" class=\"headerlink\" title=\"预定义模式：某些常见模式的简写方式\"></a>预定义模式：某些常见模式的简写方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d 匹配0-9之间的任一数字，相当于[0-9]。</span><br><span class=\"line\">\\D 匹配所有0-9以外的字符，相当于[^0-9]。</span><br><span class=\"line\">\\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。</span><br><span class=\"line\">\\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。</span><br><span class=\"line\">\\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \\t\\r\\n\\v\\f]。</span><br><span class=\"line\">\\S 匹配非空格的字符，相当于[^ \\t\\r\\n\\v\\f]。</span><br><span class=\"line\">\\b 匹配词的边界。</span><br><span class=\"line\">\\B 匹配非词边界，即在词的内部</span><br></pre></td></tr></table></figure>\n<h1 id=\"重复类\"><a href=\"#重复类\" class=\"headerlink\" title=\"重复类\"></a>重复类</h1><p>模式的精确匹配次数，使用大括号（{}）表示。{n}表示恰好重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次。</p>\n<h1 id=\"量词符：设定某个模式出现的次数\"><a href=\"#量词符：设定某个模式出现的次数\" class=\"headerlink\" title=\"量词符：设定某个模式出现的次数\"></a>量词符：设定某个模式出现的次数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? 问号表示某个模式出现0次或1次，等同于&#123;0, 1&#125;。</span><br><span class=\"line\">* 星号表示某个模式出现0次或多次，等同于&#123;0,&#125;。</span><br><span class=\"line\">+ 加号表示某个模式出现1次或多次，等同于&#123;1,&#125;。</span><br></pre></td></tr></table></figure>\n<h1 id=\"贪婪模式\"><a href=\"#贪婪模式\" class=\"headerlink\" title=\"贪婪模式\"></a>贪婪模式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = &apos;aaa&apos;;</span><br><span class=\"line\">s.match(/a+/) // [&quot;aaa&quot;]</span><br></pre></td></tr></table></figure>\n<p>贪婪模式改为非贪婪模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*?：表示某个模式出现0次或多次，匹配时采用非贪婪模式。</span><br><span class=\"line\">+?：表示某个模式出现1次或多次，匹配时采用非贪婪模式。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"字符串去空格-replace\"><a href=\"#字符串去空格-replace\" class=\"headerlink\" title=\"字符串去空格(replace)\"></a>字符串去空格(replace)</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;  #id div.class  &apos;;</span><br><span class=\"line\">str.trim() // &quot;#id div.class&quot;</span><br><span class=\"line\">str.replace(/^\\s+|\\s+$/g, &apos;&apos;) // &quot;#id div.class&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&amp;：匹配的子字符串。</span><br><span class=\"line\">$`：匹配结果前面的文本。</span><br><span class=\"line\">$’：匹配结果后面的文本。</span><br><span class=\"line\">$n：匹配成功的第n组内容，n是从1开始的自然数。</span><br><span class=\"line\">$$：指代美元符号$。</span><br></pre></td></tr></table></figure>\n<p>多多练习吧</p>\n<hr>\n<p>本文仅供个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>如何学习：<a href=\"https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/chapter8.html\" target=\"_blank\" rel=\"noopener\">30分钟入门正则表达式</a><br><a href=\"https://www.regexpal.com/\" target=\"_blank\" rel=\"noopener\">工具</a><br>本文参（zhao）考（chao）<a href=\"https://wangdoc.com/javascript/stdlib/regexp.html\" target=\"_blank\" rel=\"noopener\">RegExp 对象</a>，该笔记只为速查</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>正则表达式（regular expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象，其体系参照 Perl 5 建立。</p>\n<h1 id=\"创建正则表达式的方法\"><a href=\"#创建正则表达式的方法\" class=\"headerlink\" title=\"创建正则表达式的方法\"></a>创建正则表达式的方法</h1><ol>\n<li><p>使用一个正则表达式字面量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = /xxx/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用 RegExp 对象的构造函数</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = new RegExp(&apos;xxx&apos;)</span><br></pre></td></tr></table></figure>\n<p>两种方法主要区别是：第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。</p>\n<h1 id=\"正则表达式的实例属性\"><a href=\"#正则表达式的实例属性\" class=\"headerlink\" title=\"正则表达式的实例属性\"></a>正则表达式的实例属性</h1><p>分为两类</p>\n<ol>\n<li>修饰符（只读）<br>RegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。用于忽略字符串大小写。<br>RegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。用于全局匹配。<br>RegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。用于设置匹配为多行模式。</li>\n<li>其他属性<br>RegExp.prototype.lastIndex：返回一个数值，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。<br>RegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。</li>\n</ol>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><h2 id=\"1-RegExp-prototype-test\"><a href=\"#1-RegExp-prototype-test\" class=\"headerlink\" title=\"1. RegExp.prototype.test()\"></a>1. RegExp.prototype.test()</h2><p>test 方法返回布尔值，表示当前模式是否能匹配参数字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a/.test(&apos;and&apos;) // true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-RegExp-prototype-exec\"><a href=\"#2-RegExp-prototype-exec\" class=\"headerlink\" title=\"2. RegExp.prototype.exec()\"></a>2. RegExp.prototype.exec()</h2><p>exec方法，用来返回匹配结果<br>如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/a/.exec(&apos;adbca&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的length属性等于组匹配的数量再加1。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.prototype.match()：返回一个数组，成员是所有匹配的子字符串。</span><br><span class=\"line\">String.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。</span><br><span class=\"line\">String.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。</span><br><span class=\"line\">String.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"字面量字符和元字符\"><a href=\"#字面量字符和元字符\" class=\"headerlink\" title=\"字面量字符和元字符\"></a>字面量字符和元字符</h1><h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><ol>\n<li>点字符（.)<br>匹配除回车（\\r）、换行(\\n) 、行分隔符（\\u2028）和段分隔符（\\u2029）以外的所有字符。</li>\n<li><p>位置字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^ 表示字符串的开始位置</span><br><span class=\"line\">$ 表示字符串的结束位置</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择符（|）<br>表示“或关系”</p>\n</li>\n<li>转义符<br>匹配元字符本身可以在它们前面加反斜杠<br>构造函数需要两次转义</li>\n<li>特殊字符<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。</span><br><span class=\"line\">[\\b] 匹配退格键(U+0008)，不要与\\b混淆。</span><br><span class=\"line\">\\n 匹配换行键。</span><br><span class=\"line\">\\r 匹配回车键。</span><br><span class=\"line\">\\t 匹配制表符 tab（U+0009）。</span><br><span class=\"line\">\\v 匹配垂直制表符（U+000B）。</span><br><span class=\"line\">\\f 匹配换页符（U+000C）。</span><br><span class=\"line\">\\0 匹配null字符（U+0000）。</span><br><span class=\"line\">\\xhh 匹配一个以两位十六进制数（\\x00-\\xFF）表示的字符。</span><br><span class=\"line\">\\uhhhh 匹配一个以四位十六进制数（\\u0000-\\uFFFF）表示的 Unicode 字符。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h1><p>字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[^xyz] 表示x、y、z之中任选一个匹配。</p>\n<ol>\n<li>脱字符（^）：需在字符类第一位<br>表示除了字符类之中的字符，其他字符都可以匹配。只有[^]，就表示匹配一切字符，包括换行符。相比之下，点号作为元字符（.）是不包括换行符的。</li>\n<li>连字符（-）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0-9.,]</span><br><span class=\"line\">[0-9a-fA-F]</span><br><span class=\"line\">[a-zA-Z0-9-]</span><br><span class=\"line\">[1-31] // 不代表1到31，只代表1到3</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"预定义模式：某些常见模式的简写方式\"><a href=\"#预定义模式：某些常见模式的简写方式\" class=\"headerlink\" title=\"预定义模式：某些常见模式的简写方式\"></a>预定义模式：某些常见模式的简写方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d 匹配0-9之间的任一数字，相当于[0-9]。</span><br><span class=\"line\">\\D 匹配所有0-9以外的字符，相当于[^0-9]。</span><br><span class=\"line\">\\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。</span><br><span class=\"line\">\\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。</span><br><span class=\"line\">\\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \\t\\r\\n\\v\\f]。</span><br><span class=\"line\">\\S 匹配非空格的字符，相当于[^ \\t\\r\\n\\v\\f]。</span><br><span class=\"line\">\\b 匹配词的边界。</span><br><span class=\"line\">\\B 匹配非词边界，即在词的内部</span><br></pre></td></tr></table></figure>\n<h1 id=\"重复类\"><a href=\"#重复类\" class=\"headerlink\" title=\"重复类\"></a>重复类</h1><p>模式的精确匹配次数，使用大括号（{}）表示。{n}表示恰好重复n次，{n,}表示至少重复n次，{n,m}表示重复不少于n次，不多于m次。</p>\n<h1 id=\"量词符：设定某个模式出现的次数\"><a href=\"#量词符：设定某个模式出现的次数\" class=\"headerlink\" title=\"量词符：设定某个模式出现的次数\"></a>量词符：设定某个模式出现的次数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? 问号表示某个模式出现0次或1次，等同于&#123;0, 1&#125;。</span><br><span class=\"line\">* 星号表示某个模式出现0次或多次，等同于&#123;0,&#125;。</span><br><span class=\"line\">+ 加号表示某个模式出现1次或多次，等同于&#123;1,&#125;。</span><br></pre></td></tr></table></figure>\n<h1 id=\"贪婪模式\"><a href=\"#贪婪模式\" class=\"headerlink\" title=\"贪婪模式\"></a>贪婪模式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = &apos;aaa&apos;;</span><br><span class=\"line\">s.match(/a+/) // [&quot;aaa&quot;]</span><br></pre></td></tr></table></figure>\n<p>贪婪模式改为非贪婪模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*?：表示某个模式出现0次或多次，匹配时采用非贪婪模式。</span><br><span class=\"line\">+?：表示某个模式出现1次或多次，匹配时采用非贪婪模式。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"字符串去空格-replace\"><a href=\"#字符串去空格-replace\" class=\"headerlink\" title=\"字符串去空格(replace)\"></a>字符串去空格(replace)</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;  #id div.class  &apos;;</span><br><span class=\"line\">str.trim() // &quot;#id div.class&quot;</span><br><span class=\"line\">str.replace(/^\\s+|\\s+$/g, &apos;&apos;) // &quot;#id div.class&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&amp;：匹配的子字符串。</span><br><span class=\"line\">$`：匹配结果前面的文本。</span><br><span class=\"line\">$’：匹配结果后面的文本。</span><br><span class=\"line\">$n：匹配成功的第n组内容，n是从1开始的自然数。</span><br><span class=\"line\">$$：指代美元符号$。</span><br></pre></td></tr></table></figure>\n<p>多多练习吧</p>\n<hr>\n<p>本文仅供个人学习使用</p>\n"},{"title":"搞懂这些 你就理解 this 了","date":"2018-08-26T16:48:41.000Z","_content":"新人推荐先看阮大大的书的：[相关章节](https://wangdoc.com/javascript/oop/this.html#%E6%B6%B5%E4%B9%89)\n有关 this 的理解，方老师的这篇 [文章](https://zhuanlan.zhihu.com/p/23804247) 已经很完美了\n\n**你应该已经知道并熟记 this 是 call 的第一个参数**\n下面是一些 this 的特殊情况\n```\n// 例 1\nbutton.onclick = function f1(){\n    console.log(this) // 触发事件的元素。  button\n}\n```\n1 结果：\nf1.call(???)\nthis 是什么？去看 onclick 的源码呀 -> 做不到\nMDN 的开发者知道 onclick 的源码\nMDN 的开发者写了文档\n看文档呀\n```\n// 例 2\nbutton.addEventListener('click', function(){\n    console.log(this) // 该元素的引用 button\n}\n```\n2 结果：\n去看 addEventListener 的源码呀 -> 做不到\nMDN 的开发者知道 addEventListener 的源码\nMDN 的开发者写了文档\n看文档呀\n```\n// 例 3\n$('ul').on('click', 'li' /*selector*/, function(){\n    console.log(this) //this 则代表了与 selector 相匹配的元素。\n    // li 元素\n})\n```\n3 结果：\n去看 on 的源码呀 -> 做不到\njQuery 的开发者知道 onclick 的源码\njQuery 的开发者写了文档\n看文档呀\n\n**特例：我可以传一个 this 给它**\n```\nbutton.onclick.call({name: 'ada'})\n```\n由于 this 是 call 的第一个参数\n这样子 button.onclick 的 this 就变成了 {name:'ada'}\n\n**终极例题**\n理解下面例子，基本上 this 就明白得差不多了\n```\nfunction X(){\n    return object = {\n        name: 'object',\n        options: null,\n        f1(x){ \n            // 3 下面的 this ？不就是 f1.call()的 this，就是 2 里面的 this：object\n            this.options = x // 4 这里 x 是 options\n            this.f2() // 5 this.f2.call() 显然这里 this 也是 object\n        },\n        f2(){\n            this.options.f2.call(this) // 6 这句代码4告诉我们是 options.f2.call(this) 我们把 this：object 传给了 options （特例）\n        }\n    }\n}\n\nvar options = {\n    name: 'options',\n    f1(){},\n    f2(){\n        console.log(this) // 问 this 是啥 ? // 7  传过来的 object 啊\n    }\n}\n\nvar x = X() // 1 这里的 x 是啥？X() return 的 object\nx.f1(options) // 2 x.f1.call(x,options) 显然这里 this 就是 x === object\n```\n问题：上面代码打印的 this 是什么？\n正确答案：object ，思路已经在注释里，按数字顺序理解\n\n---\n\n参考：\n[你怎么还没搞懂 this？](https://zhuanlan.zhihu.com/p/25991271)","source":"_posts/搞懂这些-你就理解-this-了.md","raw":"---\ntitle: 搞懂这些 你就理解 this 了\ndate: 2018-08-27 00:48:41\ntags:\n---\n新人推荐先看阮大大的书的：[相关章节](https://wangdoc.com/javascript/oop/this.html#%E6%B6%B5%E4%B9%89)\n有关 this 的理解，方老师的这篇 [文章](https://zhuanlan.zhihu.com/p/23804247) 已经很完美了\n\n**你应该已经知道并熟记 this 是 call 的第一个参数**\n下面是一些 this 的特殊情况\n```\n// 例 1\nbutton.onclick = function f1(){\n    console.log(this) // 触发事件的元素。  button\n}\n```\n1 结果：\nf1.call(???)\nthis 是什么？去看 onclick 的源码呀 -> 做不到\nMDN 的开发者知道 onclick 的源码\nMDN 的开发者写了文档\n看文档呀\n```\n// 例 2\nbutton.addEventListener('click', function(){\n    console.log(this) // 该元素的引用 button\n}\n```\n2 结果：\n去看 addEventListener 的源码呀 -> 做不到\nMDN 的开发者知道 addEventListener 的源码\nMDN 的开发者写了文档\n看文档呀\n```\n// 例 3\n$('ul').on('click', 'li' /*selector*/, function(){\n    console.log(this) //this 则代表了与 selector 相匹配的元素。\n    // li 元素\n})\n```\n3 结果：\n去看 on 的源码呀 -> 做不到\njQuery 的开发者知道 onclick 的源码\njQuery 的开发者写了文档\n看文档呀\n\n**特例：我可以传一个 this 给它**\n```\nbutton.onclick.call({name: 'ada'})\n```\n由于 this 是 call 的第一个参数\n这样子 button.onclick 的 this 就变成了 {name:'ada'}\n\n**终极例题**\n理解下面例子，基本上 this 就明白得差不多了\n```\nfunction X(){\n    return object = {\n        name: 'object',\n        options: null,\n        f1(x){ \n            // 3 下面的 this ？不就是 f1.call()的 this，就是 2 里面的 this：object\n            this.options = x // 4 这里 x 是 options\n            this.f2() // 5 this.f2.call() 显然这里 this 也是 object\n        },\n        f2(){\n            this.options.f2.call(this) // 6 这句代码4告诉我们是 options.f2.call(this) 我们把 this：object 传给了 options （特例）\n        }\n    }\n}\n\nvar options = {\n    name: 'options',\n    f1(){},\n    f2(){\n        console.log(this) // 问 this 是啥 ? // 7  传过来的 object 啊\n    }\n}\n\nvar x = X() // 1 这里的 x 是啥？X() return 的 object\nx.f1(options) // 2 x.f1.call(x,options) 显然这里 this 就是 x === object\n```\n问题：上面代码打印的 this 是什么？\n正确答案：object ，思路已经在注释里，按数字顺序理解\n\n---\n\n参考：\n[你怎么还没搞懂 this？](https://zhuanlan.zhihu.com/p/25991271)","slug":"搞懂这些-你就理解-this-了","published":1,"updated":"2019-01-18T14:52:15.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvr000mhw994zst72gc","content":"<p>新人推荐先看阮大大的书的：<a href=\"https://wangdoc.com/javascript/oop/this.html#%E6%B6%B5%E4%B9%89\" target=\"_blank\" rel=\"noopener\">相关章节</a><br>有关 this 的理解，方老师的这篇 <a href=\"https://zhuanlan.zhihu.com/p/23804247\" target=\"_blank\" rel=\"noopener\">文章</a> 已经很完美了</p>\n<p><strong>你应该已经知道并熟记 this 是 call 的第一个参数</strong><br>下面是一些 this 的特殊情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 1</span><br><span class=\"line\">button.onclick = function f1()&#123;</span><br><span class=\"line\">    console.log(this) // 触发事件的元素。  button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>1 结果：<br>f1.call(???)<br>this 是什么？去看 onclick 的源码呀 -&gt; 做不到<br>MDN 的开发者知道 onclick 的源码<br>MDN 的开发者写了文档<br>看文档呀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 2</span><br><span class=\"line\">button.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class=\"line\">    console.log(this) // 该元素的引用 button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2 结果：<br>去看 addEventListener 的源码呀 -&gt; 做不到<br>MDN 的开发者知道 addEventListener 的源码<br>MDN 的开发者写了文档<br>看文档呀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 3</span><br><span class=\"line\">$(&apos;ul&apos;).on(&apos;click&apos;, &apos;li&apos; /*selector*/, function()&#123;</span><br><span class=\"line\">    console.log(this) //this 则代表了与 selector 相匹配的元素。</span><br><span class=\"line\">    // li 元素</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3 结果：<br>去看 on 的源码呀 -&gt; 做不到<br>jQuery 的开发者知道 onclick 的源码<br>jQuery 的开发者写了文档<br>看文档呀</p>\n<p><strong>特例：我可以传一个 this 给它</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.onclick.call(&#123;name: &apos;ada&apos;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>由于 this 是 call 的第一个参数<br>这样子 button.onclick 的 this 就变成了 {name:’ada’}</p>\n<p><strong>终极例题</strong><br>理解下面例子，基本上 this 就明白得差不多了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function X()&#123;</span><br><span class=\"line\">    return object = &#123;</span><br><span class=\"line\">        name: &apos;object&apos;,</span><br><span class=\"line\">        options: null,</span><br><span class=\"line\">        f1(x)&#123; </span><br><span class=\"line\">            // 3 下面的 this ？不就是 f1.call()的 this，就是 2 里面的 this：object</span><br><span class=\"line\">            this.options = x // 4 这里 x 是 options</span><br><span class=\"line\">            this.f2() // 5 this.f2.call() 显然这里 this 也是 object</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        f2()&#123;</span><br><span class=\"line\">            this.options.f2.call(this) // 6 这句代码4告诉我们是 options.f2.call(this) 我们把 this：object 传给了 options （特例）</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">    name: &apos;options&apos;,</span><br><span class=\"line\">    f1()&#123;&#125;,</span><br><span class=\"line\">    f2()&#123;</span><br><span class=\"line\">        console.log(this) // 问 this 是啥 ? // 7  传过来的 object 啊</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var x = X() // 1 这里的 x 是啥？X() return 的 object</span><br><span class=\"line\">x.f1(options) // 2 x.f1.call(x,options) 显然这里 this 就是 x === object</span><br></pre></td></tr></table></figure></p>\n<p>问题：上面代码打印的 this 是什么？<br>正确答案：object ，思路已经在注释里，按数字顺序理解</p>\n<hr>\n<p>参考：<br><a href=\"https://zhuanlan.zhihu.com/p/25991271\" target=\"_blank\" rel=\"noopener\">你怎么还没搞懂 this？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>新人推荐先看阮大大的书的：<a href=\"https://wangdoc.com/javascript/oop/this.html#%E6%B6%B5%E4%B9%89\" target=\"_blank\" rel=\"noopener\">相关章节</a><br>有关 this 的理解，方老师的这篇 <a href=\"https://zhuanlan.zhihu.com/p/23804247\" target=\"_blank\" rel=\"noopener\">文章</a> 已经很完美了</p>\n<p><strong>你应该已经知道并熟记 this 是 call 的第一个参数</strong><br>下面是一些 this 的特殊情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 1</span><br><span class=\"line\">button.onclick = function f1()&#123;</span><br><span class=\"line\">    console.log(this) // 触发事件的元素。  button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>1 结果：<br>f1.call(???)<br>this 是什么？去看 onclick 的源码呀 -&gt; 做不到<br>MDN 的开发者知道 onclick 的源码<br>MDN 的开发者写了文档<br>看文档呀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 2</span><br><span class=\"line\">button.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class=\"line\">    console.log(this) // 该元素的引用 button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2 结果：<br>去看 addEventListener 的源码呀 -&gt; 做不到<br>MDN 的开发者知道 addEventListener 的源码<br>MDN 的开发者写了文档<br>看文档呀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例 3</span><br><span class=\"line\">$(&apos;ul&apos;).on(&apos;click&apos;, &apos;li&apos; /*selector*/, function()&#123;</span><br><span class=\"line\">    console.log(this) //this 则代表了与 selector 相匹配的元素。</span><br><span class=\"line\">    // li 元素</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3 结果：<br>去看 on 的源码呀 -&gt; 做不到<br>jQuery 的开发者知道 onclick 的源码<br>jQuery 的开发者写了文档<br>看文档呀</p>\n<p><strong>特例：我可以传一个 this 给它</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.onclick.call(&#123;name: &apos;ada&apos;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>由于 this 是 call 的第一个参数<br>这样子 button.onclick 的 this 就变成了 {name:’ada’}</p>\n<p><strong>终极例题</strong><br>理解下面例子，基本上 this 就明白得差不多了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function X()&#123;</span><br><span class=\"line\">    return object = &#123;</span><br><span class=\"line\">        name: &apos;object&apos;,</span><br><span class=\"line\">        options: null,</span><br><span class=\"line\">        f1(x)&#123; </span><br><span class=\"line\">            // 3 下面的 this ？不就是 f1.call()的 this，就是 2 里面的 this：object</span><br><span class=\"line\">            this.options = x // 4 这里 x 是 options</span><br><span class=\"line\">            this.f2() // 5 this.f2.call() 显然这里 this 也是 object</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        f2()&#123;</span><br><span class=\"line\">            this.options.f2.call(this) // 6 这句代码4告诉我们是 options.f2.call(this) 我们把 this：object 传给了 options （特例）</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">    name: &apos;options&apos;,</span><br><span class=\"line\">    f1()&#123;&#125;,</span><br><span class=\"line\">    f2()&#123;</span><br><span class=\"line\">        console.log(this) // 问 this 是啥 ? // 7  传过来的 object 啊</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var x = X() // 1 这里的 x 是啥？X() return 的 object</span><br><span class=\"line\">x.f1(options) // 2 x.f1.call(x,options) 显然这里 this 就是 x === object</span><br></pre></td></tr></table></figure></p>\n<p>问题：上面代码打印的 this 是什么？<br>正确答案：object ，思路已经在注释里，按数字顺序理解</p>\n<hr>\n<p>参考：<br><a href=\"https://zhuanlan.zhihu.com/p/25991271\" target=\"_blank\" rel=\"noopener\">你怎么还没搞懂 this？</a></p>\n"},{"title":"理解 HTTP","date":"2018-06-07T14:16:57.000Z","_content":"# **什么是HTTP**\n\n**HTTP（HyperText Transfer Protocol）**超文本传输协议 [维基百科](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0)\n\n**HTTP 的作用就是指导浏览器和服务器如何进行沟通**\n\n**Client （浏览器）→ HTTP（请求）→Server（80端口）→HTTP响应→Client（浏览器）**\n\n![HTTP请求与响应](https://upload-images.jianshu.io/upload_images/7094266-e2b8fabd058d2313.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n浏览器负责发起请求\n\n服务器在 80 端口接收请求\n\n服务器负责返回内容（响应）\n\n浏览器负责下载响应内容\n\n* * *\n\n# **HTTP 请求**\n\n![请求的格式](https://upload-images.jianshu.io/upload_images/7094266-3255f775c068ece3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n请求最多包含四部分（图中1、2、3、4），最少包含三部分。（也就是说第四部分可以为空）\n\n第三部分永远都是一个回车（\\n）\n\n[动词](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95)有 GET/POST/PUT/PATCH/DELETE/HEAD/OPTIONS 等\n\n这里的路径包括「查询参数」，但不包括「锚点」\n\n如果你没有写路径，那么路径默认为 /\n\n第 2 部分中的 Content-Type 标注了第 4 部分的格式\n\n# **用 Chrome 发请求**\n\n打开 Network（F12）\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ac46ff3c447bfe4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n地址栏输入网址，如www.baidu.com\n\n在 Network 点击，查看 request，点击「view source」\n\n![](https://upload-images.jianshu.io/upload_images/7094266-a26b808214a7f891.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到请求的前三部分了\n\n如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到\n\n* * *\n\n# **HTTP 响应**\n\n请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了\n\n![响应的格式](https://upload-images.jianshu.io/upload_images/7094266-0a2a709c31b4f71e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n状态码是服务器对浏览器说的话\n\n[1xx消息](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#1xx%E6%B6%88%E6%81%AF)——请求已被服务器接收，继续处理\n\n[2xx成功](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#2xx%E6%88%90%E5%8A%9F)——请求已成功被服务器接收、理解、并接受\n\n[3xx重定向](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#3xx%E9%87%8D%E5%AE%9A%E5%90%91)——需要后续操作才能完成这一请求\n\n[4xx请求错误](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#4xx%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF)——请求含有词法错误或者无法被执行\n\n[5xx服务器错误](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#5xx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF)——服务器在处理某个正确请求时发生错误\n\n状态解释没什么用\n\n第 2 部分中的 Content-Type 标注了第 4 部分的格式\n\n第 2 部分中的 Content-Type 遵循 MIME 规范\n\n# **用 Chrome 查看响应**\n\n打开 Network\n\n输入网址\n\n选中第一个响应\n\n查看 Response Headers，点击「view source」\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c1ef5f68fe12bac5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n你会看到响应的前两部分\n\n查看 Response 或者 Preview，你会看到响应的第 4 部分\n\n* * *\n\n**也可以用命令行发请求并得到响应**\n\n用到**curl**命令，具体可以命令行[释义](https://explainshell.com/)（命令行及命令行释义可以看我相关[blog](https://www.jianshu.com/p/dcf636cbe6af)）\n\n如：**curl -s -v -H  -- \"https://www.baidu.com\"**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-fb73225d2f20d079.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**请求的内容为**\n```\n> GET / HTTP/1.1\n\n> Host: www.baidu.com\n\n> User-Agent: curl/7.59.0\n\n> Accept: */*\n\n>\n\n**响应的内容为**\n\n< HTTP/1.1 200 OK\n\n< Accept-Ranges: bytes\n\n< Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform\n\n< Connection: Keep-Alive\n\n< Content-Length: 2443\n\n< Content-Type: text/html\n\n< Date: Thu, 07 Jun 2018 13:54:43 GMT\n\n< Etag: \"58860411-98b\"\n\n< Last-Modified: Mon, 23 Jan 2017 13:24:33 GMT\n\n< Pragma: no-cache\n\n* Server bfe/1.0.8.18 is not blacklisted\n\n< Server: bfe/1.0.8.18\n\n< Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/\n\n<\n```\n还有很多可以尝试的 **curl** 命令\n\n可以参考 [链接](http://man.linuxde.net/curl)\n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n一些参考：\n\n[HTTP-维基百科](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n\n[curl命令](http://man.linuxde.net/curl)","source":"_posts/理解HTTP.md","raw":"---\ntitle: 理解 HTTP\ndate: 2018-06-07 22:16:57\ntags:\n---\n# **什么是HTTP**\n\n**HTTP（HyperText Transfer Protocol）**超文本传输协议 [维基百科](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0)\n\n**HTTP 的作用就是指导浏览器和服务器如何进行沟通**\n\n**Client （浏览器）→ HTTP（请求）→Server（80端口）→HTTP响应→Client（浏览器）**\n\n![HTTP请求与响应](https://upload-images.jianshu.io/upload_images/7094266-e2b8fabd058d2313.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n浏览器负责发起请求\n\n服务器在 80 端口接收请求\n\n服务器负责返回内容（响应）\n\n浏览器负责下载响应内容\n\n* * *\n\n# **HTTP 请求**\n\n![请求的格式](https://upload-images.jianshu.io/upload_images/7094266-3255f775c068ece3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n请求最多包含四部分（图中1、2、3、4），最少包含三部分。（也就是说第四部分可以为空）\n\n第三部分永远都是一个回车（\\n）\n\n[动词](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95)有 GET/POST/PUT/PATCH/DELETE/HEAD/OPTIONS 等\n\n这里的路径包括「查询参数」，但不包括「锚点」\n\n如果你没有写路径，那么路径默认为 /\n\n第 2 部分中的 Content-Type 标注了第 4 部分的格式\n\n# **用 Chrome 发请求**\n\n打开 Network（F12）\n\n![](https://upload-images.jianshu.io/upload_images/7094266-ac46ff3c447bfe4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n地址栏输入网址，如www.baidu.com\n\n在 Network 点击，查看 request，点击「view source」\n\n![](https://upload-images.jianshu.io/upload_images/7094266-a26b808214a7f891.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到请求的前三部分了\n\n如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到\n\n* * *\n\n# **HTTP 响应**\n\n请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了\n\n![响应的格式](https://upload-images.jianshu.io/upload_images/7094266-0a2a709c31b4f71e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n状态码是服务器对浏览器说的话\n\n[1xx消息](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#1xx%E6%B6%88%E6%81%AF)——请求已被服务器接收，继续处理\n\n[2xx成功](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#2xx%E6%88%90%E5%8A%9F)——请求已成功被服务器接收、理解、并接受\n\n[3xx重定向](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#3xx%E9%87%8D%E5%AE%9A%E5%90%91)——需要后续操作才能完成这一请求\n\n[4xx请求错误](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#4xx%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF)——请求含有词法错误或者无法被执行\n\n[5xx服务器错误](https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#5xx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF)——服务器在处理某个正确请求时发生错误\n\n状态解释没什么用\n\n第 2 部分中的 Content-Type 标注了第 4 部分的格式\n\n第 2 部分中的 Content-Type 遵循 MIME 规范\n\n# **用 Chrome 查看响应**\n\n打开 Network\n\n输入网址\n\n选中第一个响应\n\n查看 Response Headers，点击「view source」\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c1ef5f68fe12bac5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n你会看到响应的前两部分\n\n查看 Response 或者 Preview，你会看到响应的第 4 部分\n\n* * *\n\n**也可以用命令行发请求并得到响应**\n\n用到**curl**命令，具体可以命令行[释义](https://explainshell.com/)（命令行及命令行释义可以看我相关[blog](https://www.jianshu.com/p/dcf636cbe6af)）\n\n如：**curl -s -v -H  -- \"https://www.baidu.com\"**\n\n![](https://upload-images.jianshu.io/upload_images/7094266-fb73225d2f20d079.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**请求的内容为**\n```\n> GET / HTTP/1.1\n\n> Host: www.baidu.com\n\n> User-Agent: curl/7.59.0\n\n> Accept: */*\n\n>\n\n**响应的内容为**\n\n< HTTP/1.1 200 OK\n\n< Accept-Ranges: bytes\n\n< Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform\n\n< Connection: Keep-Alive\n\n< Content-Length: 2443\n\n< Content-Type: text/html\n\n< Date: Thu, 07 Jun 2018 13:54:43 GMT\n\n< Etag: \"58860411-98b\"\n\n< Last-Modified: Mon, 23 Jan 2017 13:24:33 GMT\n\n< Pragma: no-cache\n\n* Server bfe/1.0.8.18 is not blacklisted\n\n< Server: bfe/1.0.8.18\n\n< Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/\n\n<\n```\n还有很多可以尝试的 **curl** 命令\n\n可以参考 [链接](http://man.linuxde.net/curl)\n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n一些参考：\n\n[HTTP-维基百科](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n\n[curl命令](http://man.linuxde.net/curl)","slug":"理解HTTP","published":1,"updated":"2019-01-22T14:11:46.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvs000nhw998ulmx3k9","content":"<h1 id=\"什么是HTTP\"><a href=\"#什么是HTTP\" class=\"headerlink\" title=\"什么是HTTP\"></a><strong>什么是HTTP</strong></h1><p><strong>HTTP（HyperText Transfer Protocol）</strong>超文本传输协议 <a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<p><strong>HTTP 的作用就是指导浏览器和服务器如何进行沟通</strong></p>\n<p><strong>Client （浏览器）→ HTTP（请求）→Server（80端口）→HTTP响应→Client（浏览器）</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-e2b8fabd058d2313.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"HTTP请求与响应\"></p>\n<p>浏览器负责发起请求</p>\n<p>服务器在 80 端口接收请求</p>\n<p>服务器负责返回内容（响应）</p>\n<p>浏览器负责下载响应内容</p>\n<hr>\n<h1 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a><strong>HTTP 请求</strong></h1><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-3255f775c068ece3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"请求的格式\"></p>\n<p>请求最多包含四部分（图中1、2、3、4），最少包含三部分。（也就是说第四部分可以为空）</p>\n<p>第三部分永远都是一个回车（\\n）</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\">动词</a>有 GET/POST/PUT/PATCH/DELETE/HEAD/OPTIONS 等</p>\n<p>这里的路径包括「查询参数」，但不包括「锚点」</p>\n<p>如果你没有写路径，那么路径默认为 /</p>\n<p>第 2 部分中的 Content-Type 标注了第 4 部分的格式</p>\n<h1 id=\"用-Chrome-发请求\"><a href=\"#用-Chrome-发请求\" class=\"headerlink\" title=\"用 Chrome 发请求\"></a><strong>用 Chrome 发请求</strong></h1><p>打开 Network（F12）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ac46ff3c447bfe4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>地址栏输入网址，如<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a></p>\n<p>在 Network 点击，查看 request，点击「view source」</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a26b808214a7f891.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到请求的前三部分了</p>\n<p>如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</p>\n<hr>\n<h1 id=\"HTTP-响应\"><a href=\"#HTTP-响应\" class=\"headerlink\" title=\"HTTP 响应\"></a><strong>HTTP 响应</strong></h1><p>请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0a2a709c31b4f71e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"响应的格式\"></p>\n<p>状态码是服务器对浏览器说的话</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#1xx%E6%B6%88%E6%81%AF\" target=\"_blank\" rel=\"noopener\">1xx消息</a>——请求已被服务器接收，继续处理</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#2xx%E6%88%90%E5%8A%9F\" target=\"_blank\" rel=\"noopener\">2xx成功</a>——请求已成功被服务器接收、理解、并接受</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#3xx%E9%87%8D%E5%AE%9A%E5%90%91\" target=\"_blank\" rel=\"noopener\">3xx重定向</a>——需要后续操作才能完成这一请求</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#4xx%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF\" target=\"_blank\" rel=\"noopener\">4xx请求错误</a>——请求含有词法错误或者无法被执行</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#5xx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF\" target=\"_blank\" rel=\"noopener\">5xx服务器错误</a>——服务器在处理某个正确请求时发生错误</p>\n<p>状态解释没什么用</p>\n<p>第 2 部分中的 Content-Type 标注了第 4 部分的格式</p>\n<p>第 2 部分中的 Content-Type 遵循 MIME 规范</p>\n<h1 id=\"用-Chrome-查看响应\"><a href=\"#用-Chrome-查看响应\" class=\"headerlink\" title=\"用 Chrome 查看响应\"></a><strong>用 Chrome 查看响应</strong></h1><p>打开 Network</p>\n<p>输入网址</p>\n<p>选中第一个响应</p>\n<p>查看 Response Headers，点击「view source」</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c1ef5f68fe12bac5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>你会看到响应的前两部分</p>\n<p>查看 Response 或者 Preview，你会看到响应的第 4 部分</p>\n<hr>\n<p><strong>也可以用命令行发请求并得到响应</strong></p>\n<p>用到<strong>curl</strong>命令，具体可以命令行<a href=\"https://explainshell.com/\" target=\"_blank\" rel=\"noopener\">释义</a>（命令行及命令行释义可以看我相关<a href=\"https://www.jianshu.com/p/dcf636cbe6af\" target=\"_blank\" rel=\"noopener\">blog</a>）</p>\n<p>如：<strong>curl -s -v -H  – “<a href=\"https://www.baidu.com&quot;\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com&quot;</a></strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fb73225d2f20d079.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>请求的内容为</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; GET / HTTP/1.1</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Host: www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; User-Agent: curl/7.59.0</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">**响应的内容为**</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; HTTP/1.1 200 OK</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Accept-Ranges: bytes</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Connection: Keep-Alive</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Content-Length: 2443</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Content-Type: text/html</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Date: Thu, 07 Jun 2018 13:54:43 GMT</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Etag: &quot;58860411-98b&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Last-Modified: Mon, 23 Jan 2017 13:24:33 GMT</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Pragma: no-cache</span><br><span class=\"line\"></span><br><span class=\"line\">* Server bfe/1.0.8.18 is not blacklisted</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Server: bfe/1.0.8.18</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;</span><br></pre></td></tr></table></figure></p>\n<p>还有很多可以尝试的 <strong>curl</strong> 命令</p>\n<p>可以参考 <a href=\"http://man.linuxde.net/curl\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p>一些参考：</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener\">HTTP-维基百科</a></p>\n<p><a href=\"http://man.linuxde.net/curl\" target=\"_blank\" rel=\"noopener\">curl命令</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是HTTP\"><a href=\"#什么是HTTP\" class=\"headerlink\" title=\"什么是HTTP\"></a><strong>什么是HTTP</strong></h1><p><strong>HTTP（HyperText Transfer Protocol）</strong>超文本传输协议 <a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<p><strong>HTTP 的作用就是指导浏览器和服务器如何进行沟通</strong></p>\n<p><strong>Client （浏览器）→ HTTP（请求）→Server（80端口）→HTTP响应→Client（浏览器）</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-e2b8fabd058d2313.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"HTTP请求与响应\"></p>\n<p>浏览器负责发起请求</p>\n<p>服务器在 80 端口接收请求</p>\n<p>服务器负责返回内容（响应）</p>\n<p>浏览器负责下载响应内容</p>\n<hr>\n<h1 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a><strong>HTTP 请求</strong></h1><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-3255f775c068ece3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"请求的格式\"></p>\n<p>请求最多包含四部分（图中1、2、3、4），最少包含三部分。（也就是说第四部分可以为空）</p>\n<p>第三部分永远都是一个回车（\\n）</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener\">动词</a>有 GET/POST/PUT/PATCH/DELETE/HEAD/OPTIONS 等</p>\n<p>这里的路径包括「查询参数」，但不包括「锚点」</p>\n<p>如果你没有写路径，那么路径默认为 /</p>\n<p>第 2 部分中的 Content-Type 标注了第 4 部分的格式</p>\n<h1 id=\"用-Chrome-发请求\"><a href=\"#用-Chrome-发请求\" class=\"headerlink\" title=\"用 Chrome 发请求\"></a><strong>用 Chrome 发请求</strong></h1><p>打开 Network（F12）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-ac46ff3c447bfe4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>地址栏输入网址，如<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a></p>\n<p>在 Network 点击，查看 request，点击「view source」</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a26b808214a7f891.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到请求的前三部分了</p>\n<p>如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</p>\n<hr>\n<h1 id=\"HTTP-响应\"><a href=\"#HTTP-响应\" class=\"headerlink\" title=\"HTTP 响应\"></a><strong>HTTP 响应</strong></h1><p>请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-0a2a709c31b4f71e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"响应的格式\"></p>\n<p>状态码是服务器对浏览器说的话</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#1xx%E6%B6%88%E6%81%AF\" target=\"_blank\" rel=\"noopener\">1xx消息</a>——请求已被服务器接收，继续处理</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#2xx%E6%88%90%E5%8A%9F\" target=\"_blank\" rel=\"noopener\">2xx成功</a>——请求已成功被服务器接收、理解、并接受</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#3xx%E9%87%8D%E5%AE%9A%E5%90%91\" target=\"_blank\" rel=\"noopener\">3xx重定向</a>——需要后续操作才能完成这一请求</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#4xx%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF\" target=\"_blank\" rel=\"noopener\">4xx请求错误</a>——请求含有词法错误或者无法被执行</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#5xx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF\" target=\"_blank\" rel=\"noopener\">5xx服务器错误</a>——服务器在处理某个正确请求时发生错误</p>\n<p>状态解释没什么用</p>\n<p>第 2 部分中的 Content-Type 标注了第 4 部分的格式</p>\n<p>第 2 部分中的 Content-Type 遵循 MIME 规范</p>\n<h1 id=\"用-Chrome-查看响应\"><a href=\"#用-Chrome-查看响应\" class=\"headerlink\" title=\"用 Chrome 查看响应\"></a><strong>用 Chrome 查看响应</strong></h1><p>打开 Network</p>\n<p>输入网址</p>\n<p>选中第一个响应</p>\n<p>查看 Response Headers，点击「view source」</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c1ef5f68fe12bac5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>你会看到响应的前两部分</p>\n<p>查看 Response 或者 Preview，你会看到响应的第 4 部分</p>\n<hr>\n<p><strong>也可以用命令行发请求并得到响应</strong></p>\n<p>用到<strong>curl</strong>命令，具体可以命令行<a href=\"https://explainshell.com/\" target=\"_blank\" rel=\"noopener\">释义</a>（命令行及命令行释义可以看我相关<a href=\"https://www.jianshu.com/p/dcf636cbe6af\" target=\"_blank\" rel=\"noopener\">blog</a>）</p>\n<p>如：<strong>curl -s -v -H  – “<a href=\"https://www.baidu.com&quot;\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com&quot;</a></strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fb73225d2f20d079.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>请求的内容为</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; GET / HTTP/1.1</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Host: www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; User-Agent: curl/7.59.0</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">**响应的内容为**</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; HTTP/1.1 200 OK</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Accept-Ranges: bytes</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Connection: Keep-Alive</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Content-Length: 2443</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Content-Type: text/html</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Date: Thu, 07 Jun 2018 13:54:43 GMT</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Etag: &quot;58860411-98b&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Last-Modified: Mon, 23 Jan 2017 13:24:33 GMT</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Pragma: no-cache</span><br><span class=\"line\"></span><br><span class=\"line\">* Server bfe/1.0.8.18 is not blacklisted</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Server: bfe/1.0.8.18</span><br><span class=\"line\"></span><br><span class=\"line\">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;</span><br></pre></td></tr></table></figure></p>\n<p>还有很多可以尝试的 <strong>curl</strong> 命令</p>\n<p>可以参考 <a href=\"http://man.linuxde.net/curl\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p>一些参考：</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener\">HTTP-维基百科</a></p>\n<p><a href=\"http://man.linuxde.net/curl\" target=\"_blank\" rel=\"noopener\">curl命令</a></p>\n"},{"title":"恢复github上不显示的绿块","date":"2018-07-15T16:50:39.000Z","_content":"github 是一个良好的记录自己代码的git版本控制平台，看到自己有关的 contributions 的小绿块是件开心的事。但是如果，你的每次 commit 都没有相应的小绿块，是不是很伤感呢。\n\n之前我的 github 一直存在这个问题，虽然写代码不是为了说有这个小绿块。但是没有的话，commit 的积极性会大受打击。\n\n最后 google 终于找到了解决方法，原来我 github 绑定的是qq邮箱，而 git bash 上保存的 email 地址是谷歌邮箱。（其实之前也搜索到这些答案，但是由于确信当时使用的是谷歌邮箱而一直没有去看，当然或许是没想到。）\n\n方法是在github 的 settings 里 Emails 中 Add 你一直错用的邮箱，这样小绿块就回来了，开心，以后又可以愉快得commit 了\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4913eaff0e17eecc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n注意只有你的终端里绑定的邮箱有效，上面的方法才可行，即你的小绿块记录会回来；如果你用的是无效邮箱，那就只能改终端绑定邮箱为github上邮箱来让未来的小绿块不丢失了（或许还有别的找回无效邮箱提交commit小绿块的方法，我不知道）有关教程可看我提供参考链接\n\n* * *\n\n本文主要用于个人学习使用，也希望能帮到你\n\n参考：\n\n[解决提交到GitHub首页不显示的问题](https://blog.csdn.net/Cloudox_/article/details/50284193)\n\n[解决github提交commit,contributions不统计显示绿色的问题](https://www.cnblogs.com/dongliu/p/5782329.html)\n\n","source":"_posts/恢复github上不显示的绿块.md","raw":"---\ntitle: 恢复github上不显示的绿块\ndate: 2018-07-16 00:50:39\ntags:\n---\ngithub 是一个良好的记录自己代码的git版本控制平台，看到自己有关的 contributions 的小绿块是件开心的事。但是如果，你的每次 commit 都没有相应的小绿块，是不是很伤感呢。\n\n之前我的 github 一直存在这个问题，虽然写代码不是为了说有这个小绿块。但是没有的话，commit 的积极性会大受打击。\n\n最后 google 终于找到了解决方法，原来我 github 绑定的是qq邮箱，而 git bash 上保存的 email 地址是谷歌邮箱。（其实之前也搜索到这些答案，但是由于确信当时使用的是谷歌邮箱而一直没有去看，当然或许是没想到。）\n\n方法是在github 的 settings 里 Emails 中 Add 你一直错用的邮箱，这样小绿块就回来了，开心，以后又可以愉快得commit 了\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4913eaff0e17eecc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n注意只有你的终端里绑定的邮箱有效，上面的方法才可行，即你的小绿块记录会回来；如果你用的是无效邮箱，那就只能改终端绑定邮箱为github上邮箱来让未来的小绿块不丢失了（或许还有别的找回无效邮箱提交commit小绿块的方法，我不知道）有关教程可看我提供参考链接\n\n* * *\n\n本文主要用于个人学习使用，也希望能帮到你\n\n参考：\n\n[解决提交到GitHub首页不显示的问题](https://blog.csdn.net/Cloudox_/article/details/50284193)\n\n[解决github提交commit,contributions不统计显示绿色的问题](https://www.cnblogs.com/dongliu/p/5782329.html)\n\n","slug":"恢复github上不显示的绿块","published":1,"updated":"2019-01-22T14:14:31.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvt000ohw99n7tprial","content":"<p>github 是一个良好的记录自己代码的git版本控制平台，看到自己有关的 contributions 的小绿块是件开心的事。但是如果，你的每次 commit 都没有相应的小绿块，是不是很伤感呢。</p>\n<p>之前我的 github 一直存在这个问题，虽然写代码不是为了说有这个小绿块。但是没有的话，commit 的积极性会大受打击。</p>\n<p>最后 google 终于找到了解决方法，原来我 github 绑定的是qq邮箱，而 git bash 上保存的 email 地址是谷歌邮箱。（其实之前也搜索到这些答案，但是由于确信当时使用的是谷歌邮箱而一直没有去看，当然或许是没想到。）</p>\n<p>方法是在github 的 settings 里 Emails 中 Add 你一直错用的邮箱，这样小绿块就回来了，开心，以后又可以愉快得commit 了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4913eaff0e17eecc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>注意只有你的终端里绑定的邮箱有效，上面的方法才可行，即你的小绿块记录会回来；如果你用的是无效邮箱，那就只能改终端绑定邮箱为github上邮箱来让未来的小绿块不丢失了（或许还有别的找回无效邮箱提交commit小绿块的方法，我不知道）有关教程可看我提供参考链接</p>\n<hr>\n<p>本文主要用于个人学习使用，也希望能帮到你</p>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/Cloudox_/article/details/50284193\" target=\"_blank\" rel=\"noopener\">解决提交到GitHub首页不显示的问题</a></p>\n<p><a href=\"https://www.cnblogs.com/dongliu/p/5782329.html\" target=\"_blank\" rel=\"noopener\">解决github提交commit,contributions不统计显示绿色的问题</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>github 是一个良好的记录自己代码的git版本控制平台，看到自己有关的 contributions 的小绿块是件开心的事。但是如果，你的每次 commit 都没有相应的小绿块，是不是很伤感呢。</p>\n<p>之前我的 github 一直存在这个问题，虽然写代码不是为了说有这个小绿块。但是没有的话，commit 的积极性会大受打击。</p>\n<p>最后 google 终于找到了解决方法，原来我 github 绑定的是qq邮箱，而 git bash 上保存的 email 地址是谷歌邮箱。（其实之前也搜索到这些答案，但是由于确信当时使用的是谷歌邮箱而一直没有去看，当然或许是没想到。）</p>\n<p>方法是在github 的 settings 里 Emails 中 Add 你一直错用的邮箱，这样小绿块就回来了，开心，以后又可以愉快得commit 了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4913eaff0e17eecc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>注意只有你的终端里绑定的邮箱有效，上面的方法才可行，即你的小绿块记录会回来；如果你用的是无效邮箱，那就只能改终端绑定邮箱为github上邮箱来让未来的小绿块不丢失了（或许还有别的找回无效邮箱提交commit小绿块的方法，我不知道）有关教程可看我提供参考链接</p>\n<hr>\n<p>本文主要用于个人学习使用，也希望能帮到你</p>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/Cloudox_/article/details/50284193\" target=\"_blank\" rel=\"noopener\">解决提交到GitHub首页不显示的问题</a></p>\n<p><a href=\"https://www.cnblogs.com/dongliu/p/5782329.html\" target=\"_blank\" rel=\"noopener\">解决github提交commit,contributions不统计显示绿色的问题</a></p>\n"},{"title":"理解JSONP 上","date":"2018-08-10T16:06:05.000Z","_content":"# 我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的\n有关node搭建服务器的学习可以参考我的[另一篇博客](https://www.jianshu.com/p/ba728fb4edb4)\n**node 服务器及页面完整代码 [参考](https://github.com/Adashuai5/node-demo/tree/master/JSONP-demo)**\n\n**首先做一个简单的付款界面**\n点击按钮数字减1（点击按钮金额每次减少1）\n```\n<h5>您的余额是\n    <span id=\"amount\">100</span>\n</h5>\n<button id=\"button\">付款一块钱</button>\n<script>\n    button.addEventListener('click', (e) => {\n        let n = amount.innerText\n        let number = parseInt(n, 10)\n        let newNumber = number - 1\n        amount.innerText = newNumber\n    })\n</script>\n```\nNode代码：\n```\nif(path == '/'){\n    var string = fs.readFileSync('./index.html','utf8')\n    response.setHeader('Content-Type', 'text/html; charset=utf-8')\n    response.write(string)\n    response.end()\n  }else{\n    response.statusCode = 404\n    response.end()\n  }  \n```\n![](https://upload-images.jianshu.io/upload_images/7094266-a1ec91f18d1456c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这种方法没有后台数据，刷新页面就恢复100\n***数据库**是什么鬼\n**只要能长久地存数据，就是数据库**\n1.文件系统是一种数据库\n2.MySQL 是一种数据库*\n\n**那我们给它一个数据库来存储金额呗（命令行操作）**\n```\n//创建一个名为db的文件作为数据库\ntouch db\n//用 vim 打开 db\nvi db\n//只写入100\ni 100 :wq\n```\n用&&&amount&&&替代html里的100（这什么意思？没什么意思，不容易重复啊）这时前端就可以不管后端数据库里的具体内容了\n```\n<h5>您的余额是\n    <span id=\"amount\">&&&amount&&&</span>\n</h5>\n<button id=\"button\">付款一块钱</button>\n<form action=\"/pay\" method=\"POST\">\n    <input type=\"text\" name=\"number\" value=\"1\">\n    <input type=\"submit\" value=\"付款\">\n</form>\n```\n```\nvar string = fs.readFileSync('./index.html','utf8')\n//引入db，赋值给变量amout，文件都是字符串类型，所以amount得到的是一个字符串\n    var amount = fs.readFileSync('./db','utf8')\n//将html里的那个占位符，替换为db里的内容\n    string = string.replace('&&&amount&&&',amount)\n    response.setHeader('Content-Type', 'text/html; charset=utf-8')\n    response.write(string)\n    response.end()\n```\nNode代码\n```\n//判断路径和post请求\nif (path === '/pay' && method.toUpperCase() === 'POST') {\n  //引入db这个文件\n  var amount = fs.readFileSync('./db', 'utf8')\n  //每提交一次db里面的数字就减去1\n  var newAmount = amount - 1\n  //模拟失败，如果产生的随机数大于0.5就成功\n  if (Math.random() > 0.5) {\n    //成功后将db文件里写入新的数值\n    fs.writeFileSync('./db', newAmount)\n    response.write('success')\n  } else {\n    response.write('fail')\n  }\n  response.end()\n}\n```\n这种方法，由于有了后台数据库（db文件）就能每次得到的新的数值都会存在里面，即使页面刷新也不会变，缺点：需要返回上一个页面才能看到现在的数值\n原因是：form表单提交后一定会刷新当前页面，并且会打开一个新的页面\n### 想要不刷新当前页面的方法：\n**经典：用iframe**\n```\n<form action=\"/pay\" method=\"POST\" target=\"result\">\n    <input type=\"submit\" value=\"付款\">\n</form>\n<iframe name=\"result\" src=\"about:blank\" frameborder=\"0\" height=\"200\"></iframe>\n```\n这样做的好处是用户可以直接通过 iframe 看到是否付款成功，提升用户体验\n![](https://upload-images.jianshu.io/upload_images/7094266-4bc794416aa7fcaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**能不能不用iframe？**\n1.用图片造 get 请求\n```\n<h5>您的余额是<span id=\"amount\">&&&amount&&&</span></h5>\n<button id=\"button\">打钱</button>\n<script>\nbutton.addEventListener('click',(e)=>{\n  let image = document.createElement('img')\n  //指定路径\n  image.src = '/pay'\n  //image加载成功后执行\n  image.onload= function(){\n    alert('打钱成功')\n    //Window.location.reload() 是刷新页面，更好的方法是直接减一\n    amount.innerText = amount.innerText-1;\n  }\n  //image加载失败后执行\n  image.onerror = function(){\n    alert('打钱失败')\n  }\n})\n</script>\n```\nNode代码:\n```\n//因为imgae只能是get请求，所以只需判断路径\nif(path==='/pay'){\n  var amount = fs.readFileSync('./db','utf8')\n  var newAmount = amount-1\n  if(Math.random()>0.5){\n    fs.writeFileSync('./db',newAmount)\n    response.setHeader('Content-Type','image/jpg')\n    //返回图片，状态码 200 成功\n    response.statusCode = 200\n    //需要真的传一张图片才能成功\n    response.write(fs.readFileSync('./dog.jpg'))\n }else{\n    //状态码 400 页面显示失败\n    response.statusCode = 400\n    response.write('fail')\n }\n response.end()\n}\n\n```\n点击打钱按钮，若随机数大于0.5，则状态码显示200.并且返回dog.jpg，alert 打钱成功，点击确定，余额自动减一且页面不刷新。\n![](https://upload-images.jianshu.io/upload_images/7094266-8f026f51f1be16ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n缺点是这种办法不支持post请求，只能是get请求\n\n2.用 script 造 get 请求\n```\n<h5>您的余额是\n  <span id=\"amount\">&&&amount&&&</span>\n</h5>\n<button id=\"button\">打钱</button>\n<script>\n  button.addEventListener('click', (e) => {\n    let script = document.createElement('script')\n    script.src = '/pay'\n    //一定要把script放入body中，才有效\n    document.body.appendChild(script)\n  // script.onload= function(){\n  //   alert('打钱成功')\n  //   amount.innerText = amount.innerText-1\n  // }\n  script.onerror = function () {\n    alert('打钱失败')\n  }\n})\n</script>\n```\nNode代码：\n```\nif (path === '/pay') {\n    var amount = fs.readFileSync('./db', 'utf8')\n    var newAmount = amount - 1\n    if (Math.random() > 0.5) {\n      fs.writeFileSync('./db', newAmount)\n      response.setHeader('Content-Type','application/javascript')\n      response.statusCode = 200\n      //直接在 response 里 返回cuccess并且减一\n      response.write(`alert(\"success\")\n      amount.innerText = amount.innerText-1`)\n    } else {\n      response.statusCode = 400\n      response.write('fail')\n    }\n    response.end()\n```\nScript 请求需要放入页面中才有效，由于本身script会给页面添加效果，那何必用 onload ，直接在node端写代码。\n这种技术叫做 **SRJ （Server rendered javascript）**：服务器返回 javascript ，AJAX出现前的无刷新更新页面内容的方案。\n![](https://upload-images.jianshu.io/upload_images/7094266-b0040fe7c5d83bd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)这样已经达到和第一种方法img一样的效果，而且不用返回图片\n一直给页面添加Script也不好，如何去除？用下面方法无论成功还是失败，script标签均去掉\n```\nscript.onload= function(e){\n    e.currentTarget.remove()\n  }\n  script.onerror = function () {\n    alert('打钱失败')\n    e.currentTarget.remove()\n  }\n```\n---\n本文主要用于个人学习使用\n[理解JSONP 下](https://www.jianshu.com/p/38a72bd0e37d)","source":"_posts/理解JSONP-上.md","raw":"---\ntitle: 理解JSONP 上\ndate: 2018-08-11 00:06:05\ntags:\n---\n# 我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的\n有关node搭建服务器的学习可以参考我的[另一篇博客](https://www.jianshu.com/p/ba728fb4edb4)\n**node 服务器及页面完整代码 [参考](https://github.com/Adashuai5/node-demo/tree/master/JSONP-demo)**\n\n**首先做一个简单的付款界面**\n点击按钮数字减1（点击按钮金额每次减少1）\n```\n<h5>您的余额是\n    <span id=\"amount\">100</span>\n</h5>\n<button id=\"button\">付款一块钱</button>\n<script>\n    button.addEventListener('click', (e) => {\n        let n = amount.innerText\n        let number = parseInt(n, 10)\n        let newNumber = number - 1\n        amount.innerText = newNumber\n    })\n</script>\n```\nNode代码：\n```\nif(path == '/'){\n    var string = fs.readFileSync('./index.html','utf8')\n    response.setHeader('Content-Type', 'text/html; charset=utf-8')\n    response.write(string)\n    response.end()\n  }else{\n    response.statusCode = 404\n    response.end()\n  }  \n```\n![](https://upload-images.jianshu.io/upload_images/7094266-a1ec91f18d1456c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这种方法没有后台数据，刷新页面就恢复100\n***数据库**是什么鬼\n**只要能长久地存数据，就是数据库**\n1.文件系统是一种数据库\n2.MySQL 是一种数据库*\n\n**那我们给它一个数据库来存储金额呗（命令行操作）**\n```\n//创建一个名为db的文件作为数据库\ntouch db\n//用 vim 打开 db\nvi db\n//只写入100\ni 100 :wq\n```\n用&&&amount&&&替代html里的100（这什么意思？没什么意思，不容易重复啊）这时前端就可以不管后端数据库里的具体内容了\n```\n<h5>您的余额是\n    <span id=\"amount\">&&&amount&&&</span>\n</h5>\n<button id=\"button\">付款一块钱</button>\n<form action=\"/pay\" method=\"POST\">\n    <input type=\"text\" name=\"number\" value=\"1\">\n    <input type=\"submit\" value=\"付款\">\n</form>\n```\n```\nvar string = fs.readFileSync('./index.html','utf8')\n//引入db，赋值给变量amout，文件都是字符串类型，所以amount得到的是一个字符串\n    var amount = fs.readFileSync('./db','utf8')\n//将html里的那个占位符，替换为db里的内容\n    string = string.replace('&&&amount&&&',amount)\n    response.setHeader('Content-Type', 'text/html; charset=utf-8')\n    response.write(string)\n    response.end()\n```\nNode代码\n```\n//判断路径和post请求\nif (path === '/pay' && method.toUpperCase() === 'POST') {\n  //引入db这个文件\n  var amount = fs.readFileSync('./db', 'utf8')\n  //每提交一次db里面的数字就减去1\n  var newAmount = amount - 1\n  //模拟失败，如果产生的随机数大于0.5就成功\n  if (Math.random() > 0.5) {\n    //成功后将db文件里写入新的数值\n    fs.writeFileSync('./db', newAmount)\n    response.write('success')\n  } else {\n    response.write('fail')\n  }\n  response.end()\n}\n```\n这种方法，由于有了后台数据库（db文件）就能每次得到的新的数值都会存在里面，即使页面刷新也不会变，缺点：需要返回上一个页面才能看到现在的数值\n原因是：form表单提交后一定会刷新当前页面，并且会打开一个新的页面\n### 想要不刷新当前页面的方法：\n**经典：用iframe**\n```\n<form action=\"/pay\" method=\"POST\" target=\"result\">\n    <input type=\"submit\" value=\"付款\">\n</form>\n<iframe name=\"result\" src=\"about:blank\" frameborder=\"0\" height=\"200\"></iframe>\n```\n这样做的好处是用户可以直接通过 iframe 看到是否付款成功，提升用户体验\n![](https://upload-images.jianshu.io/upload_images/7094266-4bc794416aa7fcaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**能不能不用iframe？**\n1.用图片造 get 请求\n```\n<h5>您的余额是<span id=\"amount\">&&&amount&&&</span></h5>\n<button id=\"button\">打钱</button>\n<script>\nbutton.addEventListener('click',(e)=>{\n  let image = document.createElement('img')\n  //指定路径\n  image.src = '/pay'\n  //image加载成功后执行\n  image.onload= function(){\n    alert('打钱成功')\n    //Window.location.reload() 是刷新页面，更好的方法是直接减一\n    amount.innerText = amount.innerText-1;\n  }\n  //image加载失败后执行\n  image.onerror = function(){\n    alert('打钱失败')\n  }\n})\n</script>\n```\nNode代码:\n```\n//因为imgae只能是get请求，所以只需判断路径\nif(path==='/pay'){\n  var amount = fs.readFileSync('./db','utf8')\n  var newAmount = amount-1\n  if(Math.random()>0.5){\n    fs.writeFileSync('./db',newAmount)\n    response.setHeader('Content-Type','image/jpg')\n    //返回图片，状态码 200 成功\n    response.statusCode = 200\n    //需要真的传一张图片才能成功\n    response.write(fs.readFileSync('./dog.jpg'))\n }else{\n    //状态码 400 页面显示失败\n    response.statusCode = 400\n    response.write('fail')\n }\n response.end()\n}\n\n```\n点击打钱按钮，若随机数大于0.5，则状态码显示200.并且返回dog.jpg，alert 打钱成功，点击确定，余额自动减一且页面不刷新。\n![](https://upload-images.jianshu.io/upload_images/7094266-8f026f51f1be16ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n缺点是这种办法不支持post请求，只能是get请求\n\n2.用 script 造 get 请求\n```\n<h5>您的余额是\n  <span id=\"amount\">&&&amount&&&</span>\n</h5>\n<button id=\"button\">打钱</button>\n<script>\n  button.addEventListener('click', (e) => {\n    let script = document.createElement('script')\n    script.src = '/pay'\n    //一定要把script放入body中，才有效\n    document.body.appendChild(script)\n  // script.onload= function(){\n  //   alert('打钱成功')\n  //   amount.innerText = amount.innerText-1\n  // }\n  script.onerror = function () {\n    alert('打钱失败')\n  }\n})\n</script>\n```\nNode代码：\n```\nif (path === '/pay') {\n    var amount = fs.readFileSync('./db', 'utf8')\n    var newAmount = amount - 1\n    if (Math.random() > 0.5) {\n      fs.writeFileSync('./db', newAmount)\n      response.setHeader('Content-Type','application/javascript')\n      response.statusCode = 200\n      //直接在 response 里 返回cuccess并且减一\n      response.write(`alert(\"success\")\n      amount.innerText = amount.innerText-1`)\n    } else {\n      response.statusCode = 400\n      response.write('fail')\n    }\n    response.end()\n```\nScript 请求需要放入页面中才有效，由于本身script会给页面添加效果，那何必用 onload ，直接在node端写代码。\n这种技术叫做 **SRJ （Server rendered javascript）**：服务器返回 javascript ，AJAX出现前的无刷新更新页面内容的方案。\n![](https://upload-images.jianshu.io/upload_images/7094266-b0040fe7c5d83bd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)这样已经达到和第一种方法img一样的效果，而且不用返回图片\n一直给页面添加Script也不好，如何去除？用下面方法无论成功还是失败，script标签均去掉\n```\nscript.onload= function(e){\n    e.currentTarget.remove()\n  }\n  script.onerror = function () {\n    alert('打钱失败')\n    e.currentTarget.remove()\n  }\n```\n---\n本文主要用于个人学习使用\n[理解JSONP 下](https://www.jianshu.com/p/38a72bd0e37d)","slug":"理解JSONP-上","published":1,"updated":"2019-01-22T13:44:46.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvt000phw99m3bla5oz","content":"<h1 id=\"我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的\"><a href=\"#我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的\" class=\"headerlink\" title=\"我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的\"></a>我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的</h1><p>有关node搭建服务器的学习可以参考我的<a href=\"https://www.jianshu.com/p/ba728fb4edb4\" target=\"_blank\" rel=\"noopener\">另一篇博客</a><br><strong>node 服务器及页面完整代码 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/JSONP-demo\" target=\"_blank\" rel=\"noopener\">参考</a></strong></p>\n<p><strong>首先做一个简单的付款界面</strong><br>点击按钮数字减1（点击按钮金额每次减少1）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h5&gt;您的余额是</span><br><span class=\"line\">    &lt;span id=&quot;amount&quot;&gt;100&lt;/span&gt;</span><br><span class=\"line\">&lt;/h5&gt;</span><br><span class=\"line\">&lt;button id=&quot;button&quot;&gt;付款一块钱&lt;/button&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    button.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">        let n = amount.innerText</span><br><span class=\"line\">        let number = parseInt(n, 10)</span><br><span class=\"line\">        let newNumber = number - 1</span><br><span class=\"line\">        amount.innerText = newNumber</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(path == &apos;/&apos;)&#123;</span><br><span class=\"line\">    var string = fs.readFileSync(&apos;./index.html&apos;,&apos;utf8&apos;)</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    response.statusCode = 404</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a1ec91f18d1456c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这种方法没有后台数据，刷新页面就恢复100<br><strong>*数据库</strong>是什么鬼<br><strong>只要能长久地存数据，就是数据库</strong><br>1.文件系统是一种数据库<br>2.MySQL 是一种数据库*</p>\n<p><strong>那我们给它一个数据库来存储金额呗（命令行操作）</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建一个名为db的文件作为数据库</span><br><span class=\"line\">touch db</span><br><span class=\"line\">//用 vim 打开 db</span><br><span class=\"line\">vi db</span><br><span class=\"line\">//只写入100</span><br><span class=\"line\">i 100 :wq</span><br></pre></td></tr></table></figure></p>\n<p>用&amp;&amp;&amp;amount&amp;&amp;&amp;替代html里的100（这什么意思？没什么意思，不容易重复啊）这时前端就可以不管后端数据库里的具体内容了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h5&gt;您的余额是</span><br><span class=\"line\">    &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;</span><br><span class=\"line\">&lt;/h5&gt;</span><br><span class=\"line\">&lt;button id=&quot;button&quot;&gt;付款一块钱&lt;/button&gt;</span><br><span class=\"line\">&lt;form action=&quot;/pay&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;number&quot; value=&quot;1&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; value=&quot;付款&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var string = fs.readFileSync(&apos;./index.html&apos;,&apos;utf8&apos;)</span><br><span class=\"line\">//引入db，赋值给变量amout，文件都是字符串类型，所以amount得到的是一个字符串</span><br><span class=\"line\">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;)</span><br><span class=\"line\">//将html里的那个占位符，替换为db里的内容</span><br><span class=\"line\">    string = string.replace(&apos;&amp;&amp;&amp;amount&amp;&amp;&amp;&apos;,amount)</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br></pre></td></tr></table></figure>\n<p>Node代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断路径和post请求</span><br><span class=\"line\">if (path === &apos;/pay&apos; &amp;&amp; method.toUpperCase() === &apos;POST&apos;) &#123;</span><br><span class=\"line\">  //引入db这个文件</span><br><span class=\"line\">  var amount = fs.readFileSync(&apos;./db&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">  //每提交一次db里面的数字就减去1</span><br><span class=\"line\">  var newAmount = amount - 1</span><br><span class=\"line\">  //模拟失败，如果产生的随机数大于0.5就成功</span><br><span class=\"line\">  if (Math.random() &gt; 0.5) &#123;</span><br><span class=\"line\">    //成功后将db文件里写入新的数值</span><br><span class=\"line\">    fs.writeFileSync(&apos;./db&apos;, newAmount)</span><br><span class=\"line\">    response.write(&apos;success&apos;)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    response.write(&apos;fail&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法，由于有了后台数据库（db文件）就能每次得到的新的数值都会存在里面，即使页面刷新也不会变，缺点：需要返回上一个页面才能看到现在的数值<br>原因是：form表单提交后一定会刷新当前页面，并且会打开一个新的页面</p>\n<h3 id=\"想要不刷新当前页面的方法：\"><a href=\"#想要不刷新当前页面的方法：\" class=\"headerlink\" title=\"想要不刷新当前页面的方法：\"></a>想要不刷新当前页面的方法：</h3><p><strong>经典：用iframe</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;/pay&quot; method=&quot;POST&quot; target=&quot;result&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; value=&quot;付款&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;iframe name=&quot;result&quot; src=&quot;about:blank&quot; frameborder=&quot;0&quot; height=&quot;200&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样做的好处是用户可以直接通过 iframe 看到是否付款成功，提升用户体验<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4bc794416aa7fcaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>能不能不用iframe？</strong><br>1.用图片造 get 请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h5&gt;您的余额是&lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class=\"line\">&lt;button id=&quot;button&quot;&gt;打钱&lt;/button&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">button.addEventListener(&apos;click&apos;,(e)=&gt;&#123;</span><br><span class=\"line\">  let image = document.createElement(&apos;img&apos;)</span><br><span class=\"line\">  //指定路径</span><br><span class=\"line\">  image.src = &apos;/pay&apos;</span><br><span class=\"line\">  //image加载成功后执行</span><br><span class=\"line\">  image.onload= function()&#123;</span><br><span class=\"line\">    alert(&apos;打钱成功&apos;)</span><br><span class=\"line\">    //Window.location.reload() 是刷新页面，更好的方法是直接减一</span><br><span class=\"line\">    amount.innerText = amount.innerText-1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //image加载失败后执行</span><br><span class=\"line\">  image.onerror = function()&#123;</span><br><span class=\"line\">    alert(&apos;打钱失败&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//因为imgae只能是get请求，所以只需判断路径</span><br><span class=\"line\">if(path===&apos;/pay&apos;)&#123;</span><br><span class=\"line\">  var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;)</span><br><span class=\"line\">  var newAmount = amount-1</span><br><span class=\"line\">  if(Math.random()&gt;0.5)&#123;</span><br><span class=\"line\">    fs.writeFileSync(&apos;./db&apos;,newAmount)</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;,&apos;image/jpg&apos;)</span><br><span class=\"line\">    //返回图片，状态码 200 成功</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    //需要真的传一张图片才能成功</span><br><span class=\"line\">    response.write(fs.readFileSync(&apos;./dog.jpg&apos;))</span><br><span class=\"line\"> &#125;else&#123;</span><br><span class=\"line\">    //状态码 400 页面显示失败</span><br><span class=\"line\">    response.statusCode = 400</span><br><span class=\"line\">    response.write(&apos;fail&apos;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>点击打钱按钮，若随机数大于0.5，则状态码显示200.并且返回dog.jpg，alert 打钱成功，点击确定，余额自动减一且页面不刷新。<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-8f026f51f1be16ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>缺点是这种办法不支持post请求，只能是get请求</p>\n<p>2.用 script 造 get 请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h5&gt;您的余额是</span><br><span class=\"line\">  &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;</span><br><span class=\"line\">&lt;/h5&gt;</span><br><span class=\"line\">&lt;button id=&quot;button&quot;&gt;打钱&lt;/button&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  button.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    let script = document.createElement(&apos;script&apos;)</span><br><span class=\"line\">    script.src = &apos;/pay&apos;</span><br><span class=\"line\">    //一定要把script放入body中，才有效</span><br><span class=\"line\">    document.body.appendChild(script)</span><br><span class=\"line\">  // script.onload= function()&#123;</span><br><span class=\"line\">  //   alert(&apos;打钱成功&apos;)</span><br><span class=\"line\">  //   amount.innerText = amount.innerText-1</span><br><span class=\"line\">  // &#125;</span><br><span class=\"line\">  script.onerror = function () &#123;</span><br><span class=\"line\">    alert(&apos;打钱失败&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (path === &apos;/pay&apos;) &#123;</span><br><span class=\"line\">    var amount = fs.readFileSync(&apos;./db&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">    var newAmount = amount - 1</span><br><span class=\"line\">    if (Math.random() &gt; 0.5) &#123;</span><br><span class=\"line\">      fs.writeFileSync(&apos;./db&apos;, newAmount)</span><br><span class=\"line\">      response.setHeader(&apos;Content-Type&apos;,&apos;application/javascript&apos;)</span><br><span class=\"line\">      response.statusCode = 200</span><br><span class=\"line\">      //直接在 response 里 返回cuccess并且减一</span><br><span class=\"line\">      response.write(`alert(&quot;success&quot;)</span><br><span class=\"line\">      amount.innerText = amount.innerText-1`)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      response.statusCode = 400</span><br><span class=\"line\">      response.write(&apos;fail&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response.end()</span><br></pre></td></tr></table></figure></p>\n<p>Script 请求需要放入页面中才有效，由于本身script会给页面添加效果，那何必用 onload ，直接在node端写代码。<br>这种技术叫做 <strong>SRJ （Server rendered javascript）</strong>：服务器返回 javascript ，AJAX出现前的无刷新更新页面内容的方案。<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-b0040fe7c5d83bd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">这样已经达到和第一种方法img一样的效果，而且不用返回图片<br>一直给页面添加Script也不好，如何去除？用下面方法无论成功还是失败，script标签均去掉<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script.onload= function(e)&#123;</span><br><span class=\"line\">    e.currentTarget.remove()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  script.onerror = function () &#123;</span><br><span class=\"line\">    alert(&apos;打钱失败&apos;)</span><br><span class=\"line\">    e.currentTarget.remove()</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>本文主要用于个人学习使用<br><a href=\"https://www.jianshu.com/p/38a72bd0e37d\" target=\"_blank\" rel=\"noopener\">理解JSONP 下</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的\"><a href=\"#我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的\" class=\"headerlink\" title=\"我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的\"></a>我们用node来做一个简易服务器理解JSONP，从而了解在没有Ajax的时代的前端是如何绞尽脑汁做好页面交互的</h1><p>有关node搭建服务器的学习可以参考我的<a href=\"https://www.jianshu.com/p/ba728fb4edb4\" target=\"_blank\" rel=\"noopener\">另一篇博客</a><br><strong>node 服务器及页面完整代码 <a href=\"https://github.com/Adashuai5/node-demo/tree/master/JSONP-demo\" target=\"_blank\" rel=\"noopener\">参考</a></strong></p>\n<p><strong>首先做一个简单的付款界面</strong><br>点击按钮数字减1（点击按钮金额每次减少1）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h5&gt;您的余额是</span><br><span class=\"line\">    &lt;span id=&quot;amount&quot;&gt;100&lt;/span&gt;</span><br><span class=\"line\">&lt;/h5&gt;</span><br><span class=\"line\">&lt;button id=&quot;button&quot;&gt;付款一块钱&lt;/button&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    button.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">        let n = amount.innerText</span><br><span class=\"line\">        let number = parseInt(n, 10)</span><br><span class=\"line\">        let newNumber = number - 1</span><br><span class=\"line\">        amount.innerText = newNumber</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(path == &apos;/&apos;)&#123;</span><br><span class=\"line\">    var string = fs.readFileSync(&apos;./index.html&apos;,&apos;utf8&apos;)</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    response.statusCode = 404</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-a1ec91f18d1456c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>这种方法没有后台数据，刷新页面就恢复100<br><strong>*数据库</strong>是什么鬼<br><strong>只要能长久地存数据，就是数据库</strong><br>1.文件系统是一种数据库<br>2.MySQL 是一种数据库*</p>\n<p><strong>那我们给它一个数据库来存储金额呗（命令行操作）</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建一个名为db的文件作为数据库</span><br><span class=\"line\">touch db</span><br><span class=\"line\">//用 vim 打开 db</span><br><span class=\"line\">vi db</span><br><span class=\"line\">//只写入100</span><br><span class=\"line\">i 100 :wq</span><br></pre></td></tr></table></figure></p>\n<p>用&amp;&amp;&amp;amount&amp;&amp;&amp;替代html里的100（这什么意思？没什么意思，不容易重复啊）这时前端就可以不管后端数据库里的具体内容了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h5&gt;您的余额是</span><br><span class=\"line\">    &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;</span><br><span class=\"line\">&lt;/h5&gt;</span><br><span class=\"line\">&lt;button id=&quot;button&quot;&gt;付款一块钱&lt;/button&gt;</span><br><span class=\"line\">&lt;form action=&quot;/pay&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; name=&quot;number&quot; value=&quot;1&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; value=&quot;付款&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var string = fs.readFileSync(&apos;./index.html&apos;,&apos;utf8&apos;)</span><br><span class=\"line\">//引入db，赋值给变量amout，文件都是字符串类型，所以amount得到的是一个字符串</span><br><span class=\"line\">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;)</span><br><span class=\"line\">//将html里的那个占位符，替换为db里的内容</span><br><span class=\"line\">    string = string.replace(&apos;&amp;&amp;&amp;amount&amp;&amp;&amp;&apos;,amount)</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;)</span><br><span class=\"line\">    response.write(string)</span><br><span class=\"line\">    response.end()</span><br></pre></td></tr></table></figure>\n<p>Node代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断路径和post请求</span><br><span class=\"line\">if (path === &apos;/pay&apos; &amp;&amp; method.toUpperCase() === &apos;POST&apos;) &#123;</span><br><span class=\"line\">  //引入db这个文件</span><br><span class=\"line\">  var amount = fs.readFileSync(&apos;./db&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">  //每提交一次db里面的数字就减去1</span><br><span class=\"line\">  var newAmount = amount - 1</span><br><span class=\"line\">  //模拟失败，如果产生的随机数大于0.5就成功</span><br><span class=\"line\">  if (Math.random() &gt; 0.5) &#123;</span><br><span class=\"line\">    //成功后将db文件里写入新的数值</span><br><span class=\"line\">    fs.writeFileSync(&apos;./db&apos;, newAmount)</span><br><span class=\"line\">    response.write(&apos;success&apos;)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    response.write(&apos;fail&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法，由于有了后台数据库（db文件）就能每次得到的新的数值都会存在里面，即使页面刷新也不会变，缺点：需要返回上一个页面才能看到现在的数值<br>原因是：form表单提交后一定会刷新当前页面，并且会打开一个新的页面</p>\n<h3 id=\"想要不刷新当前页面的方法：\"><a href=\"#想要不刷新当前页面的方法：\" class=\"headerlink\" title=\"想要不刷新当前页面的方法：\"></a>想要不刷新当前页面的方法：</h3><p><strong>经典：用iframe</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;/pay&quot; method=&quot;POST&quot; target=&quot;result&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; value=&quot;付款&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;iframe name=&quot;result&quot; src=&quot;about:blank&quot; frameborder=&quot;0&quot; height=&quot;200&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样做的好处是用户可以直接通过 iframe 看到是否付款成功，提升用户体验<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4bc794416aa7fcaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>能不能不用iframe？</strong><br>1.用图片造 get 请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h5&gt;您的余额是&lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class=\"line\">&lt;button id=&quot;button&quot;&gt;打钱&lt;/button&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">button.addEventListener(&apos;click&apos;,(e)=&gt;&#123;</span><br><span class=\"line\">  let image = document.createElement(&apos;img&apos;)</span><br><span class=\"line\">  //指定路径</span><br><span class=\"line\">  image.src = &apos;/pay&apos;</span><br><span class=\"line\">  //image加载成功后执行</span><br><span class=\"line\">  image.onload= function()&#123;</span><br><span class=\"line\">    alert(&apos;打钱成功&apos;)</span><br><span class=\"line\">    //Window.location.reload() 是刷新页面，更好的方法是直接减一</span><br><span class=\"line\">    amount.innerText = amount.innerText-1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //image加载失败后执行</span><br><span class=\"line\">  image.onerror = function()&#123;</span><br><span class=\"line\">    alert(&apos;打钱失败&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//因为imgae只能是get请求，所以只需判断路径</span><br><span class=\"line\">if(path===&apos;/pay&apos;)&#123;</span><br><span class=\"line\">  var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;)</span><br><span class=\"line\">  var newAmount = amount-1</span><br><span class=\"line\">  if(Math.random()&gt;0.5)&#123;</span><br><span class=\"line\">    fs.writeFileSync(&apos;./db&apos;,newAmount)</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;,&apos;image/jpg&apos;)</span><br><span class=\"line\">    //返回图片，状态码 200 成功</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    //需要真的传一张图片才能成功</span><br><span class=\"line\">    response.write(fs.readFileSync(&apos;./dog.jpg&apos;))</span><br><span class=\"line\"> &#125;else&#123;</span><br><span class=\"line\">    //状态码 400 页面显示失败</span><br><span class=\"line\">    response.statusCode = 400</span><br><span class=\"line\">    response.write(&apos;fail&apos;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> response.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>点击打钱按钮，若随机数大于0.5，则状态码显示200.并且返回dog.jpg，alert 打钱成功，点击确定，余额自动减一且页面不刷新。<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-8f026f51f1be16ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>缺点是这种办法不支持post请求，只能是get请求</p>\n<p>2.用 script 造 get 请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h5&gt;您的余额是</span><br><span class=\"line\">  &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;</span><br><span class=\"line\">&lt;/h5&gt;</span><br><span class=\"line\">&lt;button id=&quot;button&quot;&gt;打钱&lt;/button&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  button.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class=\"line\">    let script = document.createElement(&apos;script&apos;)</span><br><span class=\"line\">    script.src = &apos;/pay&apos;</span><br><span class=\"line\">    //一定要把script放入body中，才有效</span><br><span class=\"line\">    document.body.appendChild(script)</span><br><span class=\"line\">  // script.onload= function()&#123;</span><br><span class=\"line\">  //   alert(&apos;打钱成功&apos;)</span><br><span class=\"line\">  //   amount.innerText = amount.innerText-1</span><br><span class=\"line\">  // &#125;</span><br><span class=\"line\">  script.onerror = function () &#123;</span><br><span class=\"line\">    alert(&apos;打钱失败&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Node代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (path === &apos;/pay&apos;) &#123;</span><br><span class=\"line\">    var amount = fs.readFileSync(&apos;./db&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">    var newAmount = amount - 1</span><br><span class=\"line\">    if (Math.random() &gt; 0.5) &#123;</span><br><span class=\"line\">      fs.writeFileSync(&apos;./db&apos;, newAmount)</span><br><span class=\"line\">      response.setHeader(&apos;Content-Type&apos;,&apos;application/javascript&apos;)</span><br><span class=\"line\">      response.statusCode = 200</span><br><span class=\"line\">      //直接在 response 里 返回cuccess并且减一</span><br><span class=\"line\">      response.write(`alert(&quot;success&quot;)</span><br><span class=\"line\">      amount.innerText = amount.innerText-1`)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      response.statusCode = 400</span><br><span class=\"line\">      response.write(&apos;fail&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response.end()</span><br></pre></td></tr></table></figure></p>\n<p>Script 请求需要放入页面中才有效，由于本身script会给页面添加效果，那何必用 onload ，直接在node端写代码。<br>这种技术叫做 <strong>SRJ （Server rendered javascript）</strong>：服务器返回 javascript ，AJAX出现前的无刷新更新页面内容的方案。<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-b0040fe7c5d83bd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">这样已经达到和第一种方法img一样的效果，而且不用返回图片<br>一直给页面添加Script也不好，如何去除？用下面方法无论成功还是失败，script标签均去掉<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script.onload= function(e)&#123;</span><br><span class=\"line\">    e.currentTarget.remove()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  script.onerror = function () &#123;</span><br><span class=\"line\">    alert(&apos;打钱失败&apos;)</span><br><span class=\"line\">    e.currentTarget.remove()</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>本文主要用于个人学习使用<br><a href=\"https://www.jianshu.com/p/38a72bd0e37d\" target=\"_blank\" rel=\"noopener\">理解JSONP 下</a></p>\n"},{"title":"JavaScript原型和原型链","date":"2018-07-11T16:51:42.000Z","_content":"JavaScript中除了基本类型外的数据类型，都是对象。但是由于其没有 类（class，ES6引入了class，但其只是语法糖）的概念，如何将所有对象联系起来就成立一个问题，于是就有了原型和原型链的概念。\n\n* * *\n\n> 每个实例对象（object ）都有一个私有属性（称之为 __proto__）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c9e28000b43ca445.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面是[MDN里有关原型链知识](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)的摘录，什么意思？让我们来解释一下\n\n事实上 JavaScript 所有数据都可以以对象的形式表现：由于函数是对象，我们可以用构造函数的方法使得 Number、Boolean、String变成对象。\n\n下面以 Number 为例 （其他类型也一样）\n\n可以用 var 基本类型 = new 对应基本类型的函数() 的方法创建一个新函数\n\nvar n = new Number() 创建一个 Number 函数，其是一个对象\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-62536de6cd21ab12.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里的 n 就是 Number 的实例，可以看到 n 里面有一个 __proto__ 指向 Number() 这个函数，Number() 即为 n 的原型对象(prototype) ；\n\n而 Number() 函数有一个 __proto__ 指向 Object() 函数 ，Object() 即为 Number() 的原型对象；\n\nObject() 函数里存在 hasOwnProrerty 证明其已经到达最后的属性层，再往后就是对象的最终原型对象 null。\n\n即\n\n![](https://upload-images.jianshu.io/upload_images/7094266-fc991a402727ca56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**以上一整个原型与原型层层相链接的过程即为原型链**\n\n其可以将公用属性存放在同一原型层中，实现共享、节省内存空间等。\n\n> 当您访问实例的属性时，JavaScript首先会检查它们是否直接存在于该对象上，如果不存在，则会[[Prototype]]中查找。这意味着你在prototype中定义的所有内容都可以由所有实例有效共享，你甚至可以稍后更改部分prototype，并在所有现有实例中显示更改（如果需要）。\n\n* * *\n\n通过以上例子我们可以得到下面两个“公式”\n\n**var 对象 = new 函数()**\n\n**对象.__proto__ === 对象的构造函数.prototype**\n\n我们已经知道\n\n**var n = new Number()**\n\n**n.__proto__ === Number.prototype //true**\n\n那么 **Number.__proto__** ？\n\nNumber 的原型对象是Function，即 Number 是 Function 的实例\n\n即有 **Number.__proto__ === Function.prototype**\n\n那么同理\n\n**var object = new Object()**\n\n**object.__proto__ === Object.prototype**\n\n**Object.__proto__ === Function.prototype**\n\n再进一步推断\n\n**var function = new Function()** \n\n**function.__proto__ === Function.prototype**\n\n**Function.__proto__ === Function.prototype**\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-b6a6447f260e8db4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n参考及推荐：\n\n[继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n\n[Javascript继承机制的设计思想](http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html)\n\n[白话原型和原型链](https://juejin.im/post/599d69fc6fb9a0248f4a7b31)\n\n[JavaScript深入之从原型到原型链 #2](https://github.com/mqyqingfeng/Blog/issues/2)\n\n[饥人谷课件-原型链和继承](http://book.jirengu.com/fe/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html)","source":"_posts/JavaScript原型和原型链.md","raw":"---\ntitle: JavaScript原型和原型链\ndate: 2018-07-12 00:51:42\ntags:\n---\nJavaScript中除了基本类型外的数据类型，都是对象。但是由于其没有 类（class，ES6引入了class，但其只是语法糖）的概念，如何将所有对象联系起来就成立一个问题，于是就有了原型和原型链的概念。\n\n* * *\n\n> 每个实例对象（object ）都有一个私有属性（称之为 __proto__）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c9e28000b43ca445.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面是[MDN里有关原型链知识](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)的摘录，什么意思？让我们来解释一下\n\n事实上 JavaScript 所有数据都可以以对象的形式表现：由于函数是对象，我们可以用构造函数的方法使得 Number、Boolean、String变成对象。\n\n下面以 Number 为例 （其他类型也一样）\n\n可以用 var 基本类型 = new 对应基本类型的函数() 的方法创建一个新函数\n\nvar n = new Number() 创建一个 Number 函数，其是一个对象\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-62536de6cd21ab12.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里的 n 就是 Number 的实例，可以看到 n 里面有一个 __proto__ 指向 Number() 这个函数，Number() 即为 n 的原型对象(prototype) ；\n\n而 Number() 函数有一个 __proto__ 指向 Object() 函数 ，Object() 即为 Number() 的原型对象；\n\nObject() 函数里存在 hasOwnProrerty 证明其已经到达最后的属性层，再往后就是对象的最终原型对象 null。\n\n即\n\n![](https://upload-images.jianshu.io/upload_images/7094266-fc991a402727ca56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**以上一整个原型与原型层层相链接的过程即为原型链**\n\n其可以将公用属性存放在同一原型层中，实现共享、节省内存空间等。\n\n> 当您访问实例的属性时，JavaScript首先会检查它们是否直接存在于该对象上，如果不存在，则会[[Prototype]]中查找。这意味着你在prototype中定义的所有内容都可以由所有实例有效共享，你甚至可以稍后更改部分prototype，并在所有现有实例中显示更改（如果需要）。\n\n* * *\n\n通过以上例子我们可以得到下面两个“公式”\n\n**var 对象 = new 函数()**\n\n**对象.__proto__ === 对象的构造函数.prototype**\n\n我们已经知道\n\n**var n = new Number()**\n\n**n.__proto__ === Number.prototype //true**\n\n那么 **Number.__proto__** ？\n\nNumber 的原型对象是Function，即 Number 是 Function 的实例\n\n即有 **Number.__proto__ === Function.prototype**\n\n那么同理\n\n**var object = new Object()**\n\n**object.__proto__ === Object.prototype**\n\n**Object.__proto__ === Function.prototype**\n\n再进一步推断\n\n**var function = new Function()** \n\n**function.__proto__ === Function.prototype**\n\n**Function.__proto__ === Function.prototype**\n\n![image](https://upload-images.jianshu.io/upload_images/7094266-b6a6447f260e8db4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* * *\n\n本文主要用于个人学习使用，如有侵权请联系我删除。\n\n参考及推荐：\n\n[继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n\n[Javascript继承机制的设计思想](http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html)\n\n[白话原型和原型链](https://juejin.im/post/599d69fc6fb9a0248f4a7b31)\n\n[JavaScript深入之从原型到原型链 #2](https://github.com/mqyqingfeng/Blog/issues/2)\n\n[饥人谷课件-原型链和继承](http://book.jirengu.com/fe/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html)","slug":"JavaScript原型和原型链","published":1,"updated":"2019-01-22T13:49:57.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvu000qhw99heii4b3o","content":"<p>JavaScript中除了基本类型外的数据类型，都是对象。但是由于其没有 类（class，ES6引入了class，但其只是语法糖）的概念，如何将所有对象联系起来就成立一个问题，于是就有了原型和原型链的概念。</p>\n<hr>\n<blockquote>\n<p>每个实例对象（object ）都有一个私有属性（称之为 <strong>proto</strong>）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c9e28000b43ca445.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>上面是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">MDN里有关原型链知识</a>的摘录，什么意思？让我们来解释一下</p>\n<p>事实上 JavaScript 所有数据都可以以对象的形式表现：由于函数是对象，我们可以用构造函数的方法使得 Number、Boolean、String变成对象。</p>\n<p>下面以 Number 为例 （其他类型也一样）</p>\n<p>可以用 var 基本类型 = new 对应基本类型的函数() 的方法创建一个新函数</p>\n<p>var n = new Number() 创建一个 Number 函数，其是一个对象</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-62536de6cd21ab12.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>这里的 n 就是 Number 的实例，可以看到 n 里面有一个 <strong>proto</strong> 指向 Number() 这个函数，Number() 即为 n 的原型对象(prototype) ；</p>\n<p>而 Number() 函数有一个 <strong>proto</strong> 指向 Object() 函数 ，Object() 即为 Number() 的原型对象；</p>\n<p>Object() 函数里存在 hasOwnProrerty 证明其已经到达最后的属性层，再往后就是对象的最终原型对象 null。</p>\n<p>即</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fc991a402727ca56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>以上一整个原型与原型层层相链接的过程即为原型链</strong></p>\n<p>其可以将公用属性存放在同一原型层中，实现共享、节省内存空间等。</p>\n<blockquote>\n<p>当您访问实例的属性时，JavaScript首先会检查它们是否直接存在于该对象上，如果不存在，则会[[Prototype]]中查找。这意味着你在prototype中定义的所有内容都可以由所有实例有效共享，你甚至可以稍后更改部分prototype，并在所有现有实例中显示更改（如果需要）。</p>\n</blockquote>\n<hr>\n<p>通过以上例子我们可以得到下面两个“公式”</p>\n<p><strong>var 对象 = new 函数()</strong></p>\n<p><strong>对象.<strong>proto</strong> === 对象的构造函数.prototype</strong></p>\n<p>我们已经知道</p>\n<p><strong>var n = new Number()</strong></p>\n<p><strong>n.<strong>proto</strong> === Number.prototype //true</strong></p>\n<p>那么 <strong>Number.<strong>proto</strong></strong> ？</p>\n<p>Number 的原型对象是Function，即 Number 是 Function 的实例</p>\n<p>即有 <strong>Number.<strong>proto</strong> === Function.prototype</strong></p>\n<p>那么同理</p>\n<p><strong>var object = new Object()</strong></p>\n<p><strong>object.<strong>proto</strong> === Object.prototype</strong></p>\n<p><strong>Object.<strong>proto</strong> === Function.prototype</strong></p>\n<p>再进一步推断</p>\n<p><strong>var function = new Function()</strong> </p>\n<p><strong>function.<strong>proto</strong> === Function.prototype</strong></p>\n<p><strong>Function.<strong>proto</strong> === Function.prototype</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-b6a6447f260e8db4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p>参考及推荐：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript继承机制的设计思想</a></p>\n<p><a href=\"https://juejin.im/post/599d69fc6fb9a0248f4a7b31\" target=\"_blank\" rel=\"noopener\">白话原型和原型链</a></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">JavaScript深入之从原型到原型链 #2</a></p>\n<p><a href=\"http://book.jirengu.com/fe/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html\" target=\"_blank\" rel=\"noopener\">饥人谷课件-原型链和继承</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript中除了基本类型外的数据类型，都是对象。但是由于其没有 类（class，ES6引入了class，但其只是语法糖）的概念，如何将所有对象联系起来就成立一个问题，于是就有了原型和原型链的概念。</p>\n<hr>\n<blockquote>\n<p>每个实例对象（object ）都有一个私有属性（称之为 <strong>proto</strong>）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c9e28000b43ca445.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>上面是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">MDN里有关原型链知识</a>的摘录，什么意思？让我们来解释一下</p>\n<p>事实上 JavaScript 所有数据都可以以对象的形式表现：由于函数是对象，我们可以用构造函数的方法使得 Number、Boolean、String变成对象。</p>\n<p>下面以 Number 为例 （其他类型也一样）</p>\n<p>可以用 var 基本类型 = new 对应基本类型的函数() 的方法创建一个新函数</p>\n<p>var n = new Number() 创建一个 Number 函数，其是一个对象</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-62536de6cd21ab12.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>这里的 n 就是 Number 的实例，可以看到 n 里面有一个 <strong>proto</strong> 指向 Number() 这个函数，Number() 即为 n 的原型对象(prototype) ；</p>\n<p>而 Number() 函数有一个 <strong>proto</strong> 指向 Object() 函数 ，Object() 即为 Number() 的原型对象；</p>\n<p>Object() 函数里存在 hasOwnProrerty 证明其已经到达最后的属性层，再往后就是对象的最终原型对象 null。</p>\n<p>即</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-fc991a402727ca56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>以上一整个原型与原型层层相链接的过程即为原型链</strong></p>\n<p>其可以将公用属性存放在同一原型层中，实现共享、节省内存空间等。</p>\n<blockquote>\n<p>当您访问实例的属性时，JavaScript首先会检查它们是否直接存在于该对象上，如果不存在，则会[[Prototype]]中查找。这意味着你在prototype中定义的所有内容都可以由所有实例有效共享，你甚至可以稍后更改部分prototype，并在所有现有实例中显示更改（如果需要）。</p>\n</blockquote>\n<hr>\n<p>通过以上例子我们可以得到下面两个“公式”</p>\n<p><strong>var 对象 = new 函数()</strong></p>\n<p><strong>对象.<strong>proto</strong> === 对象的构造函数.prototype</strong></p>\n<p>我们已经知道</p>\n<p><strong>var n = new Number()</strong></p>\n<p><strong>n.<strong>proto</strong> === Number.prototype //true</strong></p>\n<p>那么 <strong>Number.<strong>proto</strong></strong> ？</p>\n<p>Number 的原型对象是Function，即 Number 是 Function 的实例</p>\n<p>即有 <strong>Number.<strong>proto</strong> === Function.prototype</strong></p>\n<p>那么同理</p>\n<p><strong>var object = new Object()</strong></p>\n<p><strong>object.<strong>proto</strong> === Object.prototype</strong></p>\n<p><strong>Object.<strong>proto</strong> === Function.prototype</strong></p>\n<p>再进一步推断</p>\n<p><strong>var function = new Function()</strong> </p>\n<p><strong>function.<strong>proto</strong> === Function.prototype</strong></p>\n<p><strong>Function.<strong>proto</strong> === Function.prototype</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-b6a6447f260e8db4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<hr>\n<p>本文主要用于个人学习使用，如有侵权请联系我删除。</p>\n<p>参考及推荐：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript继承机制的设计思想</a></p>\n<p><a href=\"https://juejin.im/post/599d69fc6fb9a0248f4a7b31\" target=\"_blank\" rel=\"noopener\">白话原型和原型链</a></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">JavaScript深入之从原型到原型链 #2</a></p>\n<p><a href=\"http://book.jirengu.com/fe/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html\" target=\"_blank\" rel=\"noopener\">饥人谷课件-原型链和继承</a></p>\n"},{"title":"理解虚拟 DOM","date":"2018-09-27T13:10:41.000Z","_content":"# DOM 和 Virtual DOM\n**DOM：Document Object Model 把文档变成对象的模型\n在没有 DOM 之前，JavaScript 想要操作页面（文档）内的元素比较麻烦，于是有了 DOM API 把文档变成对象的模型，可以通过操作这些 API，直接操作元素，而不需要经过麻烦的遍历等基本操作。有了 DOM 写代码的人是舒服了（当然我们知道 DOM 也比较麻烦），但是事实上它的速度自然没有原生 js 的对象来得快。\n问题：在需要操作大量页面元素的时候，每当发生更改，有什么办法能够快速生成新页面？\n你可以很快想到用模版引擎重新渲染整个视图，而这样会产生很多问题，首要问题就是慢。DOM 内部含有大量数据结构，而我们有时只对其中一部分元素内容进行增删改查，但却需要对整个页面进行重复渲染。\n方法：通过创建与 DOM 的数据结构映射的 Virtual DOM 虚拟数据结构，我们只操作虚拟数据结构，先比较虚拟 DOM 的异同，再将最终操作结果反应到 真实 DOM 中。\n在整个过程中，DOM 只操作了一次，其他改变的操作，我们都通过操作虚拟 DOM：当页面元素需要发生变化，原本我们需要通过 DOM 操作，重新渲染页面，而现在，我们只需要操作虚拟 DOM ，由虚拟 DOM 对比之前操作，把页面变化部分反馈给 DOM，此时 DOM 只需要渲染变化的一部分，不用再次渲染整个页面，大大提高效率和性能。**\n\n`\nVirtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）\n`\n\n# 过程实现\n\n文档界面\n```\n<body>\n    <div id=\"root\"></div>\n    <script src=\"./v-dom.js\"></script>\n</body>\n```\n```\n// 定义一个 VNode 类\nclass VNode {\n    constructor(tag, children, text) {\n        this.tag = tag\n        this.children = children\n        this.text = text\n    }\n\n    render() { // render 方法，创建子元素\n        if (this.tag === '#text') {\n            return document.createTextNode(this.text)\n        }\n        let el = document.createElement(this.tag)\n        this.children.forEach(vChild => {\n            el.appendChild(vChild.render())\n        })\n        return el\n    }\n}\n// v 构造函数，判断子元素类型\nfunction v(tag, children, text) {\n    if (typeof children === 'string') {\n        text = children\n        children = []\n    }\n    return new VNode(tag, children, text)\n}\n```\n\n```\nlet vNode = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')])\n])\nconst root = document.querySelector('#root')\nroot.appendChild(vNode.render())\n```\n通过上述代码，我们构建了一个简单的虚拟 DOM 树，可以通过它构建一个真正的 DOM 树，渲染到页面中\n![](https://upload-images.jianshu.io/upload_images/7094266-762ab26eabd2e04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**精髓：通过对比新旧虚拟 DOM 树，其原生对象判断页面增删改查了哪些部分，而后单独渲染差异部分。没有这个 patchElement 就失去了虚拟 DOM 的意义，和原始 DOM 效果无异了**\n```\nfunction patchElement(parent, newVNode, oldVNode, index = 0) {\n    if (!oldVNode) {\n        parent.appendChild(newVNode.render())\n    } else if (!newVNode) {\n        parent.removeChild(parent.childNodes[index])\n    } else if (newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) {\n        parent.replaceChild(newVNode.render(), parent.childNodes[index])\n    } else {\n        for (let i = 0; i < newVNode.children.length || i < oldVNode.children.length; i++) {\n            patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)\n        }\n    }\n}\n```\n当然，上述只是简单的算法判断逻辑，但是也能让我们理解其相应过程和原理。\n\n整个状态变更的过程如下\n```\n// 1. 构建虚拟DOM\nlet vNode = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')])\n])\n// 3. 生成新的虚拟DOM\nlet vNode1 = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')]),\n    v('p', [v('#text', 'upload')])\n])\n// 2. 通过虚拟DOM构建真正的DOM\nconst root = document.querySelector('#root')\npatchElement(root, vNode)\nvar n = 0\n// 4. 比较两次虚拟DOM树的不同，在真正的DOM元素上应用变更\ndocument.querySelector('.btn').onclick = function () {\n    if (n % 2 == 0) {\n        patchElement(root, vNode1, vNode)\n    } else {\n        patchElement(root, vNode, vNode1)\n    }\n    n += 1\n}\n```\n\n本文仅供个人学习使用\n\n---\n主要参考：[深度剖析：如何实现一个 Virtual DOM 算法](https://github.com/livoras/blog/issues/13)","source":"_posts/理解虚拟-DOM.md","raw":"---\ntitle: 理解虚拟 DOM\ndate: 2018-09-27 21:10:41\ntags:\n---\n# DOM 和 Virtual DOM\n**DOM：Document Object Model 把文档变成对象的模型\n在没有 DOM 之前，JavaScript 想要操作页面（文档）内的元素比较麻烦，于是有了 DOM API 把文档变成对象的模型，可以通过操作这些 API，直接操作元素，而不需要经过麻烦的遍历等基本操作。有了 DOM 写代码的人是舒服了（当然我们知道 DOM 也比较麻烦），但是事实上它的速度自然没有原生 js 的对象来得快。\n问题：在需要操作大量页面元素的时候，每当发生更改，有什么办法能够快速生成新页面？\n你可以很快想到用模版引擎重新渲染整个视图，而这样会产生很多问题，首要问题就是慢。DOM 内部含有大量数据结构，而我们有时只对其中一部分元素内容进行增删改查，但却需要对整个页面进行重复渲染。\n方法：通过创建与 DOM 的数据结构映射的 Virtual DOM 虚拟数据结构，我们只操作虚拟数据结构，先比较虚拟 DOM 的异同，再将最终操作结果反应到 真实 DOM 中。\n在整个过程中，DOM 只操作了一次，其他改变的操作，我们都通过操作虚拟 DOM：当页面元素需要发生变化，原本我们需要通过 DOM 操作，重新渲染页面，而现在，我们只需要操作虚拟 DOM ，由虚拟 DOM 对比之前操作，把页面变化部分反馈给 DOM，此时 DOM 只需要渲染变化的一部分，不用再次渲染整个页面，大大提高效率和性能。**\n\n`\nVirtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）\n`\n\n# 过程实现\n\n文档界面\n```\n<body>\n    <div id=\"root\"></div>\n    <script src=\"./v-dom.js\"></script>\n</body>\n```\n```\n// 定义一个 VNode 类\nclass VNode {\n    constructor(tag, children, text) {\n        this.tag = tag\n        this.children = children\n        this.text = text\n    }\n\n    render() { // render 方法，创建子元素\n        if (this.tag === '#text') {\n            return document.createTextNode(this.text)\n        }\n        let el = document.createElement(this.tag)\n        this.children.forEach(vChild => {\n            el.appendChild(vChild.render())\n        })\n        return el\n    }\n}\n// v 构造函数，判断子元素类型\nfunction v(tag, children, text) {\n    if (typeof children === 'string') {\n        text = children\n        children = []\n    }\n    return new VNode(tag, children, text)\n}\n```\n\n```\nlet vNode = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')])\n])\nconst root = document.querySelector('#root')\nroot.appendChild(vNode.render())\n```\n通过上述代码，我们构建了一个简单的虚拟 DOM 树，可以通过它构建一个真正的 DOM 树，渲染到页面中\n![](https://upload-images.jianshu.io/upload_images/7094266-762ab26eabd2e04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**精髓：通过对比新旧虚拟 DOM 树，其原生对象判断页面增删改查了哪些部分，而后单独渲染差异部分。没有这个 patchElement 就失去了虚拟 DOM 的意义，和原始 DOM 效果无异了**\n```\nfunction patchElement(parent, newVNode, oldVNode, index = 0) {\n    if (!oldVNode) {\n        parent.appendChild(newVNode.render())\n    } else if (!newVNode) {\n        parent.removeChild(parent.childNodes[index])\n    } else if (newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) {\n        parent.replaceChild(newVNode.render(), parent.childNodes[index])\n    } else {\n        for (let i = 0; i < newVNode.children.length || i < oldVNode.children.length; i++) {\n            patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)\n        }\n    }\n}\n```\n当然，上述只是简单的算法判断逻辑，但是也能让我们理解其相应过程和原理。\n\n整个状态变更的过程如下\n```\n// 1. 构建虚拟DOM\nlet vNode = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')])\n])\n// 3. 生成新的虚拟DOM\nlet vNode1 = v('div', [\n    v('p', [\n        v('span', [v('#text', 'Ada')])\n    ]),\n    v('span', [v('#text', 'shuai')]),\n    v('p', [v('#text', 'upload')])\n])\n// 2. 通过虚拟DOM构建真正的DOM\nconst root = document.querySelector('#root')\npatchElement(root, vNode)\nvar n = 0\n// 4. 比较两次虚拟DOM树的不同，在真正的DOM元素上应用变更\ndocument.querySelector('.btn').onclick = function () {\n    if (n % 2 == 0) {\n        patchElement(root, vNode1, vNode)\n    } else {\n        patchElement(root, vNode, vNode1)\n    }\n    n += 1\n}\n```\n\n本文仅供个人学习使用\n\n---\n主要参考：[深度剖析：如何实现一个 Virtual DOM 算法](https://github.com/livoras/blog/issues/13)","slug":"理解虚拟-DOM","published":1,"updated":"2019-01-18T14:46:13.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvv000rhw990c0n8wvi","content":"<h1 id=\"DOM-和-Virtual-DOM\"><a href=\"#DOM-和-Virtual-DOM\" class=\"headerlink\" title=\"DOM 和 Virtual DOM\"></a>DOM 和 Virtual DOM</h1><p><strong>DOM：Document Object Model 把文档变成对象的模型<br>在没有 DOM 之前，JavaScript 想要操作页面（文档）内的元素比较麻烦，于是有了 DOM API 把文档变成对象的模型，可以通过操作这些 API，直接操作元素，而不需要经过麻烦的遍历等基本操作。有了 DOM 写代码的人是舒服了（当然我们知道 DOM 也比较麻烦），但是事实上它的速度自然没有原生 js 的对象来得快。<br>问题：在需要操作大量页面元素的时候，每当发生更改，有什么办法能够快速生成新页面？<br>你可以很快想到用模版引擎重新渲染整个视图，而这样会产生很多问题，首要问题就是慢。DOM 内部含有大量数据结构，而我们有时只对其中一部分元素内容进行增删改查，但却需要对整个页面进行重复渲染。<br>方法：通过创建与 DOM 的数据结构映射的 Virtual DOM 虚拟数据结构，我们只操作虚拟数据结构，先比较虚拟 DOM 的异同，再将最终操作结果反应到 真实 DOM 中。<br>在整个过程中，DOM 只操作了一次，其他改变的操作，我们都通过操作虚拟 DOM：当页面元素需要发生变化，原本我们需要通过 DOM 操作，重新渲染页面，而现在，我们只需要操作虚拟 DOM ，由虚拟 DOM 对比之前操作，把页面变化部分反馈给 DOM，此时 DOM 只需要渲染变化的一部分，不用再次渲染整个页面，大大提高效率和性能。</strong></p>\n<p><code>Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）</code></p>\n<h1 id=\"过程实现\"><a href=\"#过程实现\" class=\"headerlink\" title=\"过程实现\"></a>过程实现</h1><p>文档界面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./v-dom.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个 VNode 类</span><br><span class=\"line\">class VNode &#123;</span><br><span class=\"line\">    constructor(tag, children, text) &#123;</span><br><span class=\"line\">        this.tag = tag</span><br><span class=\"line\">        this.children = children</span><br><span class=\"line\">        this.text = text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123; // render 方法，创建子元素</span><br><span class=\"line\">        if (this.tag === &apos;#text&apos;) &#123;</span><br><span class=\"line\">            return document.createTextNode(this.text)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let el = document.createElement(this.tag)</span><br><span class=\"line\">        this.children.forEach(vChild =&gt; &#123;</span><br><span class=\"line\">            el.appendChild(vChild.render())</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        return el</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// v 构造函数，判断子元素类型</span><br><span class=\"line\">function v(tag, children, text) &#123;</span><br><span class=\"line\">    if (typeof children === &apos;string&apos;) &#123;</span><br><span class=\"line\">        text = children</span><br><span class=\"line\">        children = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return new VNode(tag, children, text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vNode = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">const root = document.querySelector(&apos;#root&apos;)</span><br><span class=\"line\">root.appendChild(vNode.render())</span><br></pre></td></tr></table></figure>\n<p>通过上述代码，我们构建了一个简单的虚拟 DOM 树，可以通过它构建一个真正的 DOM 树，渲染到页面中<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-762ab26eabd2e04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>精髓：通过对比新旧虚拟 DOM 树，其原生对象判断页面增删改查了哪些部分，而后单独渲染差异部分。没有这个 patchElement 就失去了虚拟 DOM 的意义，和原始 DOM 效果无异了</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function patchElement(parent, newVNode, oldVNode, index = 0) &#123;</span><br><span class=\"line\">    if (!oldVNode) &#123;</span><br><span class=\"line\">        parent.appendChild(newVNode.render())</span><br><span class=\"line\">    &#125; else if (!newVNode) &#123;</span><br><span class=\"line\">        parent.removeChild(parent.childNodes[index])</span><br><span class=\"line\">    &#125; else if (newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) &#123;</span><br><span class=\"line\">        parent.replaceChild(newVNode.render(), parent.childNodes[index])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; newVNode.children.length || i &lt; oldVNode.children.length; i++) &#123;</span><br><span class=\"line\">            patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，上述只是简单的算法判断逻辑，但是也能让我们理解其相应过程和原理。</p>\n<p>整个状态变更的过程如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 构建虚拟DOM</span><br><span class=\"line\">let vNode = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">// 3. 生成新的虚拟DOM</span><br><span class=\"line\">let vNode1 = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)]),</span><br><span class=\"line\">    v(&apos;p&apos;, [v(&apos;#text&apos;, &apos;upload&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">// 2. 通过虚拟DOM构建真正的DOM</span><br><span class=\"line\">const root = document.querySelector(&apos;#root&apos;)</span><br><span class=\"line\">patchElement(root, vNode)</span><br><span class=\"line\">var n = 0</span><br><span class=\"line\">// 4. 比较两次虚拟DOM树的不同，在真正的DOM元素上应用变更</span><br><span class=\"line\">document.querySelector(&apos;.btn&apos;).onclick = function () &#123;</span><br><span class=\"line\">    if (n % 2 == 0) &#123;</span><br><span class=\"line\">        patchElement(root, vNode1, vNode)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        patchElement(root, vNode, vNode1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n += 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本文仅供个人学习使用</p>\n<hr>\n<p>主要参考：<a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"noopener\">深度剖析：如何实现一个 Virtual DOM 算法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"DOM-和-Virtual-DOM\"><a href=\"#DOM-和-Virtual-DOM\" class=\"headerlink\" title=\"DOM 和 Virtual DOM\"></a>DOM 和 Virtual DOM</h1><p><strong>DOM：Document Object Model 把文档变成对象的模型<br>在没有 DOM 之前，JavaScript 想要操作页面（文档）内的元素比较麻烦，于是有了 DOM API 把文档变成对象的模型，可以通过操作这些 API，直接操作元素，而不需要经过麻烦的遍历等基本操作。有了 DOM 写代码的人是舒服了（当然我们知道 DOM 也比较麻烦），但是事实上它的速度自然没有原生 js 的对象来得快。<br>问题：在需要操作大量页面元素的时候，每当发生更改，有什么办法能够快速生成新页面？<br>你可以很快想到用模版引擎重新渲染整个视图，而这样会产生很多问题，首要问题就是慢。DOM 内部含有大量数据结构，而我们有时只对其中一部分元素内容进行增删改查，但却需要对整个页面进行重复渲染。<br>方法：通过创建与 DOM 的数据结构映射的 Virtual DOM 虚拟数据结构，我们只操作虚拟数据结构，先比较虚拟 DOM 的异同，再将最终操作结果反应到 真实 DOM 中。<br>在整个过程中，DOM 只操作了一次，其他改变的操作，我们都通过操作虚拟 DOM：当页面元素需要发生变化，原本我们需要通过 DOM 操作，重新渲染页面，而现在，我们只需要操作虚拟 DOM ，由虚拟 DOM 对比之前操作，把页面变化部分反馈给 DOM，此时 DOM 只需要渲染变化的一部分，不用再次渲染整个页面，大大提高效率和性能。</strong></p>\n<p><code>Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）</code></p>\n<h1 id=\"过程实现\"><a href=\"#过程实现\" class=\"headerlink\" title=\"过程实现\"></a>过程实现</h1><p>文档界面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./v-dom.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个 VNode 类</span><br><span class=\"line\">class VNode &#123;</span><br><span class=\"line\">    constructor(tag, children, text) &#123;</span><br><span class=\"line\">        this.tag = tag</span><br><span class=\"line\">        this.children = children</span><br><span class=\"line\">        this.text = text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123; // render 方法，创建子元素</span><br><span class=\"line\">        if (this.tag === &apos;#text&apos;) &#123;</span><br><span class=\"line\">            return document.createTextNode(this.text)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let el = document.createElement(this.tag)</span><br><span class=\"line\">        this.children.forEach(vChild =&gt; &#123;</span><br><span class=\"line\">            el.appendChild(vChild.render())</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        return el</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// v 构造函数，判断子元素类型</span><br><span class=\"line\">function v(tag, children, text) &#123;</span><br><span class=\"line\">    if (typeof children === &apos;string&apos;) &#123;</span><br><span class=\"line\">        text = children</span><br><span class=\"line\">        children = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return new VNode(tag, children, text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vNode = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">const root = document.querySelector(&apos;#root&apos;)</span><br><span class=\"line\">root.appendChild(vNode.render())</span><br></pre></td></tr></table></figure>\n<p>通过上述代码，我们构建了一个简单的虚拟 DOM 树，可以通过它构建一个真正的 DOM 树，渲染到页面中<br><img src=\"https://upload-images.jianshu.io/upload_images/7094266-762ab26eabd2e04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>精髓：通过对比新旧虚拟 DOM 树，其原生对象判断页面增删改查了哪些部分，而后单独渲染差异部分。没有这个 patchElement 就失去了虚拟 DOM 的意义，和原始 DOM 效果无异了</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function patchElement(parent, newVNode, oldVNode, index = 0) &#123;</span><br><span class=\"line\">    if (!oldVNode) &#123;</span><br><span class=\"line\">        parent.appendChild(newVNode.render())</span><br><span class=\"line\">    &#125; else if (!newVNode) &#123;</span><br><span class=\"line\">        parent.removeChild(parent.childNodes[index])</span><br><span class=\"line\">    &#125; else if (newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) &#123;</span><br><span class=\"line\">        parent.replaceChild(newVNode.render(), parent.childNodes[index])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; newVNode.children.length || i &lt; oldVNode.children.length; i++) &#123;</span><br><span class=\"line\">            patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，上述只是简单的算法判断逻辑，但是也能让我们理解其相应过程和原理。</p>\n<p>整个状态变更的过程如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 构建虚拟DOM</span><br><span class=\"line\">let vNode = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">// 3. 生成新的虚拟DOM</span><br><span class=\"line\">let vNode1 = v(&apos;div&apos;, [</span><br><span class=\"line\">    v(&apos;p&apos;, [</span><br><span class=\"line\">        v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;Ada&apos;)])</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    v(&apos;span&apos;, [v(&apos;#text&apos;, &apos;shuai&apos;)]),</span><br><span class=\"line\">    v(&apos;p&apos;, [v(&apos;#text&apos;, &apos;upload&apos;)])</span><br><span class=\"line\">])</span><br><span class=\"line\">// 2. 通过虚拟DOM构建真正的DOM</span><br><span class=\"line\">const root = document.querySelector(&apos;#root&apos;)</span><br><span class=\"line\">patchElement(root, vNode)</span><br><span class=\"line\">var n = 0</span><br><span class=\"line\">// 4. 比较两次虚拟DOM树的不同，在真正的DOM元素上应用变更</span><br><span class=\"line\">document.querySelector(&apos;.btn&apos;).onclick = function () &#123;</span><br><span class=\"line\">    if (n % 2 == 0) &#123;</span><br><span class=\"line\">        patchElement(root, vNode1, vNode)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        patchElement(root, vNode, vNode1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n += 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本文仅供个人学习使用</p>\n<hr>\n<p>主要参考：<a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"noopener\">深度剖析：如何实现一个 Virtual DOM 算法</a></p>\n"},{"title":"理解JSONP 下","date":"2018-08-12T04:25:05.000Z","_content":"[理解JSONP 上](https://www.jianshu.com/p/2a2fe02917e7)\n# 跨域SRJ\n**如果我访问其他网站的服务器，可以吗？\n由于JSONP可以规避同源策略，因此可以**\n下面我们自己做两个网站尝试一下\n请求方：ada.com （浏览器）\n响应方：jack.com （服务器）\n\nLinux 或 mac直接\n```\nvi /etc/hosts\n```\nwindows需要找到/etc/hosts文件 比较难找，推荐Everything![](https://upload-images.jianshu.io/upload_images/7094266-19f9953c967705a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)在hosts文件下编辑两个网站![](https://upload-images.jianshu.io/upload_images/7094266-28b643545d3a06f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)打开两个 node 服务器![](https://upload-images.jianshu.io/upload_images/7094266-3cd83a6dd9b8e522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n将script.src改成后端服务器的jack.com\n```\nscript.src = 'http://jack.com:8002/pay'\n```\n成功在 ada.com里接收到jack.com，ada.com 的前端程序员成功向jack.com 的后端程序员发起请求并得到响应![](https://upload-images.jianshu.io/upload_images/7094266-455e37f97e889991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)跨域SRJ成功\n\n# 代码分离：\n**耦合**和**解耦**![](https://upload-images.jianshu.io/upload_images/7094266-39446f3e68a37a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)上面的amount.innerText=amount.innerText-1就是前端页面的代码，这说明jack.com 的后端程序元需要对ada.com的页面细节了解的很清楚，这种情况叫做耦合\n那我们让前后端分离呗，即解耦\n后端改成\n```\n//获取参数.call（this，成功）\nresponse.write(`${query.callbackName}.call(undefined,'success')`)\n```\n前端给参\n```\n//callbackName = 随便\nscript.src = 'http://jack.com:8002/pay?callbackName=yyy'\n```\n# JSONP:\n![](https://upload-images.jianshu.io/upload_images/7094266-9442483142643759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面代码高亮的部分就是[JSON](https://www.json.org/)（一个键必须是双引号的对象）\nJSON左边的代码就是左padding，右边就是右padding，所以JSONP=JSON +Padding\n# 让我们理一下过程\n请求方：ada.com 的前端程序员（浏览器）\n响应方：jack.com 的后端程序员（服务器）\n1.请求方创建 script，src 指向响应方，同时传一个查询参数 ?callbackName=yyy\n2.响应方根据查询参数callbackName，构造形如\nyyy.call(undefined, '你要的数据')\nyyy('你要的数据')\n这样的响应\n3.浏览器接收到响应，就会执行 yyy.call(undefined, '你要的数据')\n4.那么请求方就知道了他要的数据\n这就是 JSONP\n**约定：**\ncallbackName -> callback\nyyy -> 随机数 如 ada1213123123412()\n# JSONP方案\n```\nbutton.addEventListener('click', (e)=>{\n    let script = document.createElement('script')\n    let functionName = 'ada'+ parseInt(Math.random()*10000000 ,10)\n    window[functionName] = function(){  // 每次请求之前搞出一个随机的函数\n        amount.innerText = amount.innerText - 1\n    }\n    script.src = 'http://jack.com:8002/pay?callback=' + functionName\n    document.body.appendChild(script)\n    script.onload = function(e){ // 状态码是 200~299 则表示成功\n        e.currentTarget.remove()\n        delete window[functionName] // 请求完了就干掉这个随机函数\n    }\n    script.onload = function(e){ // 状态码大于等于 400 则表示失败\n        e.currentTarget.remove()\n        delete window[functionName] // 请求完了就干掉这个随机函数\n    }\n})\n```\nNode部分：\n```\nif (path === '/pay') {\n    var amount = fs.readFileSync('./db', 'utf8')\n    var newAmount = amount - 1\n    fs.writeFileSync('./db', newAmount)\n    response.setHeader('Content-Type', 'application/javascript')\n    response.write(`${query.callbackName}.call(undefined,\n      'success'`)\n    response.end()\n```\njQuery写法\n```\n $.ajax({\n url: \"http://jack.com:8002/pay\",\n dataType: \"jsonp\",\n success: function( response ) {\n     if(response === 'success'){\n     amount.innerText = amount.innerText - 1\n     }\n }\n })\n```\n# [JSONP 为什么不支持 POST？](https://www.zhihu.com/question/28890257)\n因为  JSONP 是通过**动态创建 Script** 实现的，而**动态创建 Script**只能用GET请求，不能用POST请求\n\n---\n本文主要用于个人学习使用","source":"_posts/理解JSONP-下.md","raw":"---\ntitle: 理解JSONP 下\ndate: 2018-08-12 12:25:05\ntags:\n---\n[理解JSONP 上](https://www.jianshu.com/p/2a2fe02917e7)\n# 跨域SRJ\n**如果我访问其他网站的服务器，可以吗？\n由于JSONP可以规避同源策略，因此可以**\n下面我们自己做两个网站尝试一下\n请求方：ada.com （浏览器）\n响应方：jack.com （服务器）\n\nLinux 或 mac直接\n```\nvi /etc/hosts\n```\nwindows需要找到/etc/hosts文件 比较难找，推荐Everything![](https://upload-images.jianshu.io/upload_images/7094266-19f9953c967705a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)在hosts文件下编辑两个网站![](https://upload-images.jianshu.io/upload_images/7094266-28b643545d3a06f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)打开两个 node 服务器![](https://upload-images.jianshu.io/upload_images/7094266-3cd83a6dd9b8e522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n将script.src改成后端服务器的jack.com\n```\nscript.src = 'http://jack.com:8002/pay'\n```\n成功在 ada.com里接收到jack.com，ada.com 的前端程序员成功向jack.com 的后端程序员发起请求并得到响应![](https://upload-images.jianshu.io/upload_images/7094266-455e37f97e889991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)跨域SRJ成功\n\n# 代码分离：\n**耦合**和**解耦**![](https://upload-images.jianshu.io/upload_images/7094266-39446f3e68a37a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)上面的amount.innerText=amount.innerText-1就是前端页面的代码，这说明jack.com 的后端程序元需要对ada.com的页面细节了解的很清楚，这种情况叫做耦合\n那我们让前后端分离呗，即解耦\n后端改成\n```\n//获取参数.call（this，成功）\nresponse.write(`${query.callbackName}.call(undefined,'success')`)\n```\n前端给参\n```\n//callbackName = 随便\nscript.src = 'http://jack.com:8002/pay?callbackName=yyy'\n```\n# JSONP:\n![](https://upload-images.jianshu.io/upload_images/7094266-9442483142643759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面代码高亮的部分就是[JSON](https://www.json.org/)（一个键必须是双引号的对象）\nJSON左边的代码就是左padding，右边就是右padding，所以JSONP=JSON +Padding\n# 让我们理一下过程\n请求方：ada.com 的前端程序员（浏览器）\n响应方：jack.com 的后端程序员（服务器）\n1.请求方创建 script，src 指向响应方，同时传一个查询参数 ?callbackName=yyy\n2.响应方根据查询参数callbackName，构造形如\nyyy.call(undefined, '你要的数据')\nyyy('你要的数据')\n这样的响应\n3.浏览器接收到响应，就会执行 yyy.call(undefined, '你要的数据')\n4.那么请求方就知道了他要的数据\n这就是 JSONP\n**约定：**\ncallbackName -> callback\nyyy -> 随机数 如 ada1213123123412()\n# JSONP方案\n```\nbutton.addEventListener('click', (e)=>{\n    let script = document.createElement('script')\n    let functionName = 'ada'+ parseInt(Math.random()*10000000 ,10)\n    window[functionName] = function(){  // 每次请求之前搞出一个随机的函数\n        amount.innerText = amount.innerText - 1\n    }\n    script.src = 'http://jack.com:8002/pay?callback=' + functionName\n    document.body.appendChild(script)\n    script.onload = function(e){ // 状态码是 200~299 则表示成功\n        e.currentTarget.remove()\n        delete window[functionName] // 请求完了就干掉这个随机函数\n    }\n    script.onload = function(e){ // 状态码大于等于 400 则表示失败\n        e.currentTarget.remove()\n        delete window[functionName] // 请求完了就干掉这个随机函数\n    }\n})\n```\nNode部分：\n```\nif (path === '/pay') {\n    var amount = fs.readFileSync('./db', 'utf8')\n    var newAmount = amount - 1\n    fs.writeFileSync('./db', newAmount)\n    response.setHeader('Content-Type', 'application/javascript')\n    response.write(`${query.callbackName}.call(undefined,\n      'success'`)\n    response.end()\n```\njQuery写法\n```\n $.ajax({\n url: \"http://jack.com:8002/pay\",\n dataType: \"jsonp\",\n success: function( response ) {\n     if(response === 'success'){\n     amount.innerText = amount.innerText - 1\n     }\n }\n })\n```\n# [JSONP 为什么不支持 POST？](https://www.zhihu.com/question/28890257)\n因为  JSONP 是通过**动态创建 Script** 实现的，而**动态创建 Script**只能用GET请求，不能用POST请求\n\n---\n本文主要用于个人学习使用","slug":"理解JSONP-下","published":1,"updated":"2019-01-22T13:45:51.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvw000shw99aed94nzr","content":"<p><a href=\"https://www.jianshu.com/p/2a2fe02917e7\" target=\"_blank\" rel=\"noopener\">理解JSONP 上</a></p>\n<h1 id=\"跨域SRJ\"><a href=\"#跨域SRJ\" class=\"headerlink\" title=\"跨域SRJ\"></a>跨域SRJ</h1><p><strong>如果我访问其他网站的服务器，可以吗？<br>由于JSONP可以规避同源策略，因此可以</strong><br>下面我们自己做两个网站尝试一下<br>请求方：ada.com （浏览器）<br>响应方：jack.com （服务器）</p>\n<p>Linux 或 mac直接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br></pre></td></tr></table></figure></p>\n<p>windows需要找到/etc/hosts文件 比较难找，推荐Everything<img src=\"https://upload-images.jianshu.io/upload_images/7094266-19f9953c967705a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">在hosts文件下编辑两个网站<img src=\"https://upload-images.jianshu.io/upload_images/7094266-28b643545d3a06f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">打开两个 node 服务器<img src=\"https://upload-images.jianshu.io/upload_images/7094266-3cd83a6dd9b8e522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>将script.src改成后端服务器的jack.com<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script.src = &apos;http://jack.com:8002/pay&apos;</span><br></pre></td></tr></table></figure></p>\n<p>成功在 ada.com里接收到jack.com，ada.com 的前端程序员成功向jack.com 的后端程序员发起请求并得到响应<img src=\"https://upload-images.jianshu.io/upload_images/7094266-455e37f97e889991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">跨域SRJ成功</p>\n<h1 id=\"代码分离：\"><a href=\"#代码分离：\" class=\"headerlink\" title=\"代码分离：\"></a>代码分离：</h1><p><strong>耦合</strong>和<strong>解耦</strong><img src=\"https://upload-images.jianshu.io/upload_images/7094266-39446f3e68a37a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">上面的amount.innerText=amount.innerText-1就是前端页面的代码，这说明jack.com 的后端程序元需要对ada.com的页面细节了解的很清楚，这种情况叫做耦合<br>那我们让前后端分离呗，即解耦<br>后端改成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取参数.call（this，成功）</span><br><span class=\"line\">response.write(`$&#123;query.callbackName&#125;.call(undefined,&apos;success&apos;)`)</span><br></pre></td></tr></table></figure></p>\n<p>前端给参<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//callbackName = 随便</span><br><span class=\"line\">script.src = &apos;http://jack.com:8002/pay?callbackName=yyy&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP:\"></a>JSONP:</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-9442483142643759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>上面代码高亮的部分就是<a href=\"https://www.json.org/\" target=\"_blank\" rel=\"noopener\">JSON</a>（一个键必须是双引号的对象）<br>JSON左边的代码就是左padding，右边就是右padding，所以JSONP=JSON +Padding</p>\n<h1 id=\"让我们理一下过程\"><a href=\"#让我们理一下过程\" class=\"headerlink\" title=\"让我们理一下过程\"></a>让我们理一下过程</h1><p>请求方：ada.com 的前端程序员（浏览器）<br>响应方：jack.com 的后端程序员（服务器）<br>1.请求方创建 script，src 指向响应方，同时传一个查询参数 ?callbackName=yyy<br>2.响应方根据查询参数callbackName，构造形如<br>yyy.call(undefined, ‘你要的数据’)<br>yyy(‘你要的数据’)<br>这样的响应<br>3.浏览器接收到响应，就会执行 yyy.call(undefined, ‘你要的数据’)<br>4.那么请求方就知道了他要的数据<br>这就是 JSONP<br><strong>约定：</strong><br>callbackName -&gt; callback<br>yyy -&gt; 随机数 如 ada1213123123412()</p>\n<h1 id=\"JSONP方案\"><a href=\"#JSONP方案\" class=\"headerlink\" title=\"JSONP方案\"></a>JSONP方案</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.addEventListener(&apos;click&apos;, (e)=&gt;&#123;</span><br><span class=\"line\">    let script = document.createElement(&apos;script&apos;)</span><br><span class=\"line\">    let functionName = &apos;ada&apos;+ parseInt(Math.random()*10000000 ,10)</span><br><span class=\"line\">    window[functionName] = function()&#123;  // 每次请求之前搞出一个随机的函数</span><br><span class=\"line\">        amount.innerText = amount.innerText - 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    script.src = &apos;http://jack.com:8002/pay?callback=&apos; + functionName</span><br><span class=\"line\">    document.body.appendChild(script)</span><br><span class=\"line\">    script.onload = function(e)&#123; // 状态码是 200~299 则表示成功</span><br><span class=\"line\">        e.currentTarget.remove()</span><br><span class=\"line\">        delete window[functionName] // 请求完了就干掉这个随机函数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    script.onload = function(e)&#123; // 状态码大于等于 400 则表示失败</span><br><span class=\"line\">        e.currentTarget.remove()</span><br><span class=\"line\">        delete window[functionName] // 请求完了就干掉这个随机函数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Node部分：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (path === &apos;/pay&apos;) &#123;</span><br><span class=\"line\">    var amount = fs.readFileSync(&apos;./db&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">    var newAmount = amount - 1</span><br><span class=\"line\">    fs.writeFileSync(&apos;./db&apos;, newAmount)</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;application/javascript&apos;)</span><br><span class=\"line\">    response.write(`$&#123;query.callbackName&#125;.call(undefined,</span><br><span class=\"line\">      &apos;success&apos;`)</span><br><span class=\"line\">    response.end()</span><br></pre></td></tr></table></figure></p>\n<p>jQuery写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">url: &quot;http://jack.com:8002/pay&quot;,</span><br><span class=\"line\">dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">success: function( response ) &#123;</span><br><span class=\"line\">    if(response === &apos;success&apos;)&#123;</span><br><span class=\"line\">    amount.innerText = amount.innerText - 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"JSONP-为什么不支持-POST？\"><a href=\"#JSONP-为什么不支持-POST？\" class=\"headerlink\" title=\"JSONP 为什么不支持 POST？\"></a><a href=\"https://www.zhihu.com/question/28890257\" target=\"_blank\" rel=\"noopener\">JSONP 为什么不支持 POST？</a></h1><p>因为  JSONP 是通过<strong>动态创建 Script</strong> 实现的，而<strong>动态创建 Script</strong>只能用GET请求，不能用POST请求</p>\n<hr>\n<p>本文主要用于个人学习使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.jianshu.com/p/2a2fe02917e7\" target=\"_blank\" rel=\"noopener\">理解JSONP 上</a></p>\n<h1 id=\"跨域SRJ\"><a href=\"#跨域SRJ\" class=\"headerlink\" title=\"跨域SRJ\"></a>跨域SRJ</h1><p><strong>如果我访问其他网站的服务器，可以吗？<br>由于JSONP可以规避同源策略，因此可以</strong><br>下面我们自己做两个网站尝试一下<br>请求方：ada.com （浏览器）<br>响应方：jack.com （服务器）</p>\n<p>Linux 或 mac直接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br></pre></td></tr></table></figure></p>\n<p>windows需要找到/etc/hosts文件 比较难找，推荐Everything<img src=\"https://upload-images.jianshu.io/upload_images/7094266-19f9953c967705a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">在hosts文件下编辑两个网站<img src=\"https://upload-images.jianshu.io/upload_images/7094266-28b643545d3a06f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">打开两个 node 服务器<img src=\"https://upload-images.jianshu.io/upload_images/7094266-3cd83a6dd9b8e522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>将script.src改成后端服务器的jack.com<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script.src = &apos;http://jack.com:8002/pay&apos;</span><br></pre></td></tr></table></figure></p>\n<p>成功在 ada.com里接收到jack.com，ada.com 的前端程序员成功向jack.com 的后端程序员发起请求并得到响应<img src=\"https://upload-images.jianshu.io/upload_images/7094266-455e37f97e889991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">跨域SRJ成功</p>\n<h1 id=\"代码分离：\"><a href=\"#代码分离：\" class=\"headerlink\" title=\"代码分离：\"></a>代码分离：</h1><p><strong>耦合</strong>和<strong>解耦</strong><img src=\"https://upload-images.jianshu.io/upload_images/7094266-39446f3e68a37a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">上面的amount.innerText=amount.innerText-1就是前端页面的代码，这说明jack.com 的后端程序元需要对ada.com的页面细节了解的很清楚，这种情况叫做耦合<br>那我们让前后端分离呗，即解耦<br>后端改成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取参数.call（this，成功）</span><br><span class=\"line\">response.write(`$&#123;query.callbackName&#125;.call(undefined,&apos;success&apos;)`)</span><br></pre></td></tr></table></figure></p>\n<p>前端给参<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//callbackName = 随便</span><br><span class=\"line\">script.src = &apos;http://jack.com:8002/pay?callbackName=yyy&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP:\"></a>JSONP:</h1><p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-9442483142643759.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>上面代码高亮的部分就是<a href=\"https://www.json.org/\" target=\"_blank\" rel=\"noopener\">JSON</a>（一个键必须是双引号的对象）<br>JSON左边的代码就是左padding，右边就是右padding，所以JSONP=JSON +Padding</p>\n<h1 id=\"让我们理一下过程\"><a href=\"#让我们理一下过程\" class=\"headerlink\" title=\"让我们理一下过程\"></a>让我们理一下过程</h1><p>请求方：ada.com 的前端程序员（浏览器）<br>响应方：jack.com 的后端程序员（服务器）<br>1.请求方创建 script，src 指向响应方，同时传一个查询参数 ?callbackName=yyy<br>2.响应方根据查询参数callbackName，构造形如<br>yyy.call(undefined, ‘你要的数据’)<br>yyy(‘你要的数据’)<br>这样的响应<br>3.浏览器接收到响应，就会执行 yyy.call(undefined, ‘你要的数据’)<br>4.那么请求方就知道了他要的数据<br>这就是 JSONP<br><strong>约定：</strong><br>callbackName -&gt; callback<br>yyy -&gt; 随机数 如 ada1213123123412()</p>\n<h1 id=\"JSONP方案\"><a href=\"#JSONP方案\" class=\"headerlink\" title=\"JSONP方案\"></a>JSONP方案</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.addEventListener(&apos;click&apos;, (e)=&gt;&#123;</span><br><span class=\"line\">    let script = document.createElement(&apos;script&apos;)</span><br><span class=\"line\">    let functionName = &apos;ada&apos;+ parseInt(Math.random()*10000000 ,10)</span><br><span class=\"line\">    window[functionName] = function()&#123;  // 每次请求之前搞出一个随机的函数</span><br><span class=\"line\">        amount.innerText = amount.innerText - 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    script.src = &apos;http://jack.com:8002/pay?callback=&apos; + functionName</span><br><span class=\"line\">    document.body.appendChild(script)</span><br><span class=\"line\">    script.onload = function(e)&#123; // 状态码是 200~299 则表示成功</span><br><span class=\"line\">        e.currentTarget.remove()</span><br><span class=\"line\">        delete window[functionName] // 请求完了就干掉这个随机函数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    script.onload = function(e)&#123; // 状态码大于等于 400 则表示失败</span><br><span class=\"line\">        e.currentTarget.remove()</span><br><span class=\"line\">        delete window[functionName] // 请求完了就干掉这个随机函数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Node部分：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (path === &apos;/pay&apos;) &#123;</span><br><span class=\"line\">    var amount = fs.readFileSync(&apos;./db&apos;, &apos;utf8&apos;)</span><br><span class=\"line\">    var newAmount = amount - 1</span><br><span class=\"line\">    fs.writeFileSync(&apos;./db&apos;, newAmount)</span><br><span class=\"line\">    response.setHeader(&apos;Content-Type&apos;, &apos;application/javascript&apos;)</span><br><span class=\"line\">    response.write(`$&#123;query.callbackName&#125;.call(undefined,</span><br><span class=\"line\">      &apos;success&apos;`)</span><br><span class=\"line\">    response.end()</span><br></pre></td></tr></table></figure></p>\n<p>jQuery写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">url: &quot;http://jack.com:8002/pay&quot;,</span><br><span class=\"line\">dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">success: function( response ) &#123;</span><br><span class=\"line\">    if(response === &apos;success&apos;)&#123;</span><br><span class=\"line\">    amount.innerText = amount.innerText - 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"JSONP-为什么不支持-POST？\"><a href=\"#JSONP-为什么不支持-POST？\" class=\"headerlink\" title=\"JSONP 为什么不支持 POST？\"></a><a href=\"https://www.zhihu.com/question/28890257\" target=\"_blank\" rel=\"noopener\">JSONP 为什么不支持 POST？</a></h1><p>因为  JSONP 是通过<strong>动态创建 Script</strong> 实现的，而<strong>动态创建 Script</strong>只能用GET请求，不能用POST请求</p>\n<hr>\n<p>本文主要用于个人学习使用</p>\n"},{"title":"浅谈JS继承","date":"2018-11-02T12:38:27.000Z","_content":"# 什么是继承\n根据维基百科解释，可以简单概括为：\n继承是类与类之间的关系，其作用是使得子类具有父类别的各种属性和方法。\n# JS 里的原型继承模型\nJS：不好意思，我没有类。（即使是ES6中的类也是语法糖）\nJavaScript 是基于原型实现面向对象的，那么在JS中，面向对象概念中的继承自然也是基于原型。\n>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为[[prototype]]）指向它的原型对象（**prototype**）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 `null`。根据定义，`null` 没有原型，并作为这个**原型链**中的最后一个环节。\n\n>几乎所有 JavaScript 中的对象都是位于原型链顶端的 **Object** 的实例。\n\n有关原型之前写过博客[JavaScript原型和原型链](https://www.jianshu.com/p/93441c4e8f48)，对理解下面内容有帮助。\n虽然没有传统语言意义上的类，但是 JS语言 使用构造函数生成对象，实现面向对象程序设计。\n# 说了这么多，JS 中的继承到底是什么？\n**可以简单理解为：两次的原型搜索就是继承。\n数组 a 从 Array 中原型搜索到 toString 属性，只是实例属性；a 从 Array 中原型搜索到 （Array 从 Object 中原型搜索到的）valueOf 属性，可以称为继承。**\n\n接下来我们用代码实现一下继承\n## 1. 使用 prototype 实现继承\n**prototype 的作用：为构造函数内添加实例对象之间的共有属性**\n\n**明确 JS 内的继承**\n以下面代码为例\n```\n// 构造一个 人类\nfunction Human(name){\n  this.name = name\n}\n// 给所有 人类 添加一个 跑 的共有属性\nHuman.prototype.run = function(){\n  console.log(\"我叫\"+this.name+\"，我在跑\")\n  return undefined\n}\n// 构造一个 男人类\nfunction Man(name){\n  Human.call(this, name)\n  this.gender = '男'\n}\n// 所有 男人 都有好战属性\nMan.prototype.fight = function(){\n  console.log('糊你熊脸')\n}\n```\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c56b1f3dafb9ff8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到名为 ada 的人只有 name、gender 和fight 这些 Man 构造函数里面含有的属性，而没有我们希望的 Human 应该有的 run 的属性。\n**目标：假如我们有方法让 ada 有了 Man 里面没有的 run 属性，即我们自己实现了 Man 继承 Human 的过程。**\n根据我原型知识的博客里面的内容我们知道，我们可以直接：\n```\nMan.prototype.__proto__ = Human.prototype\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-3707e4361a656afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到 Man 指向了 Human 而不是直接指向 Object，ada2 继承了来自 Human 的 run 属性\n\n**但是在实际编程过程中直接操作 __ proto __ 这个非标准但许多浏览器（IE不支持）实现的属性是不规范的。**\n\n那怎么办？\nnew 可不可以？\n```\nMan.prototype = new Human()\n```\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4f15ba95a00b7a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**直接用上述代码不行，因为在 new 的过程中，虽然new 内部实现了 `Man.prototype.__proto__ = Human.prototype` 这一个过程，但是由于 new 同时会在内部执行构造函数，而在执行过程中我们未传 name，因此上图中 Human 的 name 属性显示 undefined**\n\n那么我们只要避免这个过程中 Human 执行就可以了\n```\nvar a = function(){}\na.prototype = Human.prototype\nMan.prototype = new a() \n```\n通过上面三行代码，即实现了没有内部执行空函数的 new\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c3c89ccc7f8d8aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 2. ES6 实现继承\n上面代码的 ES6 版本\n```\n// ES6 写法\nclass Human{\n     constructor(name){\n         this.name = name\n     }\n     run(){\n         console.log(\"我叫\"+this.name+\"，我在跑\")\n         return undefined\n     }\n }\n class Man extends Human{ // extends 实现上述继承过程\n     constructor(name){\n         super(name) // 调用构造函数:'超类'\n         this.gender = '男'\n     }\n     fight(){\n         console.log('糊你熊脸')\n     }\n }\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-f81f6522e88774a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文章开头已经提到， ES6 的 class 是语法糖，其实质就是函数，而上述用 class 实现继承的过程，还是基于原型链（和 ES5 的是不是完全一致）\n# 总结：\nJS 继承的原型写法相对 ES6 的写法看上去似乎更复杂，但是事实上更好理解；class 的写法更符合面向对象编程的思维，由于是语法糖因而自然写法简便，但其有一定局限性。\n>原型继承模型本身实际上比经典模型更强大\n\n---\n感谢阅读\n本文仅供个人学习使用\n\n部分参考：[继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)","source":"_posts/浅谈JS继承.md","raw":"---\ntitle: 浅谈JS继承\ndate: 2018-11-02 20:38:27\ntags:\n---\n# 什么是继承\n根据维基百科解释，可以简单概括为：\n继承是类与类之间的关系，其作用是使得子类具有父类别的各种属性和方法。\n# JS 里的原型继承模型\nJS：不好意思，我没有类。（即使是ES6中的类也是语法糖）\nJavaScript 是基于原型实现面向对象的，那么在JS中，面向对象概念中的继承自然也是基于原型。\n>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为[[prototype]]）指向它的原型对象（**prototype**）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 `null`。根据定义，`null` 没有原型，并作为这个**原型链**中的最后一个环节。\n\n>几乎所有 JavaScript 中的对象都是位于原型链顶端的 **Object** 的实例。\n\n有关原型之前写过博客[JavaScript原型和原型链](https://www.jianshu.com/p/93441c4e8f48)，对理解下面内容有帮助。\n虽然没有传统语言意义上的类，但是 JS语言 使用构造函数生成对象，实现面向对象程序设计。\n# 说了这么多，JS 中的继承到底是什么？\n**可以简单理解为：两次的原型搜索就是继承。\n数组 a 从 Array 中原型搜索到 toString 属性，只是实例属性；a 从 Array 中原型搜索到 （Array 从 Object 中原型搜索到的）valueOf 属性，可以称为继承。**\n\n接下来我们用代码实现一下继承\n## 1. 使用 prototype 实现继承\n**prototype 的作用：为构造函数内添加实例对象之间的共有属性**\n\n**明确 JS 内的继承**\n以下面代码为例\n```\n// 构造一个 人类\nfunction Human(name){\n  this.name = name\n}\n// 给所有 人类 添加一个 跑 的共有属性\nHuman.prototype.run = function(){\n  console.log(\"我叫\"+this.name+\"，我在跑\")\n  return undefined\n}\n// 构造一个 男人类\nfunction Man(name){\n  Human.call(this, name)\n  this.gender = '男'\n}\n// 所有 男人 都有好战属性\nMan.prototype.fight = function(){\n  console.log('糊你熊脸')\n}\n```\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c56b1f3dafb9ff8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到名为 ada 的人只有 name、gender 和fight 这些 Man 构造函数里面含有的属性，而没有我们希望的 Human 应该有的 run 的属性。\n**目标：假如我们有方法让 ada 有了 Man 里面没有的 run 属性，即我们自己实现了 Man 继承 Human 的过程。**\n根据我原型知识的博客里面的内容我们知道，我们可以直接：\n```\nMan.prototype.__proto__ = Human.prototype\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-3707e4361a656afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到 Man 指向了 Human 而不是直接指向 Object，ada2 继承了来自 Human 的 run 属性\n\n**但是在实际编程过程中直接操作 __ proto __ 这个非标准但许多浏览器（IE不支持）实现的属性是不规范的。**\n\n那怎么办？\nnew 可不可以？\n```\nMan.prototype = new Human()\n```\n\n![](https://upload-images.jianshu.io/upload_images/7094266-4f15ba95a00b7a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**直接用上述代码不行，因为在 new 的过程中，虽然new 内部实现了 `Man.prototype.__proto__ = Human.prototype` 这一个过程，但是由于 new 同时会在内部执行构造函数，而在执行过程中我们未传 name，因此上图中 Human 的 name 属性显示 undefined**\n\n那么我们只要避免这个过程中 Human 执行就可以了\n```\nvar a = function(){}\na.prototype = Human.prototype\nMan.prototype = new a() \n```\n通过上面三行代码，即实现了没有内部执行空函数的 new\n\n![](https://upload-images.jianshu.io/upload_images/7094266-c3c89ccc7f8d8aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 2. ES6 实现继承\n上面代码的 ES6 版本\n```\n// ES6 写法\nclass Human{\n     constructor(name){\n         this.name = name\n     }\n     run(){\n         console.log(\"我叫\"+this.name+\"，我在跑\")\n         return undefined\n     }\n }\n class Man extends Human{ // extends 实现上述继承过程\n     constructor(name){\n         super(name) // 调用构造函数:'超类'\n         this.gender = '男'\n     }\n     fight(){\n         console.log('糊你熊脸')\n     }\n }\n```\n![](https://upload-images.jianshu.io/upload_images/7094266-f81f6522e88774a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文章开头已经提到， ES6 的 class 是语法糖，其实质就是函数，而上述用 class 实现继承的过程，还是基于原型链（和 ES5 的是不是完全一致）\n# 总结：\nJS 继承的原型写法相对 ES6 的写法看上去似乎更复杂，但是事实上更好理解；class 的写法更符合面向对象编程的思维，由于是语法糖因而自然写法简便，但其有一定局限性。\n>原型继承模型本身实际上比经典模型更强大\n\n---\n感谢阅读\n本文仅供个人学习使用\n\n部分参考：[继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)","slug":"浅谈JS继承","published":1,"updated":"2019-01-18T14:36:56.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjslxkpvw000thw995r81cu44","content":"<h1 id=\"什么是继承\"><a href=\"#什么是继承\" class=\"headerlink\" title=\"什么是继承\"></a>什么是继承</h1><p>根据维基百科解释，可以简单概括为：<br>继承是类与类之间的关系，其作用是使得子类具有父类别的各种属性和方法。</p>\n<h1 id=\"JS-里的原型继承模型\"><a href=\"#JS-里的原型继承模型\" class=\"headerlink\" title=\"JS 里的原型继承模型\"></a>JS 里的原型继承模型</h1><p>JS：不好意思，我没有类。（即使是ES6中的类也是语法糖）<br>JavaScript 是基于原型实现面向对象的，那么在JS中，面向对象概念中的继承自然也是基于原型。</p>\n<blockquote>\n<p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为[[prototype]]）指向它的原型对象（<strong>prototype</strong>）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p>\n</blockquote>\n<blockquote>\n<p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 <strong>Object</strong> 的实例。</p>\n</blockquote>\n<p>有关原型之前写过博客<a href=\"https://www.jianshu.com/p/93441c4e8f48\" target=\"_blank\" rel=\"noopener\">JavaScript原型和原型链</a>，对理解下面内容有帮助。<br>虽然没有传统语言意义上的类，但是 JS语言 使用构造函数生成对象，实现面向对象程序设计。</p>\n<h1 id=\"说了这么多，JS-中的继承到底是什么？\"><a href=\"#说了这么多，JS-中的继承到底是什么？\" class=\"headerlink\" title=\"说了这么多，JS 中的继承到底是什么？\"></a>说了这么多，JS 中的继承到底是什么？</h1><p><strong>可以简单理解为：两次的原型搜索就是继承。<br>数组 a 从 Array 中原型搜索到 toString 属性，只是实例属性；a 从 Array 中原型搜索到 （Array 从 Object 中原型搜索到的）valueOf 属性，可以称为继承。</strong></p>\n<p>接下来我们用代码实现一下继承</p>\n<h2 id=\"1-使用-prototype-实现继承\"><a href=\"#1-使用-prototype-实现继承\" class=\"headerlink\" title=\"1. 使用 prototype 实现继承\"></a>1. 使用 prototype 实现继承</h2><p><strong>prototype 的作用：为构造函数内添加实例对象之间的共有属性</strong></p>\n<p><strong>明确 JS 内的继承</strong><br>以下面代码为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造一个 人类</span><br><span class=\"line\">function Human(name)&#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 给所有 人类 添加一个 跑 的共有属性</span><br><span class=\"line\">Human.prototype.run = function()&#123;</span><br><span class=\"line\">  console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">  return undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 构造一个 男人类</span><br><span class=\"line\">function Man(name)&#123;</span><br><span class=\"line\">  Human.call(this, name)</span><br><span class=\"line\">  this.gender = &apos;男&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 所有 男人 都有好战属性</span><br><span class=\"line\">Man.prototype.fight = function()&#123;</span><br><span class=\"line\">  console.log(&apos;糊你熊脸&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c56b1f3dafb9ff8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到名为 ada 的人只有 name、gender 和fight 这些 Man 构造函数里面含有的属性，而没有我们希望的 Human 应该有的 run 的属性。<br><strong>目标：假如我们有方法让 ada 有了 Man 里面没有的 run 属性，即我们自己实现了 Man 继承 Human 的过程。</strong><br>根据我原型知识的博客里面的内容我们知道，我们可以直接：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man.prototype.__proto__ = Human.prototype</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-3707e4361a656afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到 Man 指向了 Human 而不是直接指向 Object，ada2 继承了来自 Human 的 run 属性</p>\n<p><strong>但是在实际编程过程中直接操作 <strong> proto </strong> 这个非标准但许多浏览器（IE不支持）实现的属性是不规范的。</strong></p>\n<p>那怎么办？<br>new 可不可以？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man.prototype = new Human()</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4f15ba95a00b7a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>直接用上述代码不行，因为在 new 的过程中，虽然new 内部实现了 <code>Man.prototype.__proto__ = Human.prototype</code> 这一个过程，但是由于 new 同时会在内部执行构造函数，而在执行过程中我们未传 name，因此上图中 Human 的 name 属性显示 undefined</strong></p>\n<p>那么我们只要避免这个过程中 Human 执行就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = function()&#123;&#125;</span><br><span class=\"line\">a.prototype = Human.prototype</span><br><span class=\"line\">Man.prototype = new a()</span><br></pre></td></tr></table></figure></p>\n<p>通过上面三行代码，即实现了没有内部执行空函数的 new</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c3c89ccc7f8d8aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"2-ES6-实现继承\"><a href=\"#2-ES6-实现继承\" class=\"headerlink\" title=\"2. ES6 实现继承\"></a>2. ES6 实现继承</h2><p>上面代码的 ES6 版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ES6 写法</span><br><span class=\"line\">class Human&#123;</span><br><span class=\"line\">     constructor(name)&#123;</span><br><span class=\"line\">         this.name = name</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     run()&#123;</span><br><span class=\"line\">         console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">         return undefined</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> class Man extends Human&#123; // extends 实现上述继承过程</span><br><span class=\"line\">     constructor(name)&#123;</span><br><span class=\"line\">         super(name) // 调用构造函数:&apos;超类&apos;</span><br><span class=\"line\">         this.gender = &apos;男&apos;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     fight()&#123;</span><br><span class=\"line\">         console.log(&apos;糊你熊脸&apos;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-f81f6522e88774a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>文章开头已经提到， ES6 的 class 是语法糖，其实质就是函数，而上述用 class 实现继承的过程，还是基于原型链（和 ES5 的是不是完全一致）</p>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p>JS 继承的原型写法相对 ES6 的写法看上去似乎更复杂，但是事实上更好理解；class 的写法更符合面向对象编程的思维，由于是语法糖因而自然写法简便，但其有一定局限性。</p>\n<blockquote>\n<p>原型继承模型本身实际上比经典模型更强大</p>\n</blockquote>\n<hr>\n<p>感谢阅读<br>本文仅供个人学习使用</p>\n<p>部分参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是继承\"><a href=\"#什么是继承\" class=\"headerlink\" title=\"什么是继承\"></a>什么是继承</h1><p>根据维基百科解释，可以简单概括为：<br>继承是类与类之间的关系，其作用是使得子类具有父类别的各种属性和方法。</p>\n<h1 id=\"JS-里的原型继承模型\"><a href=\"#JS-里的原型继承模型\" class=\"headerlink\" title=\"JS 里的原型继承模型\"></a>JS 里的原型继承模型</h1><p>JS：不好意思，我没有类。（即使是ES6中的类也是语法糖）<br>JavaScript 是基于原型实现面向对象的，那么在JS中，面向对象概念中的继承自然也是基于原型。</p>\n<blockquote>\n<p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为[[prototype]]）指向它的原型对象（<strong>prototype</strong>）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p>\n</blockquote>\n<blockquote>\n<p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 <strong>Object</strong> 的实例。</p>\n</blockquote>\n<p>有关原型之前写过博客<a href=\"https://www.jianshu.com/p/93441c4e8f48\" target=\"_blank\" rel=\"noopener\">JavaScript原型和原型链</a>，对理解下面内容有帮助。<br>虽然没有传统语言意义上的类，但是 JS语言 使用构造函数生成对象，实现面向对象程序设计。</p>\n<h1 id=\"说了这么多，JS-中的继承到底是什么？\"><a href=\"#说了这么多，JS-中的继承到底是什么？\" class=\"headerlink\" title=\"说了这么多，JS 中的继承到底是什么？\"></a>说了这么多，JS 中的继承到底是什么？</h1><p><strong>可以简单理解为：两次的原型搜索就是继承。<br>数组 a 从 Array 中原型搜索到 toString 属性，只是实例属性；a 从 Array 中原型搜索到 （Array 从 Object 中原型搜索到的）valueOf 属性，可以称为继承。</strong></p>\n<p>接下来我们用代码实现一下继承</p>\n<h2 id=\"1-使用-prototype-实现继承\"><a href=\"#1-使用-prototype-实现继承\" class=\"headerlink\" title=\"1. 使用 prototype 实现继承\"></a>1. 使用 prototype 实现继承</h2><p><strong>prototype 的作用：为构造函数内添加实例对象之间的共有属性</strong></p>\n<p><strong>明确 JS 内的继承</strong><br>以下面代码为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造一个 人类</span><br><span class=\"line\">function Human(name)&#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 给所有 人类 添加一个 跑 的共有属性</span><br><span class=\"line\">Human.prototype.run = function()&#123;</span><br><span class=\"line\">  console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">  return undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 构造一个 男人类</span><br><span class=\"line\">function Man(name)&#123;</span><br><span class=\"line\">  Human.call(this, name)</span><br><span class=\"line\">  this.gender = &apos;男&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 所有 男人 都有好战属性</span><br><span class=\"line\">Man.prototype.fight = function()&#123;</span><br><span class=\"line\">  console.log(&apos;糊你熊脸&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c56b1f3dafb9ff8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到名为 ada 的人只有 name、gender 和fight 这些 Man 构造函数里面含有的属性，而没有我们希望的 Human 应该有的 run 的属性。<br><strong>目标：假如我们有方法让 ada 有了 Man 里面没有的 run 属性，即我们自己实现了 Man 继承 Human 的过程。</strong><br>根据我原型知识的博客里面的内容我们知道，我们可以直接：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man.prototype.__proto__ = Human.prototype</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-3707e4361a656afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>可以看到 Man 指向了 Human 而不是直接指向 Object，ada2 继承了来自 Human 的 run 属性</p>\n<p><strong>但是在实际编程过程中直接操作 <strong> proto </strong> 这个非标准但许多浏览器（IE不支持）实现的属性是不规范的。</strong></p>\n<p>那怎么办？<br>new 可不可以？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Man.prototype = new Human()</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-4f15ba95a00b7a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>直接用上述代码不行，因为在 new 的过程中，虽然new 内部实现了 <code>Man.prototype.__proto__ = Human.prototype</code> 这一个过程，但是由于 new 同时会在内部执行构造函数，而在执行过程中我们未传 name，因此上图中 Human 的 name 属性显示 undefined</strong></p>\n<p>那么我们只要避免这个过程中 Human 执行就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = function()&#123;&#125;</span><br><span class=\"line\">a.prototype = Human.prototype</span><br><span class=\"line\">Man.prototype = new a()</span><br></pre></td></tr></table></figure></p>\n<p>通过上面三行代码，即实现了没有内部执行空函数的 new</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-c3c89ccc7f8d8aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"2-ES6-实现继承\"><a href=\"#2-ES6-实现继承\" class=\"headerlink\" title=\"2. ES6 实现继承\"></a>2. ES6 实现继承</h2><p>上面代码的 ES6 版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ES6 写法</span><br><span class=\"line\">class Human&#123;</span><br><span class=\"line\">     constructor(name)&#123;</span><br><span class=\"line\">         this.name = name</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     run()&#123;</span><br><span class=\"line\">         console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">         return undefined</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> class Man extends Human&#123; // extends 实现上述继承过程</span><br><span class=\"line\">     constructor(name)&#123;</span><br><span class=\"line\">         super(name) // 调用构造函数:&apos;超类&apos;</span><br><span class=\"line\">         this.gender = &apos;男&apos;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     fight()&#123;</span><br><span class=\"line\">         console.log(&apos;糊你熊脸&apos;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/7094266-f81f6522e88774a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>文章开头已经提到， ES6 的 class 是语法糖，其实质就是函数，而上述用 class 实现继承的过程，还是基于原型链（和 ES5 的是不是完全一致）</p>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p>JS 继承的原型写法相对 ES6 的写法看上去似乎更复杂，但是事实上更好理解；class 的写法更符合面向对象编程的思维，由于是语法糖因而自然写法简便，但其有一定局限性。</p>\n<blockquote>\n<p>原型继承模型本身实际上比经典模型更强大</p>\n</blockquote>\n<hr>\n<p>感谢阅读<br>本文仅供个人学习使用</p>\n<p>部分参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}